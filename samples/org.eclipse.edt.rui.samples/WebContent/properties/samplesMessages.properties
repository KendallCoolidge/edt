###############################################################################
# Copyright © 2008, 2012 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
# IBM Corporation - initial API and implementation
#
###############################################################################
 
WelcomeOverview=Welcome to EGL Rich UI!

WelcomeText=Welcome to EGL Rich UI!<p>\
You can use the code in these samples to learn about EGL Rich UI concepts, such as basic layout, \
event handling, data validation, data display, and service invocation. The source code for each \
sample is in a package that has the same name as the sample.</p>

AdvancedOverview=With these samples, you can use some advanced features of EGL Rich UI.

AdvancedText=The samples in this collection contain some of the following advanced coding concepts:<p>\
<ul><li>Properties files that contain text for translation.  This text, and the text that is in the overview \
section, is retrieved from a properties file that is in the WebContent/properties directory.  For more \
information, see the comments in the source code that begin with // PROPERTIES.</li>\
<li>A navigation that uses the EGL Rich UI InfoBus, which is implemented by using the OpenAjax Hub.  With the \
InfoBus, you can publish application level events, and subscribers can react to them.  For example, an event is \
published when the <b>Next</b> button is clicked, and the subscribers change the navigation, contents, and overview \
panes. Producers and consumers do not need to know each other; they can function independently. \
For more information, see the source code comments that begin with // INFOBUS.</li>\
<li>Support for EGL Rich UI History, which enables the back and forward buttons of a browser.  Support also exists for bookmarks to function within a dynamic Web application.  For more information, see the comments in the \
source code that begin with // HISTORY.</li></ul>

HelloWorldOverview=<p>The Hello World sample shows a text field as input and a button with an onClick \
event handler. The output is placed into a TextLabel. All of the widgets are contained within a simple Box layout.</p>\
<p>The source code for this sample is in HelloWorld.egl, in the gallery.helloworld package.</p>

EventsOverview=<p>The events sample shows how various EGL Rich UI widgets handle events, including those \
that are associated with focus, key actions, mouse movement and click.  You can select a widget and observe the generated \
events as you interact with each widget.</p>\
<p>The source code for this sample is in the gallery.events package.</p>

DataDisplayOverview=<p>You can display data in EGL Rich UI in many ways, including by using grids and charts. Grids can \
have behaviors, which govern how data is displayed and manipulated.  The charts in these samples are created by using the \
Google Chart APIs. </p>\
<p>The source code for this sample is in the gallery.datadisplay package.</p>

DragDropOverview=<p>Tic-tac-toe is the perfect application for the EGL Rich UI drag features.  To start the game,\
drag the X to a square on the board. The Mark widget moves with the cursor and \
changes the image position.</p>\
<p>The source code for this sample is in the gallery.draganddrop package.</p>

ValidationOverview=<p>The validation sample shows how to validate in EGL Rich UI by using the \
model-view-controller (MVC) pattern. When the focus is moved away from a field that does not pass the \
validation, a message is displayed next to that field.</p>\
<p>The source code for this sample is in the gallery.validation package.</p>

ServicesText=<p>To call the service, click <b>Say Hello</b>.</p> \
<p> When running through the Preview tab, the Interface Mapping dialog offers two options for calling \
the service.  Either run the service locally using EGL source, or call the remote Web service using SOAP.</p>

ServicesOverview=<p>The services sample shows how to call an EGL dedicated service from EGL Rich UI.  \
In this sample, the Hello greeting is retrieved from the service instead of being computed in the \
EGL Rich UI handler. </p> \
<p>The sample also shows how the IDE enables you to test a service even before you deploy that service.  \
The EGL Test Server lets you access a Service type in your workspace during debugging sessions or when \
you are viewing a preview version of the Rich UI handler.</p>

 invokes that service from the Preview tab of the Rich UI editor.</p>

RSSOverview=<p>The RSS sample shows how to call a Web service by using Representational State Transfer (REST) \
from EGL Rich UI.  Really Simple Syndication (RSS) feeds are prevalent throughout the Web. In this sample, we store \
the XML that is returned from calling an RSS feed into an EGL record and display the information in a Rich UI Handler.</p>\
<p>The source code for this sample is in the gallery.rss package.</p>
