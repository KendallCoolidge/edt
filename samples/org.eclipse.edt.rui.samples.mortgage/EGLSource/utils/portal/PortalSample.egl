/*******************************************************************************
 * Copyright Â© 2008, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/

package utils.portal;

import org.eclipse.edt.rui.widgets.Box;
import org.eclipse.edt.rui.widgets.GridLayout;
import org.eclipse.edt.rui.widgets.GridLayoutData;
import org.eclipse.edt.rui.widgets.HTML;
import org.eclipse.edt.rui.widgets.TextField;
import org.eclipse.edt.rui.widgets.TextLabel;
import dojo.widgets.DojoButton;
import dojo.widgets.DojoCheckBox;
import eglx.ui.rui.Event;
import eglx.ui.rui.RUIHandler;
import eglx.ui.rui.Widget;
import utils.map.GoogleMap;

handler PortalSample type RUIHandler { onConstructionFunction = start, initialUI = [ ui ], cssFile = "utils/portal/portal.css" }

    ui Box { columns = 1, padding = 8, children = [ configPanel, portal ] };

    captionLabel TextLabel { layoutData = new GridLayoutData { row = 1, column = 1, horizontalAlignment = org.eclipse.edt.rui.widgets.GridLayoutLib.ALIGN_RIGHT, verticalAlignment = org.eclipse.edt.rui.widgets.GridLayoutLib.VALIGN_MIDDLE }, text = "Title:" };
    titleField TextField { text = "Sample Portlet", layoutData = new GridLayoutData { row = 1, column = 2 }, style = "text-transform: uppercase" };
    canMoveCheckbox DojoCheckbox { text = "Can move", selected = true, layoutData = new GridLayoutData { row = 2, column = 2 } };
    canCloseCheckbox DojoCheckbox { text = "Can close", selected = true, layoutData = new GridLayoutData { row = 3, column = 2 } };
    canMinimizeCheckbox DojoCheckbox { text = "Can minimize", selected = true, layoutData = new GridLayoutData { row = 4, column = 2 } };
    canConfigCheckbox DojoCheckBox { layoutData = new GridLayoutData { row = 5, column = 2 }, text = "Can config`", selected = false };

    buttonBox Box { cssClass = "sampleConfigForm", children = [ new DojoButton { text = "Add1", onClick ::= add1 },
                    new DojoButton { text = "Add2", onClick ::= add2 }, new DojoButton { text = "Add3", onClick ::= add3 },
                    new DojoButton { text = "Remove Last", onClick ::= removeLast }
            ], layoutData = new GridLayoutData { row = 6, column = 1, horizontalSpan = 2 } };

    configPanel GridLayout { cellPadding = 4, rows = 6, columns = 2, children = [ canCloseCheckbox, canMoveCheckbox, canConfigCheckbox, captionLabel, buttonBox,
                    canMinimizeCheckbox, titleField ] };

    portal Portal { columns = 3, columnWidths = [ 300, 500, 300 ] };

    addedPortlets Portlet [ ] = new Portlet [ 0 ];

    function start()
        portal.addListener(portalListener);
    end

    function add1(e Event in)
        box Box { height = 70, padding = 7, backgroundColor = "lightyellow", columns = 1, children = [ new DojoCheckbox { text = "cool" },
                        new DojoCheckbox { text = "awesome" }, new DojoCheckbox { text = "wow" } ] };

        addPortlet(createPortlet(box), 1);
    end

    function add2(e Event in)
        map GoogleMap { center = "NYC, NC", width = 498, height = 400 };

        addPortlet(createPortlet(map), 2);
    end

    function add3(e Event in)
        box Box { height = 90, padding = 7, backgroundColor = "lightblue", children = [ new HTML { text = "Lorem ipsum dolor sit amet, consectetur adipisicing elit" }
                ] };

        addPortlet(createPortlet(box), 3);
    end
  
    private function createPortlet(child Widget in) returns (Portlet)  
        return (new Portlet { title = titleField.text, canMove = canMoveCheckbox.selected, canClose = canCloseCheckbox.selected, canMinimize = canMinimizeCheckbox.selected, canConfig = canConfigCheckbox.selected, children = [ child
                ] });      
    end

    function addPortlet(g Portlet in, column int in)
        portal.addPortlet(g, column);
        addedPortlets.appendElement(g);
    end

    function removeLast(e Event in)
        if (addedPortlets.getSize() > 0)
            portal.removePortlet(addedPortlets [ addedPortlets.getSize() ]);
            addedPortlets.removeElement(addedPortlets.getSize());
        end
    end

    function portalListener(portlet Portlet in, event int in)    	
        SysLib.writeStdOut("Portal event: " + event + " on " + portlet.parentPortal.getPortletId(portlet));
        
        if (event == PortalLibrary.PORTLET_MOVED)
    		portlet.content.children[1].width = portlet.pixelWidth - 4;
        end        
    end
end  
