/*******************************************************************************
 * Copyright Â© 2008, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/

package mortgage.client;

import org.eclipse.edt.rui.infobus.InfoBus;
import org.eclipse.edt.rui.mvc.Controller;
import org.eclipse.edt.rui.mvc.FormField;
import org.eclipse.edt.rui.mvc.FormManager;
import org.eclipse.edt.rui.mvc.MVC;
import org.eclipse.edt.rui.mvc.MVCValidStateSetter;
import org.eclipse.edt.rui.widgets.GridLayout;
import org.eclipse.edt.rui.widgets.GridLayoutData;
import org.eclipse.edt.rui.widgets.GridLayoutLib;
import org.eclipse.edt.rui.widgets.Image;
import org.eclipse.edt.rui.widgets.TextLabel;
import dojo.widgets.DojoButton;
import dojo.widgets.DojoComboBox;
import dojo.widgets.DojoCurrencyTextBox;
import dojo.widgets.DojoTextField;
import eglx.http.HttpProxy;
import eglx.lang.AnyException;
import eglx.ui.rui.Event;
import eglx.ui.rui.RUIHandler;
import eglx.ui.rui.Widget;
import libraries.MortgageLib;
import mortgage.common.MortgageCalculationResult;
import mortgage.server.MortgageCalculationService;

handler MortgageCalculatorHandler type RUIhandler{initialUI =[ui
            ], onConstructionFunction = start, cssFile = "css/Mortgage.css", title = "MortgageCalculatorHandler"}

    ui GridLayout{columns = 1, rows = 1, cellPadding = 4, children =[inputRec_ui
            ]};
    inputRec MortgageCalculationResult{term = 30, loanAmount = 180000, interestRate = 5.2};

    inputRec_ui GridLayout{layoutData = new GridLayoutData{row = 1, column = 1}, rows = 6, columns = 2, cellPadding = 4, children =[
                    errorLabel, paymentLabel, GridLayout,
                    inputRec_loanAmount_nameLabel, inputRec_loanAmount_field,
                    inputRec_interestRate_nameLabel,
                    inputRec_interestRate_field, inputRec_term_nameLabel,
                    inputRec_term_comboBox]};

    inputRec_loanAmount_nameLabel TextLabel{text = "Loan amount:", layoutData = new GridLayoutData{row = 1, column = 1}};
    inputRec_loanAmount_field DojoCurrencyTextBox{layoutData = new GridLayoutData{row = 1, column = 2}, width = "100"};
    inputRec_loanAmount_controller Controller{@MVC{model = inputRec.loanAmount, view = inputRec_loanAmount_field}, validStateSetter = handleValidStateChange_inputRec};
    inputRec_loanAmount_formField FormField{controller = inputRec_loanAmount_controller, nameLabel = inputRec_loanAmount_nameLabel};

    inputRec_interestRate_nameLabel TextLabel{text = "Interest rate:", layoutData = new GridLayoutData{row = 2, column = 1}};
    inputRec_interestRate_field DojoTextField{layoutData = new GridLayoutData{row = 2, column = 2}, width = "100"};
    inputRec_interestRate_controller Controller{@MVC{model = inputRec.interestRate, view = inputRec_interestRate_field}, validStateSetter = handleValidStateChange_inputRec};
    inputRec_interestRate_formField FormField{controller = inputRec_interestRate_controller, nameLabel = inputRec_interestRate_nameLabel};

    inputRec_term_nameLabel TextLabel{text = "Term", layoutData = new GridLayoutData{row = 3, column = 1}};
    inputRec_term_comboBox DojoComboBox{values =["5", "10", "15", "30"
            ], editable = false, layoutData = new GridLayoutData{row = 3, column = 2}, width = "100"};
    inputRec_term_controller Controller{@MVC{model = inputRec.term, view = inputRec_term_comboBox}, validStateSetter = handleValidStateChange_inputRec};
    inputRec_term_formField FormField{controller = inputRec_term_controller, nameLabel = inputRec_term_nameLabel};

    inputRec_form FormManager{entries =[inputRec_loanAmount_formField,
                    inputRec_interestRate_formField, inputRec_term_formField]};
    GridLayout GridLayout{layoutData = new GridLayoutData{row = 4, column = 1, horizontalAlignment = GridLayoutLib.ALIGN_CENTER, horizontalSpan = 2}, cellPadding = 4, rows = 2, columns = 1, children =[
                    processImage, calculationButton]};
    calculationButton DojoButton{layoutData = new GridLayoutData{row = 1, column = 1}, text = "Calculate", onClick ::= inputRec_form_Submit};
    processImage Image{layoutData = new GridLayoutData{row = 2, column = 1, horizontalAlignment = GridLayoutLib.ALIGN_CENTER}, src = "tools/spinner.gif", visible = false};
    paymentLabel TextLabel{layoutData = new GridLayoutData{row = 5, column = 1, horizontalAlignment = GridLayoutLib.ALIGN_CENTER, horizontalSpan = 2}, text = "$0.00", font = "18",
    	visible = false,
    	fontWeight = "bold",
    	fontSize = "14pt"};
    errorLabel TextLabel{layoutData = new GridLayoutData{row = 6, column = 1, horizontalSpan = 2}, color = "Red", width = "250"};

    function start()
        InfoBus.subscribe("mortgageApplication.mortgageResultSelected", displayChart);
    end

    function inputRec_form_Submit(event Event in)
        if(inputRec_form.isValid())
            inputRec_form.commit();
            showProcessImage();
            calculateMortgage();
        else
            errorLabel.text = "Input form validation failed.";
        end
    end

    function showProcessImage()
        processImage.visible = yes;
    end

    function hideProcessImage()
        processImage.visible = no;
    end

    function calculateMortgage()
        errorLabel.text = "";
        call MortgageCalculationService.amortize(inputRec) using new HttpProxy 
                returning to displayResults onException handleException; 
    end

    function displayResults(retResult MortgageCalculationResult in)
        paymentLabel.text = MortgageLib.formatMoney(retResult.monthlyPayment as string);
        paymentLabel.visible = true;
        
        inputRec_form.publish();
        hideProcessImage();
        InfoBus.publish("mortgageApplication.mortgageCalculated", retResult);
    end

    private function handleException(ae AnyException in)
        errorLabel.text = "Error calling service: " + ae.message;
    end

    function inputRec_form_Publish(event Event in)
        inputRec_form.publish();
        inputRec_form_Validate();
    end

    function inputRec_form_Validate()
        inputRec_form.isValid();
    end

    function handleValidStateChange_inputRec(view Widget in, valid boolean in)
        for(n int from inputRec_form.entries.getSize() to 1 decrement by 1)
            entry FormField = inputRec_form.entries[n];
            if(entry.controller.view == view)
                if(valid)
                // TODO: handle valid value
                else
                    msg string? = entry.controller.getErrorMessage();
                // TODO: handle invalid value
                end
            end
        end
    end
    
    function displayChart(eventName string in, dataObject any in)       
        resultRecord MortgageCalculationResult = dataObject as MortgageCalculationResult;
	
		inputRec = resultRecord;
		
		inputRec_form_Publish(new Event);
		paymentLabel.text = MortgageLib.formatMoney(resultRecord.monthlyPayment as string);		                
    end
    
end
