/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
/* The following code was generated by JFlex 1.4.3 on 4/27/12 2:18 PM */

package org.eclipse.edt.ide.core.internal.errors;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/27/12 2:18 PM from the specification file
 * <tt>error.flex</tt>
 */
public class ErrorLexer implements IErrorLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DLI = 12;
  public static final int DLI_QUOTED_ID = 14;
  public static final int SQLDELIMITEDID = 6;
  public static final int STRING = 2;
  public static final int BLOCKCOMMENT = 10;
  public static final int DLI_DBL_QUOTED_ID = 16;
  public static final int SQL = 4;
  public static final int YYINITIAL = 0;
  public static final int SQLSTRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\1\1\0\1\3\1\2\16\5\4\0\1\3\1\53"+
    "\1\46\1\47\1\4\1\65\1\60\1\101\1\51\1\52\1\16\1\11"+
    "\1\54\1\17\1\7\1\15\1\12\5\6\1\45\3\6\1\56\1\55"+
    "\1\62\1\57\1\63\1\64\1\71\1\20\1\21\1\35\1\27\1\10"+
    "\1\14\1\40\1\41\1\30\1\4\1\44\1\24\1\33\1\31\1\23"+
    "\1\34\1\43\1\36\1\22\1\26\1\25\1\37\1\42\1\13\1\32"+
    "\1\4\1\66\1\73\1\67\1\0\1\4\1\0\1\20\1\74\1\35"+
    "\1\27\1\10\1\75\1\40\1\41\1\30\1\4\1\44\1\24\1\33"+
    "\1\76\1\23\1\34\1\43\1\77\1\22\1\100\1\25\1\37\1\42"+
    "\1\13\1\32\1\4\1\50\1\61\1\70\1\72\41\5\2\0\4\4"+
    "\4\0\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4"+
    "\1\0\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4"+
    "\11\0\1\4\21\0\130\5\5\0\23\5\12\0\1\4\13\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4\1\0\46\4"+
    "\1\0\5\4\4\0\202\4\1\0\4\5\3\0\105\4\1\0\46\4"+
    "\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4"+
    "\11\0\21\5\1\0\27\5\1\0\3\5\1\0\1\5\1\0\2\5"+
    "\1\0\1\5\13\0\33\4\5\0\3\4\15\0\4\5\14\0\6\5"+
    "\13\0\32\4\5\0\13\4\16\5\7\0\12\5\4\0\2\4\1\5"+
    "\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0\4\5"+
    "\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4\1\5\36\4"+
    "\33\5\2\0\3\4\60\0\46\4\13\5\1\4\u014f\0\3\5\66\4"+
    "\2\0\1\5\1\4\20\5\2\0\1\4\4\5\3\0\12\4\2\5"+
    "\2\0\12\5\21\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5"+
    "\2\0\2\5\2\0\3\5\11\0\1\5\4\0\2\4\1\0\3\4"+
    "\2\5\2\0\12\5\4\4\15\0\3\5\1\0\6\4\4\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4"+
    "\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\13\0\4\4"+
    "\1\0\1\4\7\0\14\5\3\4\14\0\3\5\1\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0"+
    "\2\4\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\2\0\1\5\1\4\6\5\3\0\2\5\2\0\3\5\10\0\2\5"+
    "\4\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4\20\0\1\5"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0"+
    "\3\4\4\0\5\5\3\0\3\5\1\0\4\5\11\0\1\5\17\0"+
    "\11\5\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\4\0\7\5\1\0\3\5\1\0"+
    "\4\5\7\0\2\5\11\0\2\4\4\0\12\5\22\0\2\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0"+
    "\1\4\1\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\20\4\4\0\6\5\2\0\3\5\1\0"+
    "\4\5\11\0\1\5\10\0\2\4\4\0\12\5\22\0\2\5\1\0"+
    "\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0"+
    "\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0"+
    "\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0"+
    "\5\4\1\0\1\4\1\0\6\5\2\0\12\5\2\0\2\4\42\0"+
    "\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\10\4\1\0\42\4\6\0\24\5\1\0\2\5"+
    "\4\4\4\0\10\5\1\0\44\5\11\0\1\5\71\0\42\4\1\0"+
    "\5\4\1\0\2\4\1\0\7\5\3\0\4\5\6\0\12\5\6\0"+
    "\6\4\4\5\106\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4"+
    "\5\0\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4"+
    "\1\0\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4"+
    "\1\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4"+
    "\1\0\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4"+
    "\12\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4"+
    "\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0"+
    "\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4"+
    "\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4\10\0"+
    "\51\4\1\5\126\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5"+
    "\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0\132\4\6\0"+
    "\26\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\17\0\4\5\32\0"+
    "\5\5\20\0\2\4\23\0\1\4\13\0\4\5\6\0\6\5\1\0"+
    "\1\4\15\0\1\4\40\0\22\4\36\0\15\5\4\0\1\5\3\0"+
    "\6\5\27\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0"+
    "\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0"+
    "\3\4\1\0\7\4\3\0\3\4\5\0\5\4\26\0\44\4\u0e81\0"+
    "\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4"+
    "\2\0\2\5\2\0\3\4\1\0\137\4\5\0\50\4\4\0\136\4"+
    "\21\0\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4"+
    "\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4"+
    "\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4"+
    "\2\0\66\4\50\0\15\4\3\0\20\5\20\0\4\5\17\0\2\4"+
    "\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\5"+
    "\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4\1\0\32\4"+
    "\12\0\132\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4"+
    "\3\0\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\0\2\2\2\0\1\3\1\1"+
    "\1\4\1\5\1\6\1\4\1\7\1\5\2\4\1\10"+
    "\1\11\1\12\21\4\1\13\1\3\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\2\37\1\40\1\41\4\2\1\42\1\43\1\44"+
    "\1\2\2\45\1\46\1\2\1\47\2\2\1\50\1\51"+
    "\1\52\2\53\1\54\1\55\1\56\1\0\5\4\1\57"+
    "\1\0\6\4\1\1\1\60\1\61\1\62\1\63\1\64"+
    "\1\4\1\65\5\4\1\66\14\4\1\67\6\4\1\70"+
    "\6\4\1\71\1\72\1\73\23\4\2\0\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\67\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\2\1\117\1\120\1\121\1\122\1\0"+
    "\6\4\1\123\1\4\1\124\1\125\1\126\6\4\2\1"+
    "\2\0\1\127\1\4\1\130\1\131\1\100\1\132\6\4"+
    "\1\133\11\4\1\134\6\4\1\135\2\4\1\136\2\4"+
    "\1\137\6\4\1\140\2\4\1\132\3\4\1\141\1\142"+
    "\23\4\1\143\6\4\2\0\1\144\1\145\1\146\1\147"+
    "\1\150\1\2\2\4\1\151\1\4\1\152\2\4\1\153"+
    "\2\4\1\154\6\4\1\155\2\4\1\156\14\4\1\157"+
    "\4\4\1\160\1\4\1\161\3\4\1\162\1\4\1\163"+
    "\11\4\1\164\3\4\1\165\1\4\1\166\1\4\1\167"+
    "\7\4\1\170\1\171\12\4\1\172\1\4\1\173\1\174"+
    "\1\175\1\4\2\0\1\176\5\4\1\177\5\4\1\200"+
    "\1\201\3\4\1\202\3\4\1\203\1\4\1\204\11\4"+
    "\1\205\1\4\1\206\2\4\1\207\10\4\1\210\13\4"+
    "\1\211\1\4\1\212\2\4\1\213\10\4\1\214\2\0"+
    "\1\215\1\216\3\4\1\217\11\4\1\220\2\4\1\221"+
    "\2\4\1\222\4\4\1\223\3\4\1\224\2\4\1\225"+
    "\6\4\1\226\2\4\1\227\15\4\1\230\1\4\1\231"+
    "\3\4\1\0\1\232\1\233\2\4\1\234\2\4\1\235"+
    "\1\4\1\236\2\4\1\237\4\4\1\240\1\241\5\4"+
    "\1\242\3\4\1\243\4\4\1\244\1\245\1\246\1\4"+
    "\1\247\1\250\3\4\1\251\1\4\1\252\1\4\1\253"+
    "\1\254\1\255\1\4\1\0\4\4\1\256\1\257\5\4"+
    "\1\260\1\4\1\261\1\4\1\262\2\4\1\263\1\4"+
    "\1\264\1\4\1\265\1\266\1\4\1\267\1\270\1\271"+
    "\2\4\1\0\2\4\1\272\1\273\1\4\1\274\1\4"+
    "\1\275\1\4\1\276\1\4\1\277\1\300\1\301\2\4"+
    "\1\302\1\4\1\0\2\4\1\303\3\4\1\304\2\4"+
    "\1\0\1\4\1\305\1\306\1\307\1\310\1\311\1\4"+
    "\1\0\1\312\1\4\1\0\1\313\1\0\1\314";

  private static int [] zzUnpackAction() {
    int [] result = new int[655];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0252"+
    "\0\u0a0e\0\u0252\0\u0252\0\u0252\0\u0a50\0\u0252\0\u0252\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0252"+
    "\0\u0252\0\u0252\0\u0252\0\u0252\0\u0ca2\0\u0252\0\u0ce4\0\u0252"+
    "\0\u0d26\0\u0252\0\u0d68\0\u0daa\0\u0dec\0\u0252\0\u0252\0\u0252"+
    "\0\u0e2e\0\u0252\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0252\0\u0252\0\u0252\0\u0252\0\u0ffc\0\u0f36\0\u0eb2\0\u103e"+
    "\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u0252\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c"+
    "\0\u0252\0\u145e\0\u0252\0\u0252\0\u14a0\0\u02d6\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u02d6\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u02d6"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u02d6\0\u1c9e"+
    "\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae"+
    "\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be"+
    "\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u0252\0\u228c"+
    "\0\u0252\0\u0252\0\u0252\0\u0252\0\u0252\0\u0252\0\u22ce\0\u0252"+
    "\0\u2310\0\u2352\0\u0252\0\u0252\0\u0252\0\u0252\0\u0252\0\u0252"+
    "\0\u0252\0\u0252\0\u2394\0\u0252\0\u0252\0\u0252\0\u23d6\0\u23d6"+
    "\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u02d6\0\u25a4"+
    "\0\u120c\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772"+
    "\0\u27b4\0\u0252\0\u27f6\0\u141c\0\u2838\0\u0252\0\u287a\0\u02d6"+
    "\0\u02d6\0\u02d6\0\u02d6\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4"+
    "\0\u2a06\0\u02d6\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92"+
    "\0\u2bd4\0\u2c16\0\u2c58\0\u02d6\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60"+
    "\0\u2da2\0\u2de4\0\u02d6\0\u2e26\0\u2e68\0\u02d6\0\u2eaa\0\u2eec"+
    "\0\u02d6\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u02d6"+
    "\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u02d6\0\u02d6"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414"+
    "\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624"+
    "\0\u3666\0\u36a8\0\u36ea\0\u02d6\0\u372c\0\u376e\0\u37b0\0\u37f2"+
    "\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u0252\0\u0252\0\u0252\0\u393c"+
    "\0\u0252\0\u397e\0\u39c0\0\u3a02\0\u02d6\0\u3a44\0\u02d6\0\u3a86"+
    "\0\u3ac8\0\u0252\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54"+
    "\0\u3c96\0\u3cd8\0\u3d1a\0\u02d6\0\u3d5c\0\u3d9e\0\u02d6\0\u3de0"+
    "\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0"+
    "\0\u4032\0\u4074\0\u40b6\0\u02d6\0\u40f8\0\u413a\0\u417c\0\u41be"+
    "\0\u4200\0\u4242\0\u02d6\0\u4284\0\u42c6\0\u4308\0\u02d6\0\u434a"+
    "\0\u02d6\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u02d6\0\u45de\0\u4620\0\u4662\0\u02d6\0\u46a4"+
    "\0\u02d6\0\u46e6\0\u02d6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830"+
    "\0\u4872\0\u48b4\0\u02d6\0\u02d6\0\u48f6\0\u4938\0\u497a\0\u49bc"+
    "\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u02d6\0\u4b8a"+
    "\0\u02d6\0\u4bcc\0\u02d6\0\u4c0e\0\u4c50\0\u4c92\0\u0252\0\u4cd4"+
    "\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc\0\u02d6\0\u4e1e\0\u4e60\0\u4ea2"+
    "\0\u4ee4\0\u4f26\0\u02d6\0\u02d6\0\u4f68\0\u4faa\0\u4fec\0\u02d6"+
    "\0\u502e\0\u5070\0\u50b2\0\u02d6\0\u50f4\0\u02d6\0\u5136\0\u5178"+
    "\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u02d6"+
    "\0\u5388\0\u53ca\0\u540c\0\u544e\0\u02d6\0\u5490\0\u54d2\0\u5514"+
    "\0\u5556\0\u5598\0\u55da\0\u561c\0\u565e\0\u02d6\0\u56a0\0\u56e2"+
    "\0\u5724\0\u5766\0\u57a8\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2"+
    "\0\u5934\0\u02d6\0\u5976\0\u59b8\0\u59fa\0\u5a3c\0\u02d6\0\u5a7e"+
    "\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8\0\u5c0a\0\u5c4c\0\u02d6"+
    "\0\u5c8e\0\u5cd0\0\u0252\0\u0252\0\u5d12\0\u5d54\0\u5d96\0\u02d6"+
    "\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6"+
    "\0\u5fe8\0\u02d6\0\u602a\0\u606c\0\u02d6\0\u60ae\0\u60f0\0\u02d6"+
    "\0\u6132\0\u6174\0\u61b6\0\u61f8\0\u02d6\0\u623a\0\u627c\0\u62be"+
    "\0\u02d6\0\u6300\0\u6342\0\u02d6\0\u6384\0\u63c6\0\u6408\0\u644a"+
    "\0\u648c\0\u64ce\0\u02d6\0\u6510\0\u6552\0\u02d6\0\u6594\0\u65d6"+
    "\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4\0\u67e6"+
    "\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u02d6\0\u6972\0\u69b4"+
    "\0\u69f6\0\u6a38\0\u02d6\0\u02d6\0\u6a7a\0\u6abc\0\u02d6\0\u6afe"+
    "\0\u6b40\0\u02d6\0\u6b82\0\u02d6\0\u6bc4\0\u6c06\0\u02d6\0\u6c48"+
    "\0\u6c8a\0\u6ccc\0\u6d0e\0\u02d6\0\u02d6\0\u6d50\0\u6d92\0\u6dd4"+
    "\0\u6e16\0\u6e58\0\u02d6\0\u6e9a\0\u6edc\0\u6f1e\0\u02d6\0\u6f60"+
    "\0\u6fa2\0\u6fe4\0\u7026\0\u02d6\0\u02d6\0\u02d6\0\u7068\0\u02d6"+
    "\0\u02d6\0\u70aa\0\u70ec\0\u712e\0\u02d6\0\u7170\0\u02d6\0\u71b2"+
    "\0\u02d6\0\u02d6\0\u02d6\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc"+
    "\0\u733e\0\u02d6\0\u02d6\0\u7380\0\u73c2\0\u7404\0\u7446\0\u7488"+
    "\0\u02d6\0\u74ca\0\u02d6\0\u750c\0\u02d6\0\u754e\0\u7590\0\u02d6"+
    "\0\u75d2\0\u02d6\0\u7614\0\u02d6\0\u02d6\0\u7656\0\u02d6\0\u02d6"+
    "\0\u02d6\0\u7698\0\u76da\0\u771c\0\u775e\0\u77a0\0\u02d6\0\u02d6"+
    "\0\u77e2\0\u02d6\0\u7824\0\u02d6\0\u7866\0\u02d6\0\u78a8\0\u02d6"+
    "\0\u02d6\0\u02d6\0\u78ea\0\u792c\0\u02d6\0\u796e\0\u79b0\0\u79f2"+
    "\0\u7a34\0\u02d6\0\u7a76\0\u7ab8\0\u7afa\0\u02d6\0\u7b3c\0\u7b7e"+
    "\0\u7bc0\0\u7c02\0\u02d6\0\u02d6\0\u02d6\0\u02d6\0\u02d6\0\u7c44"+
    "\0\u7c86\0\u02d6\0\u7cc8\0\u7d0a\0\u02d6\0\u7d4c\0\u0252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[655];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\3\13\1\14\1\12\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\14\1\41\1\42\1\43\1\44\1\14\1\45\1\46"+
    "\1\47\2\14\1\15\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\12\1\30\1\23\1\40\1\44\1\35\1\12\1\75"+
    "\1\76\1\77\43\75\1\100\24\75\1\101\6\75\1\102"+
    "\3\103\1\104\3\102\1\104\2\102\2\104\2\102\1\105"+
    "\25\104\1\102\1\106\21\102\1\107\3\102\5\104\1\110"+
    "\1\111\1\112\1\113\43\111\1\114\33\111\1\115\1\112"+
    "\1\113\76\115\1\116\16\117\1\120\63\117\1\102\3\103"+
    "\1\104\3\102\1\104\2\102\2\104\3\102\25\104\1\102"+
    "\1\121\21\102\1\122\3\102\5\104\1\123\1\115\1\124"+
    "\1\125\76\115\1\126\1\111\1\124\1\125\43\111\1\127"+
    "\33\111\103\0\3\13\102\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\26\14\26\0\5\14\7\0\1\15\1\130"+
    "\1\131\1\0\1\15\32\0\1\15\42\0\1\130\3\0"+
    "\1\130\32\0\1\130\40\0\3\14\1\0\1\14\1\0"+
    "\1\14\1\132\1\14\3\0\2\14\1\133\1\14\1\134"+
    "\4\14\1\135\1\14\1\136\12\14\26\0\2\14\1\135"+
    "\2\14\60\0\1\137\30\0\1\15\1\130\1\131\1\0"+
    "\1\15\1\140\31\0\1\15\40\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\3\14\1\141\22\14\1\50\25\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\3\14\1\142\1\143\1\144\2\14\1\145\5\14\1\146"+
    "\7\14\26\0\3\14\1\146\1\14\16\0\1\147\1\150"+
    "\40\0\1\151\40\0\1\152\40\0\1\153\101\0\1\154"+
    "\26\0\3\14\1\0\1\14\1\0\3\14\3\0\1\14"+
    "\1\155\1\156\1\14\1\157\2\14\1\160\1\14\1\161"+
    "\14\14\26\0\1\155\1\14\1\161\2\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\3\14\1\162\4\14"+
    "\1\163\1\14\1\164\13\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\165\1\0\3\14\3\0\5\14\1\166\1\167"+
    "\1\14\1\170\2\14\1\171\1\14\1\172\3\14\1\173"+
    "\1\14\1\174\2\14\26\0\4\14\1\167\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\5\14\1\175\1\176"+
    "\2\14\1\177\2\14\1\200\1\14\1\201\7\14\26\0"+
    "\2\14\1\177\1\201\1\176\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\202\7\14\1\203\15\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\1\14\1\204"+
    "\1\14\3\0\2\14\1\205\11\14\1\206\1\14\1\207"+
    "\7\14\26\0\3\14\1\207\1\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\3\14\1\210\6\14\1\211"+
    "\3\14\1\212\2\14\1\213\4\14\26\0\3\14\1\212"+
    "\1\14\5\0\3\14\1\0\1\214\1\0\1\14\1\204"+
    "\1\14\3\0\1\215\7\14\1\216\15\14\1\50\25\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\2\14\1\217"+
    "\3\0\2\14\1\220\6\14\1\221\1\14\1\222\12\14"+
    "\26\0\1\14\1\217\1\221\2\14\5\0\3\14\1\0"+
    "\1\223\1\0\3\14\3\0\3\14\1\224\1\14\1\225"+
    "\20\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\1\14\1\204\1\14\3\0\3\14\1\226\22\14\1\50"+
    "\25\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\1\227\15\14\1\230\7\14\26\0\3\14\1\230"+
    "\1\14\5\0\3\14\1\0\1\14\1\0\1\14\1\204"+
    "\1\14\3\0\1\231\2\14\1\232\1\233\1\234\20\14"+
    "\1\50\25\0\5\14\5\0\3\14\1\0\1\235\1\0"+
    "\3\14\3\0\5\14\1\236\20\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\237\1\0\3\14\3\0\3\14\1\240"+
    "\22\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\1\241\2\14\1\242\22\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\10\14"+
    "\1\243\10\14\1\244\4\14\26\0\5\14\23\0\1\245"+
    "\4\0\1\246\131\0\1\247\100\0\1\250\102\0\1\251"+
    "\101\0\1\252\1\253\100\0\1\254\1\0\1\255\77\0"+
    "\1\256\2\0\1\257\76\0\1\260\3\0\1\261\74\0"+
    "\1\262\102\0\1\263\22\0\1\75\2\0\43\75\1\0"+
    "\24\75\1\0\6\75\1\0\1\76\146\0\1\264\24\0"+
    "\1\265\1\266\1\267\1\270\1\271\1\272\2\0\3\103"+
    "\102\0\3\104\1\0\1\104\1\0\3\104\3\0\26\104"+
    "\26\0\5\104\20\0\1\273\62\0\1\111\2\0\43\111"+
    "\1\0\33\111\1\0\1\112\146\0\1\274\33\0\1\115"+
    "\2\0\76\115\102\0\1\275\16\117\1\0\63\117\15\0"+
    "\1\276\65\0\1\124\106\0\1\130\1\0\1\131\1\0"+
    "\1\130\32\0\1\130\42\0\1\277\2\0\1\300\1\277"+
    "\4\0\1\300\25\0\1\277\40\0\3\14\1\0\1\301"+
    "\1\0\3\14\3\0\6\14\1\302\1\14\1\303\15\14"+
    "\26\0\4\14\1\302\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\15\14\1\304\10\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\2\14\1\305"+
    "\23\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\5\14\1\306\1\14\1\307\16\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\1\14\1\310\24\14\26\0\1\310\4\14\7\0\1\311"+
    "\1\0\1\311\1\0\1\311\1\0\1\311\3\0\2\311"+
    "\5\0\1\311\5\0\1\311\7\0\1\311\26\0\2\311"+
    "\10\0\3\14\1\0\1\14\1\0\3\14\3\0\16\14"+
    "\1\312\7\14\26\0\3\14\1\312\1\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\16\14\1\313\7\14"+
    "\26\0\3\14\1\313\1\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\3\14\1\314\22\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\315\14\14\26\0\2\14\1\315\2\14\5\0\3\14"+
    "\1\0\1\316\1\0\3\14\3\0\16\14\1\317\7\14"+
    "\26\0\3\14\1\317\1\14\5\0\3\14\1\0\1\320"+
    "\1\0\3\14\3\0\3\14\1\321\22\14\26\0\5\14"+
    "\1\0\1\147\1\322\1\323\77\147\16\324\1\325\63\324"+
    "\57\0\1\326\26\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\2\14\1\327\23\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\4\14\1\330\21\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\7\14\1\331\16\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\7\14\1\332\2\14"+
    "\1\333\13\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\3\14\1\334\22\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\335\6\14\1\336\5\14\26\0\2\14\1\335\2\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\6\14"+
    "\1\337\2\14\1\340\2\14\1\341\11\14\26\0\2\14"+
    "\1\340\1\14\1\337\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\6\14\1\342\7\14\1\343\7\14\26\0"+
    "\3\14\1\343\1\342\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\14\14\1\344\11\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\1\345\15\14"+
    "\1\346\7\14\26\0\3\14\1\346\1\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\11\14\1\347\14\14"+
    "\26\0\2\14\1\347\2\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\350\25\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\16\14\1\351"+
    "\7\14\26\0\3\14\1\351\1\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\3\14\1\352\22\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\353\21\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\6\14\1\354\17\14\26\0"+
    "\4\14\1\354\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\21\14\1\355\4\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\356\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\357\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\1\14\1\360\1\361\23\14\26\0\1\360\4\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\1\14"+
    "\1\362\24\14\26\0\1\362\4\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\26\14\1\50\25\0\5\14"+
    "\5\0\3\14\1\0\1\363\1\0\3\14\3\0\10\14"+
    "\1\364\15\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\7\14\1\365\16\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\4\14"+
    "\1\366\21\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\14\14\1\367\11\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\1\370"+
    "\11\14\1\371\13\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\10\14\1\372\5\14\1\373"+
    "\7\14\26\0\3\14\1\373\1\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\4\14\1\374\10\14\1\375"+
    "\10\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\6\14\1\376\17\14\26\0\4\14\1\376"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\2\14"+
    "\1\377\23\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\u0100\25\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\2\14\1\u0101"+
    "\1\u0102\2\14\1\u0103\5\14\1\u0104\11\14\26\0\4\14"+
    "\1\u0103\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\14\14\1\u0105\11\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\1\14\1\u0106\1\14\3\0\22\14\1\u0107"+
    "\3\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\6\14\1\u0108\6\14\1\u0109\10\14\26\0"+
    "\4\14\1\u0108\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\4\14\1\u010a\6\14\1\u010b\12\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\17\14"+
    "\1\u010c\6\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\2\14\1\u010d\12\14\1\u010e\10\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u010f\1\0\3\14"+
    "\3\0\3\14\1\u0110\4\14\1\u0111\15\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\2\14"+
    "\1\u0112\1\14\1\u0113\21\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\11\14\1\u0114\14\14"+
    "\26\0\2\14\1\u0114\2\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\3\14\1\u0115\22\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\16\14"+
    "\1\u0116\7\14\26\0\3\14\1\u0116\1\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\4\14\1\u0117\1\14"+
    "\1\u0118\5\14\1\u0119\1\u011a\10\14\26\0\4\14\1\u0118"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\u011b\14\14\26\0\2\14\1\u011b\2\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\6\14\1\u011c\17\14"+
    "\26\0\4\14\1\u011c\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\6\14\1\u011d\17\14\26\0\4\14\1\u011d"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\u011e\14\14\26\0\2\14\1\u011e\2\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\4\14\1\u011f\21\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\6\14\1\u0120\17\14\26\0\4\14\1\u0120\5\0"+
    "\3\14\1\0\1\u0121\1\0\3\14\3\0\10\14\1\u0122"+
    "\15\14\26\0\5\14\44\0\1\u0123\62\0\1\u0124\134\0"+
    "\1\u0125\101\0\1\u0126\101\0\1\u0127\3\0\1\u0128\75\0"+
    "\1\u0129\22\0\1\273\1\102\1\u012a\77\273\6\0\1\277"+
    "\3\0\1\277\32\0\1\277\40\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\15\14\1\u012b\10\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\u012c\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\6\14\1\u012d\17\14\26\0\4\14\1\u012d\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\1\u012e\25\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u012f\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\13\14\1\u0130\12\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\u0131\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\26\14\11\0\1\u0132\14\0\5\14\5\0\3\14"+
    "\1\0\1\u0133\1\0\3\14\3\0\5\14\1\u0134\5\14"+
    "\1\u0135\6\14\1\u0136\3\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\1\u0137\25\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\15\14\1\u0138\10\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\4\14\1\u0139\21\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\2\14\1\u013a\23\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u013b\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\13\14\1\u013c"+
    "\12\14\26\0\5\14\2\0\1\322\100\0\15\324\1\322"+
    "\1\325\63\324\4\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\3\14\1\u013d\22\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\4\14\1\u013e\21\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\7\14\1\u013f\16\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\10\14\1\u0140\15\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u0141\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\u0142\25\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\3\14\1\u0143"+
    "\22\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\17\14\1\u0144\6\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\u0145\1\0\3\14\3\0\26\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u0146\6\14\1\u0147\10\14\26\0\4\14\1\u0146"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\10\14"+
    "\1\u0148\15\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\20\14\1\u0149\5\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\4\14"+
    "\1\u014a\21\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\3\14\1\u014b\22\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\22\14"+
    "\1\u014c\3\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\11\14\1\u014d\14\14\26\0\2\14"+
    "\1\u014d\2\14\5\0\3\14\1\0\1\u014e\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\1\14\1\u014f\1\14\3\0\17\14\1\u0150\6\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\11\14\1\u0151\14\14\26\0\2\14\1\u0151\2\14"+
    "\5\0\3\14\1\0\1\u0152\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\6\14\1\u0153\17\14\26\0\4\14\1\u0153\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\16\14\1\u0154"+
    "\7\14\26\0\3\14\1\u0154\1\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\11\14\1\u0155\14\14\26\0"+
    "\2\14\1\u0155\2\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\1\u0156\25\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\u0157\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\u0158\14\14\26\0\2\14\1\u0158\2\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\2\14\1\u0159\23\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\3\14\1\u015a\22\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\u015b\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\10\14"+
    "\1\u015c\5\14\1\u015d\7\14\26\0\3\14\1\u015d\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\1\u015e"+
    "\25\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\14\14\1\u015f\11\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\u0160\1\0\3\14\3\0\26\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\5\14\1\u0161\20\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u0162\1\0\3\14\3\0\3\14\1\u0163\22\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\1\u0164\25\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\3\14\1\u0165\1\u0166\21\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u0167\17\14\26\0\4\14\1\u0167\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\5\14\1\u0168\20\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\4\14\1\u0169\21\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\1\14\1\u016a\24\14"+
    "\26\0\1\u016a\4\14\5\0\3\14\1\0\1\u016b\1\0"+
    "\3\14\3\0\26\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\2\14\1\u016c\23\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\24\14\1\u016d\1\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\14\14\1\u016e\2\14\1\u016f"+
    "\6\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\20\14\1\u0170\5\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\11\14\1\u0171"+
    "\5\14\1\u0172\6\14\26\0\2\14\1\u0171\2\14\5\0"+
    "\3\14\1\0\1\u0173\1\0\3\14\3\0\26\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\u0174\21\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\2\14\1\u0175\3\14\1\u0176"+
    "\10\14\1\u0177\6\14\26\0\4\14\1\u0176\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\2\14\1\u0178\23\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\16\14\1\u0179\7\14\26\0\3\14\1\u0179\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\1\u017a"+
    "\25\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\5\14\1\u017b\20\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\4\14\1\u017c"+
    "\21\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\3\14\1\u017d\22\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\5\14\1\u017e"+
    "\20\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\3\14\1\u017f\22\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\7\14\1\u0180"+
    "\16\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\7\14\1\u0181\16\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\21\14\1\u0182"+
    "\4\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\11\14\1\u0183\14\14\26\0\2\14\1\u0183"+
    "\2\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\u0184\21\14\26\0\5\14\25\0\1\u0185\105\0"+
    "\1\u0186\130\0\1\u0187\23\0\1\102\104\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\5\14\1\u0188\20\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\11\14\1\u0189\4\14\1\u018a\7\14\26\0\2\14\1\u0189"+
    "\1\u018a\1\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\14\14\1\u018b\11\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\u018c\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\7\14"+
    "\1\u018d\16\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\u018e\25\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\14\14\1\u018f"+
    "\11\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\20\14\1\u0190\5\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\1\u0191\25\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\6\14\1\333\17\14\26\0\4\14\1\333\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\6\14\1\u0192"+
    "\17\14\26\0\4\14\1\u0192\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\7\14\1\u0193\16\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\6\14"+
    "\1\u0194\17\14\26\0\4\14\1\u0194\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\2\14\1\u0195\23\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\u0196\21\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u0197\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\11\14\1\u0137"+
    "\14\14\26\0\2\14\1\u0137\2\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\2\14\1\u0198\23\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\13\14\1\u0199\12\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\2\14\1\u019a\23\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\10\14\1\u019b\15\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\16\14\1\u019c\7\14\26\0"+
    "\3\14\1\u019c\1\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\10\14\1\u019d\15\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\24\14\1\u019e"+
    "\1\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\11\14\1\u019f\14\14\26\0\2\14\1\u019f"+
    "\2\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\u01a0\21\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\4\14\1\u01a1\21\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\u01a2\21\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\5\14\1\u01a3\20\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\16\14\1\u01a4\7\14\26\0\3\14\1\u01a4\1\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\15\14\1\u01a5"+
    "\10\14\26\0\5\14\5\0\3\14\1\0\1\u01a6\1\0"+
    "\3\14\3\0\26\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\5\14\1\u01a7\20\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\u01a8\21\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\1\u01a9\25\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\20\14"+
    "\1\u01aa\5\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\6\14\1\u01ab\17\14\26\0\4\14"+
    "\1\u01ab\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\2\14\1\u01ac\23\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\22\14\1\u01ad\3\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u01ae\11\14\1\u01af\5\14\26\0\4\14\1\u01ae"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\13\14"+
    "\1\u01b0\12\14\26\0\5\14\5\0\3\14\1\0\1\u01b1"+
    "\1\0\3\14\3\0\26\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\6\14\1\u01b2\1\14"+
    "\1\u01b3\15\14\26\0\4\14\1\u01b2\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\4\14\1\u01b4\21\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\16\14\1\u01b5\7\14\26\0\3\14\1\u01b5\1\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\6\14\1\u01b6"+
    "\17\14\26\0\4\14\1\u01b6\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\16\14\1\u01b7\7\14\26\0\3\14"+
    "\1\u01b7\1\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\16\14\1\u01b8\7\14\26\0\3\14\1\u01b8\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\16\14"+
    "\1\u01b9\7\14\26\0\3\14\1\u01b9\1\14\5\0\3\14"+
    "\1\0\1\u01ba\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\16\14"+
    "\1\u01bb\7\14\26\0\3\14\1\u01bb\1\14\5\0\3\14"+
    "\1\0\1\u01bc\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\10\14"+
    "\1\u01bd\15\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\u01be\25\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\1\u01bf\25\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\10\14\1\u01c0\15\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\16\14\1\u01c1\7\14"+
    "\26\0\3\14\1\u01c1\1\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\6\14\1\u01c2\17\14\26\0\4\14"+
    "\1\u01c2\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\1\u01c3\25\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\6\14\1\u01c4\17\14\26\0\4\14"+
    "\1\u01c4\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\10\14\1\u01c5\15\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u01c6\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\u01c7\1\0\3\14\3\0\26\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\u01c8\1\0\3\14\3\0"+
    "\26\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\6\14\1\u01c9\17\14\26\0\4\14\1\u01c9"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\16\14"+
    "\1\u01ca\7\14\26\0\3\14\1\u01ca\1\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\1\u01cb\25\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\16\14\1\u01cc\7\14\26\0\3\14\1\u01cc\1\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\11\14\1\u01cd"+
    "\14\14\26\0\2\14\1\u01cd\2\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\4\14\1\u01ce\21\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\17\14\1\u01cf\6\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u01d0\1\0\3\14\3\0\26\14\26\0\5\14\2\0"+
    "\3\u01d1\31\0\1\u01d2\12\0\1\u01d3\32\0\3\u0186\44\0"+
    "\1\u01d4\35\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u01d5\17\14\26\0\4\14\1\u01d5\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\7\14\1\u01d6\16\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\11\14\1\u01d7\14\14\26\0\2\14\1\u01d7\2\14"+
    "\5\0\3\14\1\0\1\u01d8\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\16\14\1\u01d9\7\14\26\0\3\14\1\u01d9\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\15\14"+
    "\1\u01da\10\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\7\14\1\u01db\16\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\16\14"+
    "\1\u01dc\7\14\26\0\3\14\1\u01dc\1\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\16\14\1\u01dd\7\14"+
    "\26\0\3\14\1\u01dd\1\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\10\14\1\u01de\15\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\23\14"+
    "\1\u01df\2\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\5\14\1\u01e0\20\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\1\u01e1"+
    "\25\14\26\0\5\14\5\0\3\14\1\0\1\u01e2\1\0"+
    "\3\14\3\0\26\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\10\14\1\u01e3\15\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\15\14\1\u01e4\10\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\15\14\1\u01e5\10\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\20\14\1\u0198\5\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u01e6\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\2\14\1\u01e7\3\0\10\14"+
    "\1\u0140\15\14\26\0\1\14\1\u01e7\3\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\4\14\1\u01e8\21\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\4\14\1\u01e9\21\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\22\14\1\u01ea\3\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u01eb\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\11\14\1\u01ec\14\14\26\0\2\14"+
    "\1\u01ec\2\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\10\14\1\u01ed\15\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\16\14\1\u01ee\7\14"+
    "\26\0\3\14\1\u01ee\1\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\14\14\1\u01ef\7\14\1\u01f0\1\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u01f1\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\u01f2\3\0\1\u01f3\25\14\26\0\1\14"+
    "\1\u01f2\3\14\5\0\3\14\1\0\1\u01f4\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\u01f5\25\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\1\u01f6\25\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\13\14\1\u01f7\12\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\1\u01f8\25\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u01f9\17\14\26\0\4\14\1\u01f9\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\1\u01fa\25\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u01fb\17\14\26\0\4\14\1\u01fb\5\0\3\14"+
    "\1\0\1\14\1\0\2\14\1\u01fc\3\0\26\14\26\0"+
    "\1\14\1\u01fc\3\14\5\0\3\14\1\0\1\u01fd\1\0"+
    "\3\14\3\0\26\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\6\14\1\u01fe\17\14\26\0"+
    "\4\14\1\u01fe\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\13\14\1\u01ff\12\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\2\14\1\u0200\23\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\16\14\1\333\7\14\26\0\3\14\1\333\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\u0201\14\14\26\0\2\14\1\u0201\2\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\20\14\1\u0202\5\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\16\14\1\u0203\7\14\26\0\3\14\1\u0203\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\3\14"+
    "\1\u0204\22\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\1\u0205\25\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\6\14\1\u0206"+
    "\17\14\26\0\4\14\1\u0206\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\16\14\1\u0207\7\14\26\0\3\14"+
    "\1\u0207\1\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\11\14\1\u0208\14\14\26\0\2\14\1\u0208\2\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\16\14"+
    "\1\u0209\7\14\26\0\3\14\1\u0209\1\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\11\14\1\u020a\14\14"+
    "\26\0\2\14\1\u020a\2\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\10\14\1\u020b\15\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\u020c\14\14\26\0\2\14\1\u020c\2\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\15\14\1\u020d\10\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\7\14\1\u020e\16\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\10\14\1\u020f\15\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u0210\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\25\14\1\u0211\26\0\5\14\2\0"+
    "\3\u01d1\44\0\1\u01d3\54\0\1\u0212\62\0\3\14\1\0"+
    "\1\u0213\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\2\14\1\u0214"+
    "\23\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\1\u0215\25\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\1\u0216\25\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\21\14\1\u0217\4\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\1\u0218\25\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\3\14"+
    "\1\u0219\22\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\7\14\1\u021a\16\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\3\14"+
    "\1\u021b\22\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\4\14\1\u021c\21\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\6\14"+
    "\1\u021d\17\14\26\0\4\14\1\u021d\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\11\14\1\333\14\14\26\0"+
    "\2\14\1\333\2\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\6\14\1\u021e\17\14\26\0\4\14\1\u021e"+
    "\5\0\3\14\1\0\1\u021f\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\16\14\1\u0220\7\14\26\0\3\14\1\u0220\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\4\14"+
    "\1\143\21\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\4\14\1\u0221\21\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\10\14"+
    "\1\u0222\15\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\14\14\1\u0223\11\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\6\14"+
    "\1\u0224\17\14\26\0\4\14\1\u0224\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\12\14\1\u0225\13\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\15\14\1\u0226\10\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u0227\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\u0228\1\0\3\14\3\0\26\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\15\14\1\u0229\10\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\6\14\1\u022a\17\14\26\0"+
    "\4\14\1\u022a\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\4\14\1\u022b\21\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\u022c\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\1\14"+
    "\1\u022d\24\14\26\0\1\u022d\4\14\5\0\3\14\1\0"+
    "\1\u022e\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\12\14\1\u022f"+
    "\13\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\1\u0230\25\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\11\14\1\u0231\14\14"+
    "\26\0\2\14\1\u0231\2\14\5\0\3\14\1\0\1\u0232"+
    "\1\0\3\14\3\0\26\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\3\14\1\u0233\22\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\20\14\1\u0234\5\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\u0235\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\u0236\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\5\14\1\u0237\20\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\13\14\1\u0238\12\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u0239\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\5\14\1\u023a\20\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\5\14"+
    "\1\u023b\20\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\2\14\1\u023c\23\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\6\14"+
    "\1\u023d\17\14\26\0\4\14\1\u023d\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\17\14\1\u023e\6\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\2\14\1\u023f\5\14\1\u0240\15\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\u0241\1\0\3\14\3\0\26\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u0242\17\14\26\0\4\14\1\u0242\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\16\14\1\u0243\7\14"+
    "\26\0\3\14\1\u0243\1\14\5\0\3\14\1\0\1\14"+
    "\1\0\1\u0244\2\14\3\0\26\14\26\0\5\14\32\0"+
    "\1\u0245\44\0\1\u0245\7\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\4\14\1\u0246\21\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\6\14\1\u0247"+
    "\17\14\26\0\4\14\1\u0247\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\6\14\1\u0248\17\14\26\0\4\14"+
    "\1\u0248\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\5\14\1\u0249\20\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\11\14\1\u024a\14\14\26\0"+
    "\2\14\1\u024a\2\14\5\0\3\14\1\0\1\u024b\1\0"+
    "\3\14\3\0\26\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\10\14\1\u024c\15\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\3\14\1\u024d\22\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\1\u024e\25\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\2\14"+
    "\1\u024f\23\14\26\0\5\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\6\14\1\u0250\17\14\26\0\4\14"+
    "\1\u0250\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\1\14\1\u0251\24\14\26\0\1\u0251\4\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\12\14\1\u0252\13\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\16\14\1\u0253\7\14\26\0\3\14\1\u0253\1\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\6\14"+
    "\1\u0254\17\14\26\0\4\14\1\u0254\5\0\3\14\1\0"+
    "\1\u0255\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\11\14\1\u0256"+
    "\14\14\26\0\2\14\1\u0256\2\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\4\14\1\u0257\21\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\13\14\1\u0258\12\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\15\14\1\u0259\10\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\6\14\1\u025a\17\14\26\0\4\14\1\u025a\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\11\14\1\u025b\14\14"+
    "\26\0\2\14\1\u025b\2\14\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\16\14\1\u025c\7\14\26\0\3\14"+
    "\1\u025c\1\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\2\14\1\u025d\23\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\15\14\1\u025e\10\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\u025f\1\0\3\14"+
    "\3\0\26\14\26\0\5\14\5\0\3\14\1\0\1\u0260"+
    "\1\0\3\14\3\0\26\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\u0261\1\0\3\14\3\0\26\14\26\0\5\14"+
    "\5\0\3\14\1\0\1\14\1\0\3\14\3\0\11\14"+
    "\1\u0262\14\14\26\0\2\14\1\u0262\2\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\15\14\1\u0263\10\14"+
    "\26\0\5\14\30\0\1\u0264\56\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\6\14\1\u0265\17\14\26\0\4\14"+
    "\1\u0265\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\10\14\1\u0266\15\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u0267\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\14\14\1\u0268"+
    "\11\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\3\14\1\u0269\22\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\22\14\1\u026a"+
    "\3\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\1\14\1\u026b\24\14\26\0\1\u026b\4\14"+
    "\5\0\3\14\1\0\1\u026c\1\0\3\14\3\0\26\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\10\14\1\u026d\15\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\2\14\1\u026e\23\14"+
    "\26\0\5\14\5\0\3\14\1\0\1\14\1\0\3\14"+
    "\3\0\10\14\1\u026f\15\14\26\0\5\14\5\0\3\14"+
    "\1\0\1\14\1\0\3\14\3\0\6\14\1\u0270\17\14"+
    "\26\0\4\14\1\u0270\5\0\3\14\1\0\1\u0271\1\0"+
    "\3\14\3\0\26\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\u0272\1\0\3\14\3\0\26\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\6\14\1\u0273"+
    "\17\14\26\0\4\14\1\u0273\5\0\3\14\1\0\1\14"+
    "\1\0\3\14\3\0\6\14\1\u0274\17\14\26\0\4\14"+
    "\1\u0274\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\20\14\1\u0275\5\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\3\14\1\u0276\22\14\26\0"+
    "\5\14\31\0\1\u0277\55\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\12\14\1\u0278\13\14\26\0\5\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\3\14\1\u0279"+
    "\22\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\11\14\1\u027a\14\14\26\0\2\14\1\u027a"+
    "\2\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\4\14\1\u027b\21\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\3\14\1\u027c\22\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\3\14\1\u027d\22\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\2\14\1\u027e\23\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\3\14\1\u027f\22\14\26\0\5\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\13\14\1\u0280\12\14\26\0"+
    "\5\14\27\0\1\u0281\51\0\1\u0281\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\14\14\1\u0282\11\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\11\14\1\u0283\14\14\26\0\2\14\1\u0283\2\14\5\0"+
    "\3\14\1\0\1\u0284\1\0\3\14\3\0\26\14\26\0"+
    "\5\14\5\0\3\14\1\0\1\14\1\0\3\14\3\0"+
    "\11\14\1\u0285\14\14\26\0\2\14\1\u0285\2\14\5\0"+
    "\3\14\1\0\1\14\1\0\3\14\3\0\11\14\1\u0286"+
    "\14\14\26\0\2\14\1\u0286\2\14\5\0\3\14\1\0"+
    "\1\14\1\0\3\14\3\0\16\14\1\u0287\7\14\26\0"+
    "\3\14\1\u0287\1\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\14\14\1\u0288\11\14\26\0\5\14\31\0"+
    "\1\u0289\55\0\3\14\1\0\1\u028a\1\0\3\14\3\0"+
    "\26\14\26\0\5\14\5\0\3\14\1\0\1\14\1\0"+
    "\3\14\3\0\1\u028b\25\14\26\0\5\14\24\0\1\u028c"+
    "\62\0\3\14\1\0\1\14\1\0\3\14\3\0\6\14"+
    "\1\u028d\17\14\26\0\4\14\1\u028d\32\0\1\u028e\44\0"+
    "\1\u028e\4\0\3\u028e\44\0\1\u028f\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32142];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\2\0\2\1\2\0\1\11\35\1"+
    "\1\11\1\1\3\11\1\1\2\11\10\1\5\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\3\11\1\1"+
    "\1\11\6\1\4\11\4\1\1\0\5\1\1\11\1\0"+
    "\10\1\1\11\1\1\2\11\70\1\2\0\1\11\1\1"+
    "\6\11\1\1\1\11\2\1\10\11\1\1\3\11\1\1"+
    "\1\0\21\1\1\11\1\1\2\0\1\11\114\1\2\0"+
    "\3\11\1\1\1\11\10\1\1\11\122\1\2\0\1\11"+
    "\111\1\2\0\2\11\75\1\1\0\62\1\1\0\36\1"+
    "\1\0\22\1\1\0\11\1\1\0\7\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[655];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	protected StringBuffer string = new StringBuffer();
	protected int curOffset = 0;
	protected boolean isSQLCondition;
        
	public TerminalNode next() {
		try {
			int type = yylex();
			TerminalNode result;
			if(type == ErrorNodeTypes.STRING || type == ErrorNodeTypes.SQLSTMTLIT || type == ErrorNodeTypes.INLINE_DLI) {
				result = new TerminalNode(type, string.toString(), yyline, yycolumn, curOffset); 
				curOffset += string.length();
			}
			else {
				result =  new TerminalNode(type, yytext(), yyline, yycolumn, curOffset);
				curOffset += yylength();
			}
			return result;
		} catch (IOException e) {
			// Should never happen
			e.printStackTrace();
			return null;
		}
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ErrorLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ErrorLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1814) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 93: 
          { return ErrorNodeTypes.USE;
          }
        case 205: break;
        case 38: 
          { yybegin(SQL); string.append('\"');
          }
        case 206: break;
        case 45: 
          { yybegin(DLI); string.append('\"');
          }
        case 207: break;
        case 52: 
          { return ErrorNodeTypes.MINUSEQ;
          }
        case 208: break;
        case 8: 
          { return ErrorNodeTypes.DIV;
          }
        case 209: break;
        case 164: 
          { return ErrorNodeTypes.PASSING;
          }
        case 210: break;
        case 193: 
          { return ErrorNodeTypes.INTERFACE;
          }
        case 211: break;
        case 79: 
          { string.append("\"\"");
          }
        case 212: break;
        case 187: 
          { return ErrorNodeTypes.FORMGROUP;
          }
        case 213: break;
        case 103: 
          { return ErrorNodeTypes.RIGHTSHIFTLOGICAL;
          }
        case 214: break;
        case 5: 
          { return ErrorNodeTypes.INTEGER;
          }
        case 215: break;
        case 178: 
          { return ErrorNodeTypes.DELEGATE;
          }
        case 216: break;
        case 43: 
          { yybegin(DLI); string.append(yytext());
          }
        case 217: break;
        case 167: 
          { return ErrorNodeTypes.PROGRAM;
          }
        case 218: break;
        case 39: 
          { yybegin(SQL); string.append('\'');
          }
        case 219: break;
        case 44: 
          { yybegin(DLI); string.append('\'');
          }
        case 220: break;
        case 81: 
          { yybegin(YYINITIAL); string.append(yytext()); return ErrorNodeTypes.WS;
          }
        case 221: break;
        case 107: 
          { return ErrorNodeTypes.XOREQ;
          }
        case 222: break;
        case 30: 
          { return ErrorNodeTypes.NEGATE;
          }
        case 223: break;
        case 160: 
          { return ErrorNodeTypes.ONEVENT;
          }
        case 224: break;
        case 177: 
          { return ErrorNodeTypes.TRANSFER;
          }
        case 225: break;
        case 60: 
          { return ErrorNodeTypes.NE;
          }
        case 226: break;
        case 14: 
          { return ErrorNodeTypes.RPAREN;
          }
        case 227: break;
        case 196: 
          { return ErrorNodeTypes.IMPLEMENTS;
          }
        case 228: break;
        case 143: 
          { return ErrorNodeTypes.ESCAPE;
          }
        case 229: break;
        case 25: 
          { return ErrorNodeTypes.MODULO;
          }
        case 230: break;
        case 66: 
          { return ErrorNodeTypes.LE;
          }
        case 231: break;
        case 6: 
          { return ErrorNodeTypes.DOT;
          }
        case 232: break;
        case 144: 
          { return ErrorNodeTypes.BYNAME;
          }
        case 233: break;
        case 7: 
          { return ErrorNodeTypes.PLUS;
          }
        case 234: break;
        case 165: 
          { return ErrorNodeTypes.PACKAGE;
          }
        case 235: break;
        case 97: 
          { return ErrorNodeTypes.NEW;
          }
        case 236: break;
        case 83: 
          { return ErrorNodeTypes.END;
          }
        case 237: break;
        case 156: 
          { return ErrorNodeTypes.FOREACH;
          }
        case 238: break;
        case 111: 
          { return ErrorNodeTypes.SHOW;
          }
        case 239: break;
        case 122: 
          { return ErrorNodeTypes.GOTO;
          }
        case 240: break;
        case 141: 
          { yybegin(SQL); isSQLCondition = false; string.setLength(0); string.append(yytext());
          }
        case 241: break;
        case 70: 
          { return ErrorNodeTypes.NULLCONCAT;
          }
        case 242: break;
        case 158: 
          { return ErrorNodeTypes.FREESQL;
          }
        case 243: break;
        case 179: 
          { return ErrorNodeTypes.DATAITEM;
          }
        case 244: break;
        case 34: 
          { yybegin(SQLDELIMITEDID); string.append('\"');
          }
        case 245: break;
        case 132: 
          { return ErrorNodeTypes.STACK;
          }
        case 246: break;
        case 110: 
          { return ErrorNodeTypes.BIND;
          }
        case 247: break;
        case 19: 
          { return ErrorNodeTypes.ASSIGN;
          }
        case 248: break;
        case 199: 
          { return ErrorNodeTypes.ONEXCEPTION;
          }
        case 249: break;
        case 77: 
          { string.append("\\r");
          }
        case 250: break;
        case 15: 
          { return ErrorNodeTypes.BANG;
          }
        case 251: break;
        case 153: 
          { return ErrorNodeTypes.RECORD;
          }
        case 252: break;
        case 101: 
          { return ErrorNodeTypes.LEFTSHIFTEQ;
          }
        case 253: break;
        case 170: 
          { return ErrorNodeTypes.RETURNS;
          }
        case 254: break;
        case 56: 
          { return ErrorNodeTypes.TO;
          }
        case 255: break;
        case 50: 
          { return ErrorNodeTypes.TIMESTIMES;
          }
        case 256: break;
        case 115: 
          { return ErrorNodeTypes.THIS;
          }
        case 257: break;
        case 119: 
          { return ErrorNodeTypes.MOVE;
          }
        case 258: break;
        case 140: 
          { return ErrorNodeTypes.WHILE;
          }
        case 259: break;
        case 166: 
          { return ErrorNodeTypes.PREPARE;
          }
        case 260: break;
        case 64: 
          { return ErrorNodeTypes.AND;
          }
        case 261: break;
        case 13: 
          { return ErrorNodeTypes.LPAREN;
          }
        case 262: break;
        case 98: 
          { return ErrorNodeTypes.NOT;
          }
        case 263: break;
        case 27: 
          { return ErrorNodeTypes.RBRACKET;
          }
        case 264: break;
        case 161: 
          { return ErrorNodeTypes.LIBRARY;
          }
        case 265: break;
        case 183: 
          { return ErrorNodeTypes.CONTINUE;
          }
        case 266: break;
        case 182: 
          { return ErrorNodeTypes.PREVIOUS;
          }
        case 267: break;
        case 127: 
          { return ErrorNodeTypes.EMBED;
          }
        case 268: break;
        case 69: 
          { return ErrorNodeTypes.RIGHTSHIFTARITHMETIC;
          }
        case 269: break;
        case 176: 
          { return ErrorNodeTypes.USINGPCB;
          }
        case 270: break;
        case 51: 
          { return ErrorNodeTypes.TIMESEQ;
          }
        case 271: break;
        case 26: 
          { return ErrorNodeTypes.LBRACKET;
          }
        case 272: break;
        case 21: 
          { return ErrorNodeTypes.BITOR;
          }
        case 273: break;
        case 90: 
          { return ErrorNodeTypes.PRIMITIVE;
          }
        case 274: break;
        case 76: 
          { string.append("\\n");
          }
        case 275: break;
        case 89: 
          { return ErrorNodeTypes.ADD;
          }
        case 276: break;
        case 116: 
          { return ErrorNodeTypes.INTO;
          }
        case 277: break;
        case 194: 
          { return ErrorNodeTypes.RETURNING;
          }
        case 278: break;
        case 1: 
          { return ErrorNodeTypes.WS;
          }
        case 279: break;
        case 106: 
          { return ErrorNodeTypes.ELSE;
          }
        case 280: break;
        case 87: 
          { return ErrorNodeTypes.TIMESTIMESEQ;
          }
        case 281: break;
        case 137: 
          { return ErrorNodeTypes.PRINT;
          }
        case 282: break;
        case 200: 
          { return ErrorNodeTypes.TRANSACTION;
          }
        case 283: break;
        case 147: 
          { return ErrorNodeTypes.OPENUI;
          }
        case 284: break;
        case 80: 
          { string.append("\'\'");
          }
        case 285: break;
        case 31: 
          { yybegin(YYINITIAL); string.append(yytext()); return ErrorNodeTypes.ERRORSTRING;
          }
        case 286: break;
        case 130: 
          { return ErrorNodeTypes.CHARPRIMITIVE;
          }
        case 287: break;
        case 188: 
          { return ErrorNodeTypes.SINGLEROW;
          }
        case 288: break;
        case 138: 
          { return ErrorNodeTypes.CONST;
          }
        case 289: break;
        case 145: 
          { return ErrorNodeTypes.STATIC;
          }
        case 290: break;
        case 23: 
          { return ErrorNodeTypes.GT;
          }
        case 291: break;
        case 142: 
          { yybegin(DLI); string.setLength(0); string.append(yytext());
          }
        case 292: break;
        case 92: 
          { return ErrorNodeTypes.OUT;
          }
        case 293: break;
        case 135: 
          { return ErrorNodeTypes.THROW;
          }
        case 294: break;
        case 136: 
          { return ErrorNodeTypes.INOUT;
          }
        case 295: break;
        case 47: 
          { return ErrorNodeTypes.PLUSEQ;
          }
        case 296: break;
        case 3: 
          { return ErrorNodeTypes.error;
          }
        case 297: break;
        case 134: 
          { return ErrorNodeTypes.USING;
          }
        case 298: break;
        case 91: 
          { return ErrorNodeTypes.SET;
          }
        case 299: break;
        case 49: 
          { return ErrorNodeTypes.DIVEQ;
          }
        case 300: break;
        case 114: 
          { return ErrorNodeTypes.TYPE;
          }
        case 301: break;
        case 9: 
          { return ErrorNodeTypes.TIMES;
          }
        case 302: break;
        case 159: 
          { return ErrorNodeTypes.SERVICE;
          }
        case 303: break;
        case 29: 
          { return ErrorNodeTypes.AT;
          }
        case 304: break;
        case 73: 
          { string.append("\\\\");
          }
        case 305: break;
        case 18: 
          { return ErrorNodeTypes.COLON;
          }
        case 306: break;
        case 58: 
          { return ErrorNodeTypes.IS;
          }
        case 307: break;
        case 204: 
          { yybegin(SQL); isSQLCondition = true; string.setLength(0); string.append(yytext());
          }
        case 308: break;
        case 186: 
          { return ErrorNodeTypes.FORUPDATE;
          }
        case 309: break;
        case 33: 
          { string.append("\\");
          }
        case 310: break;
        case 202: 
          { return ErrorNodeTypes.EXTERNALTYPE;
          }
        case 311: break;
        case 55: 
          { return ErrorNodeTypes.OR;
          }
        case 312: break;
        case 175: 
          { return ErrorNodeTypes.ABSOLUTE;
          }
        case 313: break;
        case 2: 
          { string.append(yytext());
          }
        case 314: break;
        case 67: 
          { return ErrorNodeTypes.LEFTSHIFT;
          }
        case 315: break;
        case 121: 
          { return ErrorNodeTypes.CALL;
          }
        case 316: break;
        case 57: 
          { return ErrorNodeTypes.IF;
          }
        case 317: break;
        case 120: 
          { return ErrorNodeTypes.CASE;
          }
        case 318: break;
        case 151: 
          { return ErrorNodeTypes.IMPORT;
          }
        case 319: break;
        case 117: 
          { return ErrorNodeTypes.NEXT;
          }
        case 320: break;
        case 155: 
          { return ErrorNodeTypes.EXTENDS;
          }
        case 321: break;
        case 53: 
          { return ErrorNodeTypes.AS;
          }
        case 322: break;
        case 168: 
          { return ErrorNodeTypes.PRIVATE;
          }
        case 323: break;
        case 131: 
          { return ErrorNodeTypes.SUPER;
          }
        case 324: break;
        case 54: 
          { return ErrorNodeTypes.BY;
          }
        case 325: break;
        case 46: 
          { return ErrorNodeTypes.DECIMALLIT;
          }
        case 326: break;
        case 40: 
          { yybegin(DLI_DBL_QUOTED_ID); string.append('\"');
          }
        case 327: break;
        case 148: 
          { return ErrorNodeTypes.UPDATE;
          }
        case 328: break;
        case 108: 
          { return ErrorNodeTypes.FORM;
          }
        case 329: break;
        case 85: 
          { return ErrorNodeTypes.XOR;
          }
        case 330: break;
        case 75: 
          { string.append("\\f");
          }
        case 331: break;
        case 126: 
          { return ErrorNodeTypes.RIGHTSHIFTLOGICALEQ;
          }
        case 332: break;
        case 71: 
          { return ErrorNodeTypes.MODULOEQ;
          }
        case 333: break;
        case 28: 
          { return ErrorNodeTypes.RCURLY;
          }
        case 334: break;
        case 88: 
          { return ErrorNodeTypes.ALL;
          }
        case 335: break;
        case 17: 
          { return ErrorNodeTypes.SEMI;
          }
        case 336: break;
        case 95: 
          { return ErrorNodeTypes.TRY;
          }
        case 337: break;
        case 78: 
          { string.append("\\t");
          }
        case 338: break;
        case 84: 
          { return ErrorNodeTypes.BYTESLIT;
          }
        case 339: break;
        case 190: 
          { return ErrorNodeTypes.USINGKEYS;
          }
        case 340: break;
        case 102: 
          { return ErrorNodeTypes.RIGHTSHIFTARITHMETICEQ;
          }
        case 341: break;
        case 68: 
          { return ErrorNodeTypes.GE;
          }
        case 342: break;
        case 185: 
          { return ErrorNodeTypes.RELATIVE;
          }
        case 343: break;
        case 48: 
          { yybegin(BLOCKCOMMENT); string.setLength(0); string.append(yytext());
          }
        case 344: break;
        case 41: 
          { yybegin(YYINITIAL); string.append(yytext()); return ErrorNodeTypes.INLINE_DLI;
          }
        case 345: break;
        case 139: 
          { return ErrorNodeTypes.CLOSE;
          }
        case 346: break;
        case 197: 
          { return ErrorNodeTypes.ENUMERATION;
          }
        case 347: break;
        case 96: 
          { return ErrorNodeTypes.ISA;
          }
        case 348: break;
        case 62: 
          { return ErrorNodeTypes.EQ;
          }
        case 349: break;
        case 86: 
          { return ErrorNodeTypes.FOR;
          }
        case 350: break;
        case 4: 
          { return ErrorNodeTypes.ID;
          }
        case 351: break;
        case 100: 
          { return ErrorNodeTypes.CONCATEQ;
          }
        case 352: break;
        case 189: 
          { return ErrorNodeTypes.OTHERWISE;
          }
        case 353: break;
        case 65: 
          { return ErrorNodeTypes.BITOREQ;
          }
        case 354: break;
        case 169: 
          { return ErrorNodeTypes.CURRENT;
          }
        case 355: break;
        case 129: 
          { return ErrorNodeTypes.FIRST;
          }
        case 356: break;
        case 157: 
          { return ErrorNodeTypes.FORWARD;
          }
        case 357: break;
        case 74: 
          { string.append("\\b");
          }
        case 358: break;
        case 149: 
          { return ErrorNodeTypes.DELETE;
          }
        case 359: break;
        case 10: 
          { return ErrorNodeTypes.MINUS;
          }
        case 360: break;
        case 201: 
          { return ErrorNodeTypes.CONSTRUCTOR;
          }
        case 361: break;
        case 63: 
          { return ErrorNodeTypes.BITANDEQ;
          }
        case 362: break;
        case 42: 
          { yybegin(DLI_QUOTED_ID); string.append('\'');
          }
        case 363: break;
        case 171: 
          { return ErrorNodeTypes.REPLACE;
          }
        case 364: break;
        case 109: 
          { return ErrorNodeTypes.FROM;
          }
        case 365: break;
        case 118: 
          { return ErrorNodeTypes.NULL;
          }
        case 366: break;
        case 24: 
          { return ErrorNodeTypes.QUESTION;
          }
        case 367: break;
        case 198: 
          { return ErrorNodeTypes.SQLNULLABLE;
          }
        case 368: break;
        case 61: 
          { return ErrorNodeTypes.CONCAT;
          }
        case 369: break;
        case 16: 
          { return ErrorNodeTypes.COMMA;
          }
        case 370: break;
        case 128: 
          { return ErrorNodeTypes.FIELD;
          }
        case 371: break;
        case 203: 
          { return ErrorNodeTypes.WITHV60COMPAT;
          }
        case 372: break;
        case 150: 
          { return ErrorNodeTypes.INSERT;
          }
        case 373: break;
        case 113: 
          { return ErrorNodeTypes.LAST;
          }
        case 374: break;
        case 12: 
          { return ErrorNodeTypes.LCURLY;
          }
        case 375: break;
        case 112: 
          { return ErrorNodeTypes.OPEN;
          }
        case 376: break;
        case 123: 
          { return ErrorNodeTypes.HOLD;
          }
        case 377: break;
        case 32: 
          { yybegin(YYINITIAL); string.append('\"'); return ErrorNodeTypes.STRING;
          }
        case 378: break;
        case 184: 
          { return ErrorNodeTypes.CONVERSE;
          }
        case 379: break;
        case 125: 
          { return ErrorNodeTypes.WHEN;
          }
        case 380: break;
        case 36: 
          { yybegin(SQLSTRING); string.append('\'');
          }
        case 381: break;
        case 154: 
          { return ErrorNodeTypes.EXECUTE;
          }
        case 382: break;
        case 82: 
          { return ErrorNodeTypes.FLOATLIT;
          }
        case 383: break;
        case 173: 
          { return ErrorNodeTypes.HANDLER;
          }
        case 384: break;
        case 163: 
          { return ErrorNodeTypes.DISPLAY;
          }
        case 385: break;
        case 105: 
          { return ErrorNodeTypes.EXIT;
          }
        case 386: break;
        case 99: 
          { return ErrorNodeTypes.GET;
          }
        case 387: break;
        case 174: 
          { return ErrorNodeTypes.FUNCTION;
          }
        case 388: break;
        case 20: 
          { return ErrorNodeTypes.BITAND;
          }
        case 389: break;
        case 133: 
          { return ErrorNodeTypes.LABEL;
          }
        case 390: break;
        case 172: 
          { return ErrorNodeTypes.RUNUNIT;
          }
        case 391: break;
        case 104: 
          { return ErrorNodeTypes.NULLCONCATEQ;
          }
        case 392: break;
        case 162: 
          { return ErrorNodeTypes.NUMERICPRIMITIVE;
          }
        case 393: break;
        case 22: 
          { return ErrorNodeTypes.LT;
          }
        case 394: break;
        case 146: 
          { return ErrorNodeTypes.SCROLL;
          }
        case 395: break;
        case 11: 
          { yybegin(STRING); string.setLength(0); string.append('\"');
          }
        case 396: break;
        case 124: 
          { return ErrorNodeTypes.WITH;
          }
        case 397: break;
        case 59: 
          { return ErrorNodeTypes.IN;
          }
        case 398: break;
        case 94: 
          { return ErrorNodeTypes.URL;
          }
        case 399: break;
        case 152: 
          { return ErrorNodeTypes.RETURN;
          }
        case 400: break;
        case 192: 
          { return ErrorNodeTypes.DATATABLE;
          }
        case 401: break;
        case 195: 
          { return ErrorNodeTypes.BYPOSITION;
          }
        case 402: break;
        case 72: 
          { string.append("\\\"");
          }
        case 403: break;
        case 37: 
          { yybegin(SQL); string.append(yytext());
          }
        case 404: break;
        case 180: 
          { return ErrorNodeTypes.INPARENT;
          }
        case 405: break;
        case 35: 
          { yybegin(YYINITIAL); string.append(yytext()); return isSQLCondition ? ErrorNodeTypes.SQLCONDITION : ErrorNodeTypes.SQLSTMTLIT;
          }
        case 406: break;
        case 181: 
          { return ErrorNodeTypes.NOCURSOR;
          }
        case 407: break;
        case 191: 
          { return ErrorNodeTypes.DECREMENT;
          }
        case 408: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	if(yystate() == SQL || yystate() == SQLDELIMITEDID || yystate() == SQLSTRING) {
		yybegin(YYINITIAL);
		return ErrorNodeTypes.ERRORSQLSTMTLIT;
	}
	else if(yystate() == STRING) {
		yybegin(YYINITIAL);
		return ErrorNodeTypes.ERRORSTRING;
	}
	else if(yystate() == BLOCKCOMMENT) {
		yybegin(YYINITIAL);
		return ErrorNodeTypes.ERRORBLOCKCOMMENT;
	}
	else if(yystate() == DLI || yystate() == DLI_QUOTED_ID || yystate() == DLI_DBL_QUOTED_ID) {
		yybegin(YYINITIAL);
		return ErrorNodeTypes.ERROR_INLINE_DLI;
	}
	else {
		return ErrorNodeTypes.EOF;
	}
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
