###############################################################################
# Copyright ï¿½2012 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
# IBM Corporation - initial API and implementation
#
###############################################################################

mdd_recordPackageDefine=\
package ${javaJsPackageName};\n

mdd_statusRecord=\
\n\
Record ${entityName}WithStatus\n\
\tstatus Status;\n\
\tdata ${entityRecordName}?;\n\
end\n\
\n\
Record ${entityName}ListWithStatus\n\
\tstatus Status;\t\n\
\tdata ${entityRecordName}?[]?;\n\
end\n\

mdd_ControlStructures=\
/***\n\
 * Important Development Note (Please read the following comments)\n\
 * All code contained in this file will be overwritten each time the Data Access Application Wizard is executed.\n\
 * If the contents of this file must be preserved, move all source code into the custom definitions area at the end of the file.\n\
 * NOTE: preservation of this file's content may result in the generation of duplicate resources.\n\
 * This will result in syntax and compilation errors.\n\
 * You will have to manually resolve all discrepancies by deleting duplicates.\n\
 ***/\n\
\n\
/***\n\
 * Important note\n\
 *\n\
 * Do not delete or modify BEGIN and END tags\n\
 * These tags allow preservation of hand modified code\n\
 * Modification of these tags will result in code loss\n\
 *\n\
 ***/\n\
 \n\
/* This record defines a control structure for a GetList function\n\
 * The function returns a list of records to be paged through \n\
 * \n\
 * IMPORTANT: You must set values for fromTablesWhere and blockingFactor \n\
 *\t\tThe selectClause value may be optionally set by the user \n\
 */\n\
//BEGIN ListSpecification\n\
// @generated - Delete generated tag to preserve modified code\t  \n\
Record ListSpecification\n\
\t// indicates that dynamic SQL has been prepared using the value in fromTablesWhere \n\
\t// IMPORTANT: Set false when fromTablesWhere is modified \n\
\tinitialized boolean = false;  \n\
\t \n\
\t// Optional select clause for statement \n\
\t// USAGE: Enter "Select colm1, colm2, colm3 etc. " as a string \n\
\tselectClause  string;\n\
\t \n\
\t// SQL FROM, WHERE and ORDER BY clauses \n\
\t// USAGE: specify as you would for dynamic SQL \n\
\tfromTablesWhere string;  \n\
\t\n\
\t// Indicates number of rows per page \n\
\tblockingFactor int;\n\
\t\n\
\t// Ordinal number (current row) in the array for paging \n\
\tposition int;\n\
\t\n\
\t// Total number of pages \n\
\tpageCount int;\n\
\t\n\
\t// Total number of rows that satisfied your WHERE clause \n\
\trowCount int;\n\
end\n\
//END ListSpecification\n\
\n\
//BEGIN custom source definitions\n\
//TODO: Add additional code here\n\
//END custom source definitions\n\



mdd_conditionHandlingLib=\
import eglx.lang.SysLib;\n\
import eglx.persistence.sql.SQLException;\n\
import eglx.rbd.StrLib;\n\
 \n\
Record Status\n\
\t// A value of true indicates an SQLCode of 0\n\
\tsucceeded boolean;\n\
\t\n\
\t// The statusCode returned to the calling routine\n\
\tcode int?;\n\
\t\n\
\t// A custom success/failure message, for the calling routine\n\
\tmessage string?;\n\
\n\
end\n\
\n\
Library ConditionHandlingLib\n\
\t// Public status codes\n\
\t// Insert or update operaton failed (general)\n\
\tconst InvalidDBRecord int = 1;\n\
\t\n\
\t// +100 SQLCODE\n\
\tconst DBRecordNotFound int = 2;\n\
\t\n\
\t// Generic Java run-time error (may have nothing to do with SQL)\n\
\tconst RuntimeError int = 3;\n\
\t\n\
\t// Generic SQL run-time error\n\
\tconst DataAccessException int = 4;\n\
\n\
\t/*\n\
\t * consider adding the following additional status codes.\n\
\t * Note that you will have to revise the "HandleException" routine.\n\
\t * An alternative is to pass the SQLCODE back to the client for validation.\n\
\t */  \n\
\t//BEGIN status codes\n\
\t// @generated - Delete generated tag to preserve modified code\t \t \n\
\tconst DuplicateKey\t\t\t\tint = 5;\t\t//Tried to Insert a row with a duplicate primary key\n\
\tconst AttemptChangePK\t\t\tint = 6;\t\t//Tried to Update a column that is part of a primary key\n\
\tconst ReferentialIntegrityViolation int = 7;\t//Tried to delete a parent with dependent rows (on Delete Restrict)\n\
\tconst TableNotFound\t\t\t\tint = 8;\t\t//Dynamic SQL run-time SQL error.  Tablename not found (probably misspelled)\n\
\tconst ColumnNotFound\t\t\tint = 9;\t\t//Dynamic SQL run-time SQL error.  Column name not found (probably misspelled)\n\
\tconst InvaldSQLKeyWord\t\t\tint = 10;\t\t//Dynamic SQL run-time SQL error.  Misspelled SQL keyword\n\
\tconst InvalidSELECTInto\t\t\tint = 11;\t\t//A SELECT INTO or sub-select returned more than one row (-811)\n\
\t//END status codes\n\
\n\
\t//Simple error message scheme which can be easily extended\n\
\t//BEGIN message strings\n\
\t// @generated - Delete generated tag to preserve modified code\t \t\n\
\tprivate InvalidDBRecordMessage string;\t\n\
\tprivate DBRecordNotFoundMessage string;\n\
\tprivate loaded boolean = LoadMessages();\n\
\t//END message strings\n\
\t\n\
\t//BEGIN LoadMessages\n\
\t// @generated - Delete generated tag to preserve modified code\t \t\n\
\tFunction LoadMessages() returns(boolean)\n\
\t\tInvalidDBRecordMessage = "Invalid Record cannot be added to database";\t\n\
\t\tDBRecordNotFoundMessage = "Database record in table {1} was not found";\t\n\
\t\treturn(true);\n\
\tend\n\
\t//END LoadMessages\n\
\t\n\
\t//BEGIN HandleSuccess\n\
\t// @generated - Delete generated tag to preserve modified code   \t\n\
\tFunction HandleSuccess(status Status)\n\
\t\tstatus.succeeded = true;\n\
\t\tstatus.code = 0;\n\
\t\tstatus.message = "SQL call succeeded";\n\
\tend\n\
\t//END HandleSuccess\n\
\t\t\n\
\t// Writes a generic message to the WAS console, describing the DBMS error condition\n\
\t//BEGIN HandleException\n\
\t// @generated - Delete generated tag to preserve modified code   \t\n\
\tFunction HandleException(status Status, exception SQLException)\n\
\t\tstatus.succeeded = false;\n\
\t\tstatus.code = DataAccessException;\n\
\t\tstatus.message = exception.message;\n\
\t\t\t   \n\
\t\t//Uncomment these lines to write the error msg to the WAS console\n\
\t\t//You can read the message in the Console View during testing\n\
\t\t//SysLib.writeStdout("Exception occurred: " + exception.sqlCode);\n\
\t\t//SysLib.writeStdout("Message: " + exception.message);\t\n\
\tend\n\
\t//END HandleException\n\
\t\n\
\t//Application conditions that are not system exceptions\n\
\t//BEGIN HandleInvalidDBRecord\n\
\t// @generated - Delete generated tag to preserve modified code   \t\n\
\tFunction HandleInvalidDBRecord(status Status)\n\
\t\tstatus.succeeded = false;\n\
\t\tstatus.code = InvalidDBRecord;\n\
\t\tstatus.message = InvalidDBRecordMessage;\n\
\tend\n\
\t//END HandleInvalidDBRecord\n\
\t\n\
\t// This routine is called for a +100 return code upon initial cursor open, or single-row SELECT, or Update, Delete\n\
\t//BEGIN HandleDBRecordNotFound\n\
\t// @generated - Delete generated tag to preserve modified code\n\
\tFunction HandleDBRecordNotFound(status Status, tableName string in)\n\
\t\tinserts String[];\n\
\t\tinserts.appendElement(tableName);\n\
\t\tstatus.succeeded = false;\n\
\t\tstatus.code = DBRecordNotFound;\n\
\t\tstatus.message = bindMessage(DBRecordNotFoundMessage, inserts);\n\
\tend\n\
\t//END HandleDBRecordNotFound\n\
\t\t\n\
\t\t/*\n\
\t * Adds supplied string inserts into a message\n\
\t * Insert locations are indicated by tokens in the form "{n}", where n is the token index\n\
\t * Parameters:\n\
\t *\t message is a string containing the message to be formatted\n\
\t *\t inserts is a string array containing values to be used to replace insert tokens\n\
\t * Returns:\n\
\t *\t a string representing the message with insert tokens replaced\n\
\t */\n\
\t//BEGIN bindMessage\n\
\t// @generated - Delete generated tag to preserve modified code\n\
\tFunction bindMessage(message String in, inserts String[] in) returns (String)\n\
\t\tvalue string = message; \n\
\t\tinsertLength int = inserts.getSize();\n\
\t\tmessageLength int;\n\
\t\ti, index, remainder int;\n\
\t\t\n\
\t\tfor (i from 1 to insertLength)\n\
\t\t\tmessageLength = StrLib.characterLen(value);\n\
\t\t\ttemp String;\n\
\t\t\tsubstring String = "{" + i + "}";\n\
\t\t\tindex = StrLib.indexOf(value, substring);\n\
\t\t\tif (index > 0)\n\
\t\t\t\tif (index > 1)\n\
\t\t\t\t\ttemp = message[1:index - 1];\n\
\t\t\t\tend\n\
\t\t\t\ttemp = temp + inserts[i];\n\
\t\t\t\tremainder = index + StrLib.characterLen(substring);\n\
\t\t\t\tif (remainder < messageLength)\n\
\t\t\t\t\ttemp = temp + value[remainder:messageLength];\n\
\t\t\t\tend\n\
\t\t\t\tvalue = temp;\n\
\t\t\tend\n\
\t\tend \n\
\t\treturn (value);\n\
\tend\n\
\t//END bindMessage\n\
\t\n\
\tfunction setData(key String in, value any? in)\n\
\t\t\n\
\tend\n\
\t\n\
\t\n\
\t//BEGIN custom source definitions\n\
\t//TODO: Add additional code here\n\
\t//END custom source definitions\n\
\t\n\
end\t\n\
\t\n\

mdd_addMethods=\
\tfunction add${entityName}(newRecord ${entityRecordName} in) returns (boolean)\n\
\t\treturn (add${entityName}WithStatus(newRecord).status.succeeded);\n\
\tend\n\
\n\
\tfunction add${entityName}WithStatus(newRecord ${entityRecordName} in) returns (${entityName}WithStatus)\n\
\t\tret ${entityName}WithStatus{};\n\
\t\t\n\
\t\t// invoke local function to verify data values\n\
\t\tif (isValid${entityName}(newRecord))\n\
\t\t\t// attempt to execute the following code, but catch failures onException\n\
\t\t\ttry\n\
\t\t\t\tadd newRecord to dataSource;\n\
\t\t\t\thandleSuccess(ret.status);\n\
\t\t\tonException (exception SQLException)\n\
\t\t\t\thandleException(ret.status, exception);\n\
\t\t\tend\n\
\t\telse\n\
\t\t\tHandleInvalidDBRecord(ret.status);\n\
\t\tend\n\
\n\
\t\tret.data = newRecord;\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\
\n\
\tfunction add${entityName}List(newRecordList ${entityRecordName}? [ ] in) returns (boolean)\n\
\t\treturn(add${entityName}ListWithStatus(newRecordList).status.succeeded);\n\
\tend\n\
\n\
\t// set parameter as "in" to avoid passing the data back twice (in the array and as part of the results)\n\
\tfunction add${entityName}ListWithStatus(newRecordList ${entityRecordName}? [ ] in) returns (${entityName}ListWithStatus)\n\
\t\tret ${entityName}ListWithStatus{};\n\
\t\thandleSuccess(ret.status); // assume success unless an error occurs\n\
\t\t\n\
\t\t// Loop through the array\n\
\t\tfor (i int from 1 to newRecordList.getSize())\n\
\t\t\t// Pass each ${entityRecordName} record to the add function\n\
\t\t\n\
\t\t\ttempStatus Status = add${entityName}WithStatus(newRecordList [ i ]).status;\n\
\t\t\tif (tempStatus.succeeded)\n\
\t\t\t\tcontinue;\n\
\t\t\telse\t \n\
\t\t\t\tret.status.message = tempStatus.message;\n\
\t\t\t\tret.status.code = tempStatus.code;\n\
\t\t\t\tret.status.succeeded = tempStatus.succeeded;\n\
\t\t\t\texit;\n\
\t\t\tend\n\
\t\tend\n\
\t\t\t\t\t   \n\
\t\tret.data = newRecordList; \n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\

mdd_getmethod=\
\n\
\t\n\
\tfunction get${entityName}ById(${searchMethodParamDef}) returns (${entityRecordName}?)\n\
\t\treturn (get${entityName}ByIdWithStatus(${searchMethodParam}).data);\n\
\tend\n\
\t\n\
\tfunction get${entityName}ByIdWithStatus(${searchMethodParamDef}) returns (${entityName}WithStatus)\n\
\t\ts ${entityName}WithStatus = get${entityName}WithStatus(new ${entityRecordName}{ ${searchRecordKeyAssign} });\n\
\t\treturn (s);\n\
\tend\n\
\t\n\
\tfunction get${entityName}(searchRecord ${entityRecordName} in) returns (${entityRecordName}?)\n\
\t\ts ${entityName}WithStatus = get${entityName}WithStatus(searchRecord);\n\
\t\t\n\
\t\treturn (s.data);\n\
\tend\n\
\t\n\
\tfunction get${entityName}WithStatus(searchRecord ${entityRecordName} in) returns (${entityName}WithStatus)\n\
\t\tret ${entityName}WithStatus{};\n\
\t\t\n\
\t\ttry\n\
\t\t\tget searchRecord from dataSource;\n\
\t\t\thandleSuccess(ret.status);\n\
\t\t\tret.data = searchRecord;\n\
\t\tonException (exception SQLException)\n\
\t\t\tif (exception.ErrorCode == 100)\n\
\t\t\t\thandleDBRecordNotFound(ret.status, "${schemaPrefix}${entityName}");\n\
\t\t\telse\n\
\t\t\t\thandleException(ret.status, exception);\n\
\t\t\tend  \n\
\t\tend\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\
\t\n\
\tfunction get${entityName}ListAll() returns (${entityRecordName}?[]?)\n\
\t\treturn (get${entityName}ListAllWithStatus().data);\n\
\tend\t\n\
\t\t\n\
\tfunction get${entityName}ListAllWithStatus() returns (${entityName}ListWithStatus)\n\
\t\tret ${entityName}ListWithStatus{ };\n\
\t\t\t\t\n\
\t\ttry\n\
\t\t\trecordList ${entityRecordName}?[];\n\
\t\t\tget recordList from dataSource;\n\
\t\t\tif (recordList.getSize() == 0)\n\
\t\t\t\thandleDBRecordNotFound(ret.status, "${schemaPrefix}${entityName}");\n\
\t\t\telse\n\
\t\t\t\thandleSuccess(ret.status);\n\
\t\t\tend   \n\
\t\t\tret.data = recordList;\n\
\t\tonException (exception SQLException)\n\
\t\t\thandleException(ret.status, exception);\n\
\t\tend\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\
\t\n\
\t/*\n\
\t * Multiple Row Select with Prepared Statement and SQL/Programmatic Paging\n\
\t * Returns a dynamic array of rows and allows you to specify paging (for "Programmatic Paging").\n\
\t * This function also provides an example of a Prepared SQL statement.\n\
\t * The prepared statement can be used as a model for dynamic search pages and other requirements.\n\
\t * See the file ControlStructures.egl for explanations of referenced control structures.\n\
\t * Note that fromTablesWhere and blockingFactor must be set by the calling function prior to invoking this function.\n\
\t * The selectStatement can optionally be modified in order to improve run-time DBMS performance.\n\
\t */\n\
\tfunction get${entityName}List(listSpec ListSpecification) returns (${entityRecordName}?[])\n\
\t\treturn(get${entityName}ListWithStatus(listSpec).data);\n\
\tend\n\
\t\n\
\tfunction get${entityName}ListWithStatus(listSpec ListSpecification) returns (${entityName}ListWithStatus)\n\
\t\tret ${entityName}ListWithStatus{};\n\
\t\t\n\
\t\trecordList ${entityRecordName}? [ ];\n\
\n\
\t\ti int = 1;\n\
\t\ttry\n\
\t\t\tselectStatement SQLStatement?{@SQLResultSetControl{scrollablity = TYPE_SCROLL_INSENSITIVE}};\n\
\n\
\t\t\t\t// Prepare the dynamic SQL statement to retrieve the data\n\
\t\t\t\tprepare selectStatement from dataSource\n\
\t\t\t\t\t\twith "SELECT * " +\n\
\t\t\t\t\t\t\t\tlistSpec.fromTablesWhere;\n\
\t\t\t// If the SQL statement must be prepared\n\
\t\t\tif (!listSpec.initialized)\n\
\t\t\t\t// Prepare the dynamic SQL statement to find out how many rows\n\
\t\t\t\tgetRowCountStatement SQLStatement?;\n\
\t\t\t\tprepare getRowCountStatement from dataSource with "SELECT COUNT(*) " + listSpec.fromTablesWhere;\n\
\t\t\t\t// Get using performance-oriented count(1) select\n\
\t\t\t\tget listSpec.rowCount with getRowCountStatement;\n\
\t\t\t\t// Calculate the number of pages\n\
\t\t\t\tlistSpec.pageCount = listSpec.rowCount / listSpec.blockingFactor;\n\
\n\
\t\t\t\t// Add additional page if rows remain after calculating full pages\n\
\t\t\t\tif ( (listSpec.rowCount % listSpec.blockingFactor) != 0)\n\
\t\t\t\t\tlistSpec.pageCount = listSpec.pageCount + 1;\n\
\t\t\t\tend\n\
\t\t\t\tlistSpec.initialized = true;\n\
\t\t\tend\n\
\n\
\t\t\tif (listSpec.rowCount == 0)\n\
\t\t\t\treturn;\n\
\t\t\tend\n\
\n\
\t\t\tif (listSpec.position > listSpec.rowCount)\n\
\t\t\t\tlistSpec.position = (listSpec.pageCount - 1) * listSpec.blockingFactor + 1;\n\
\t\t\tend\n\
\n\
\t\t\t// Calculate the number of rows that requested page contains.\n\
\t\t\t// Create an array whose size equals the number of rows on the page.\n\
\t\t\tif (listSpec.position + listSpec.blockingFactor > listSpec.rowCount)\n\
\t\t\t\trecordList.resize(listSpec.rowCount - listSpec.position + 1);\n\
\t\t\telse\n\
\t\t\t\trecordList.resize(listSpec.blockingFactor);\n\
\t\t\tend\n\
\n\
\t\t\t// Open the cursor on the above dynamic SQL Select statement.\n\
\t\t\tresultSet SQLResultSet?;\n\
\n\
\t\t\topen resultSet from dataSource with selectStatement;\n\
\t\t\t\n\
\t\t\tresultSet.setAbsolute(listSpec.position);\n\
\n\
\t\t\ttempRecord ${entityRecordName}?;\n\
\t\t\tfor(i from 1 to recordList.getSize())\n\
\t\t\t\tif (resultSet.setNext())\n\
\t\t\t\t\tget tempRecord from resultSet;\n\
\t\t\t\t\trecordList [ i ] = tempRecord;\n\
\t\t\t\tend\n\
\t\t\tend\n\
\n\
\t\t\thandleSuccess(ret.status);\n\
\n\
\t\t\t// Update the paging position\n\
\t\t\tlistSpec.position = listSpec.position + recordList.getSize();\n\
\t\t\t// Return the temp rows to the calling-routine\n\
\t\t\t\n\
\t\t\tret.data = recordList;\n\
\t\tonException (exception SQLException)\n\
\t\t\thandleException(ret.status, exception);\n\
\t\t\tret.data = new ${entityRecordName}?[];\n\
\t\tend\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\
\t\n\

mdd_updatemethod=\
\n\
\tfunction update${entityName}(updateRecord ${entityRecordName} in) returns (boolean)\n\
\t\treturn(update${entityName}WithStatus(updateRecord).status.succeeded);\n\
\tend\n\
\t\n\
\tfunction update${entityName}WithStatus(updateRecord ${entityRecordName} in) returns (${entityName}WithStatus)\n\
\t\tret ${entityName}WithStatus{};\n\
\t\t\n\
\t\ttry\n\
\t\t\tif (isValid${entityName}(updateRecord))\n\
\t\t\t\treplace updateRecord to dataSource;\n\
\t\t\t\thandleSuccess(ret.status);\n\
\t\t\tend\n\
\t\tonException (exception SQLException)\n\
\t\t\thandleException(ret.status, exception);\n\
\t\tend\n\
\t\t\n\
\t\tret.data = updateRecord;\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\
\n\
\tfunction update${entityName}List(recordList ${entityRecordName}? [ ] in) returns (boolean)\n\
\t\treturn(update${entityName}ListWithStatus(recordList).status.succeeded);\n\
\tend\n\
\n\
\tfunction update${entityName}ListWithStatus(recordList ${entityRecordName}? [ ] in) returns (${entityName}ListWithStatus);\n\
\t\tret ${entityName}ListWithStatus{};\n\
\t\tHandleSuccess(ret.status); // assume successs\n\
\t\n\
\t\t// Determine number of elements in the array\n\
\t\tsz int = recordList.getSize();\n\
\t\tfor (i int from 1 to sz)\n\
\t\t\t// Pass each ${entityRecordName} record to the update function\n\
\t\t\ttempStatus Status = update${entityName}WithStatus(recordList [ i ]).status;\n\
\t\t\tif (tempStatus.succeeded)\n\
\t\t\t\tcontinue;\n\
\t\t\telse\n\
\t\t\t\tret.status.message = tempStatus.message;\n\
\t\t\t\tret.status.code = tempStatus.code;\n\
\t\t\t\tret.status.succeeded = tempStatus.succeeded;\n\
\t\t\t\texit;\n\
\t\t\tend\n\
\t\tend\n\
\t\t\n\
\t\tret.data = recordList;\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\
\n\

mdd_deleteMethod=\
\t\n\
\tfunction delete${entityName}(deletionRecord ${entityRecordName} in) returns (boolean)\n\
\t\treturn(delete${entityName}WithStatus(deletionRecord).status.succeeded);\n\
\tend\n\
\t\n\
\tfunction delete${entityName}WithStatus(deletionRecord ${entityRecordName} in) returns (${entityName}WithStatus)\n\
\t\tret ${entityName}WithStatus{};\n\
\t\t\n\
\t\ttry\n\
\t\t\tdelete deletionRecord from dataSource;\n\
\t\t\thandleSuccess(ret.status);\n\
\t\tonException (exception SQLException)\n\
\t\t\thandleException(ret.status, exception);\n\
\t\tend\n\
\t\t\t\n\
\t\tret.data = deletionRecord;\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\
\t\n\
\tfunction delete${entityName}ById(${searchMethodParamDef}) returns (boolean)\n\
\t\treturn (delete${entityName}ByIdWithStatus(${searchMethodParam}).status.succeeded);\n\
\tend\n\
\t\n\
\tfunction delete${entityName}ByIdWithStatus(${searchMethodParamDef}) returns (${entityName}WithStatus)\n\
\t\tret ${entityName}WithStatus{};\n\
\t\t\n\
\t\ttry\n\
\t\t\ttempRecord ${entityRecordName} {${searchRecordKeyAssign}};\n\
\t\t\tdelete tempRecord from dataSource;\n\
\t\t\thandleSuccess(ret.status);\n\
\t\tonException (exception SQLException)\n\
\t\t\thandleException(ret.status, exception);\n\
\t\tend\n\
\t\t\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\t\n\
\t\n\
\t/*\n\
\t * Multiple Row Delete\n\
\t * Delete rows from the database, based on an array of ${entityRecordName} records.\n\
\t * You are responsible for all data validations and referential integrity constraints.\n\
\t * If dependent rows exist you will have to delete them first.\n\
\t */\n\
\tfunction delete${entityName}List(recordList ${entityRecordName}? [ ] in) returns (boolean)\n\
\t\treturn (delete${entityName}ListWithStatus(recordList).status.succeeded);\n\
\tend\n\
\t\n\
   \tfunction delete${entityName}ListWithStatus(recordList ${entityRecordName}? [ ] in) returns (${entityName}ListWithStatus)\n\
   \t\tret ${entityName}ListWithStatus{};\n\
   \t\tHandleSuccess(ret.status);\n\
   \t\t\n\
\t\tsz int = recordList.getSize();\n\
\t\tfor (i int from 1 to sz)\n\
\t\t\ttempStatus Status = delete${entityName}WithStatus(recordList [ i ]).status;\n\
\t\t\tif (tempStatus.succeeded)\n\
\t\t\t\tcontinue;\n\
\t\t\telse\n\
\t\t\t\tret.status.message = tempStatus.message;\n\
\t\t\t\tret.status.code = tempStatus.code;\n\
\t\t\t\tret.status.succeeded = tempStatus.succeeded;\n\
\t\t\t\texit;\n\
\t\t\tend\n\
\t\tend\n\
\t\t\n\
\t\tret.data = recordList;\n\
\t\t\n\
\t\treturn (ret);\n\
\tend\n\

mdd_existMethod=\
	function exists${entityName}(${searchMethodParamDef}) returns (boolean)\n\
			e ${entityRecordName}?;\n\
			get e from dataSource using ${searchMethodParam};\n\
			return (e != null);\n\
	end\t\n\

mdd_isValidmethod=\
\t/*\n\
\t * This function returns true if the supplied record is valid.\n\
\t * Customize to supply validation rules as needed.\n\
\t * isValid${entityName}() is called prior to updating or inserting a row into the database.\n\
\t */\n\
\tfunction isValid${entityName}(testRecord ${entityRecordName}) returns (boolean)\n\
\t\treturn (true);\n\
\tend\n\

mdd_service_serviceHeader=\
import eglx.lang.AnyException;\n\
import eglx.lang.Resource;\n\
import eglx.persistence.sql.SQLDataSource;\n\
import eglx.persistence.sql.SQLException;\n\
import eglx.persistence.sql.SQLResultSet;\n\
import eglx.persistence.sql.SQLStatement;\n\
import ${javaJsPackageName}.*;\n\
\n\
\n\
service ${serviceName}\n\
\tdataSource SQLDataSource? { @Resource{uri = "binding:${sqlBindingName}"}};  \n\
\n\
\t// Allows unqualified references to the functions in ConditionHandlingLib\n\
\tuse ConditionHandlingLib;\n\n

mdd_library_libraryHeader=\
import eglx.lang.AnyException;\n\
import eglx.lang.Resource;\n\
import eglx.persistence.sql.SQLDataSource;\n\
import eglx.persistence.sql.SQLException;\n\
import eglx.persistence.sql.SQLResultSet;\n\
import eglx.persistence.sql.SQLStatement;\n\
import ${javaJsPackageName}.*;\n\
\n\
\n\
library ${libraryName}\n\
\tdataSource SQLDataSource? { @Resource{uri = "binding:${sqlBindingName}"}};  \n\
\n\
\t// Allows unqualified references to the functions in ConditionHandlingLib\n\
\tuse ConditionHandlingLib;\n\n