/*******************************************************************************
 * Copyright © 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package dojo.widgets;

import eglx.javascript.javascriptobject;
import eglx.lang.property;
import eglx.ui.rui.eventhandler;
import eglx.ui.rui.ruilib;
import eglx.ui.rui.veevent;
import eglx.ui.rui.veproperty;
import eglx.ui.rui.vewidget;

/* 
 * An input field for text field with validation.
 *
 * For more detail, see http://docs.dojocampus.org/dijit/form/CurrencyTextBox
 */
ExternalType DojoTextField Extends DojoValidationBase type JavaScriptObject{
		relativePath = "dojo/widgets",
        externalName = "DojoTextField",
        @VEWidget{
			category = "Display and Input",
			template = "${typeName}{}",
			displayName = "TextField",
			smallIcon = "icons/ctool16/dijit_textbx_pal16.gif",
			largeIcon = "icons/ctool24/dijit_textbx_pal24.gif",
			propertyFilterType  = filterKind.includeAllExcept,
			propertyFilter = [ "class", "color", "x", "y", "cursor", "ariaLive", "ariaRole", "tabIndex" ],
			eventFilterType  = filterKind.includeAllExcept,
       		eventFilter  = ["onSelect","onScroll"],
			provider = "Dojo"
		},
		@MVCView{
			retrieveValidStateHelper = getValidState,
			publishMessageHelper = showErrorMessage,
			showErrorState = showErrorIndicator
		},
		@VEDataTemplate{
		dataTemplates = [
			@DataTemplate{
				name = "DojoTextField (read only)",
				dataMapping = @DataMapping {
					forArray = false,
					isDefault = true,
					mappings = [MappingKind.TYPE_PRIMITIVE_STRING,
								MappingKind.TYPE_PRIMITIVE_DATE,
								MappingKind.TYPE_PRIMITIVE_TIME,
								MappingKind.TYPE_PRIMITIVE_TIMESTAMP,
								MappingKind.TYPE_PRIMITIVE_BIGINT,
								MappingKind.TYPE_PRIMITIVE_BIN,
								MappingKind.TYPE_PRIMITIVE_DECIMAL,
								MappingKind.TYPE_PRIMITIVE_FLOAT,
								MappingKind.TYPE_PRIMITIVE_INT,
								MappingKind.TYPE_PRIMITIVE_NUM,
								MappingKind.TYPE_PRIMITIVE_MONEY,
								MappingKind.TYPE_PRIMITIVE_SMALLFLOAT,
								MappingKind.TYPE_PRIMITIVE_SMALLINT]
				},
				genController = true,
				purposes = [PurposeKind.FOR_DISPLAY, PurposeKind.FOR_UPDATE],
				template = "${widgetName} ${typeName:dojo.widgets.DojoTextField} { readOnly = true };"
			},
			@DataTemplate{
				name = "DojoTextField",
				dataMapping = @DataMapping {
					forArray = false,
					isDefault = true,
					mappings = [MappingKind.TYPE_PRIMITIVE_STRING,
								MappingKind.TYPE_PRIMITIVE_BIGINT,
								MappingKind.TYPE_PRIMITIVE_BIN,
								MappingKind.TYPE_PRIMITIVE_DECIMAL,
								MappingKind.TYPE_PRIMITIVE_FLOAT,
								MappingKind.TYPE_PRIMITIVE_INT,
								MappingKind.TYPE_PRIMITIVE_NUM,
								MappingKind.TYPE_PRIMITIVE_MONEY,
								MappingKind.TYPE_PRIMITIVE_SMALLFLOAT,
								MappingKind.TYPE_PRIMITIVE_SMALLINT]
				},
				genController = true,
				purposes = [PurposeKind.FOR_CREATE, PurposeKind.FOR_UPDATE],
				template = "${widgetName} ${typeName:dojo.widgets.DojoTextField} {};"
			}
		]
	}}	
	
	function getValidState() returns (string?);
	function showErrorMessage(msg string in);
	function showErrorIndicator(aboolean boolean in);
end