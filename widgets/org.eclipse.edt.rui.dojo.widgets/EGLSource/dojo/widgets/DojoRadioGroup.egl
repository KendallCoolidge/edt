/*******************************************************************************
 * Copyright ï¿½ 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package dojo.widgets;

import eglx.javascript.JavaScriptObject;
import eglx.lang.Property;
import eglx.ui.rui.FilterKind;
import eglx.ui.rui.MVCView;
import eglx.ui.rui.VEProperty;
import eglx.ui.rui.VEWidget;
/**
 * This is a radio button group widget. 
 *
 * For more information on the Dojo widget itself, see http://docs.dojocampus.org/dojox/layout/RadioGroup
 *
 */  
ExternalType DojoRadioGroup Extends DojoBase type JavaScriptObject{
		relativePath = "dojo/widgets",
		externalName = "DojoRadioGroup",
	@VEWidget{
		displayName = "RadioGroup",
		category = "Display and Input",
		template = 
			"${typeName}{ \n\t\t" +
				"vertical = true, //onChange ::= chooseDrink,\n\t\t" +
				"options = [ \"soda\", \"coffee\", \"tea\" ],\n\t\t" +
				"selected = \"coffee\"\n\t" +
			"}",
		smallIcon = "icons/ctool16/dijit_radiobutt_pal16.gif",
		largeIcon = "icons/ctool24/dijit_radiobutt_pal24.gif",
		propertyFilterType  = filterKind.includeAllExcept,
		propertyFilter = [ "class", "color", "font", "fontSize", "x", "y", "cursor", "ariaLive", "ariaRole", "tabIndex" ],
		eventFilterType  = filterKind.includeAllExcept,
       	eventFilter  = ["onFocusGained", "onFocusLost", "onSelect", "onScroll"],
		provider = "Dojo"
	},
	@MVCView{
			retrieveViewHelper = getValueAsText,
			publishHelper = setValueAsText
	}}

	/*
	 * Make this a vertical radio group (the radiobuttons will be stacked on top of each other)
	 */
	vertical boolean {@VEProperty};

	/*
	 * The options to show as radio buttons
	 */
	options string[]{ @Property { setMethod="setOptions" , getMethod="getOptions" }, @VEProperty{}};
	
	/*
	 * The currently selected option (has to be one of the values in the options array
	 */
	selected string{ @Property { setMethod="setSelected" , getMethod="getSelected" }, @VEProperty{}};
	
	/*
	 * Function for Bidi operation
	 */
	function setBiDiMarkers(); 	
	private function getValueAsText() returns(String);
	private function setValueAsText(str String in);

end
