package com.ibm.as400.security.auth;

import com.ibm.as400.access.AS400;
import eglx.java.JavaObject;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.io.Serializable;
import java.lang.Throwable;


externalType AS400Credential extends Serializable, AS400SwappableCredential type JavaObject
    static CR_AUTO_REFRESH_FAILED int;
    static CR_AUTO_REFRESH_NOT_VALID int;
    static CR_AUTO_REFRESH_STARTED int;
    static CR_AUTO_REFRESH_STOPPED int;

    private constructor();

    function addCredentialListener(arg0 AS400CredentialListener? in);

    function addPropertyChangeListener(arg0 PropertyChangeListener? in);

    function addVetoableChangeListener(arg0 VetoableChangeListener? in);

    function destroy(){@Throws};

    function getAutomaticRefreshFailure() returns(Throwable?);

    function getAutomaticRefreshStatus() returns(int);

    function getPrincipal() returns(AS400Principal?);

    function getSystem() returns(AS400?);

    function getTimeToExpiration() returns(int){@Throws};

    function isCurrent() returns(boolean);

    function isDestroyed() returns(boolean);

    function isPrivate() returns(boolean);

    function isRenewable() returns(boolean);

    function isTimed() returns(boolean);

    function refresh(){@Throws};

    function removeCredentialListener(arg0 AS400CredentialListener? in);

    function removePropertyChangeListener(arg0 PropertyChangeListener? in);

    function removeVetoableChangeListener(arg0 VetoableChangeListener? in);

    function setPrincipal(arg0 AS400Principal? in){@Throws};

    function setSystem(arg0 AS400? in){@Throws};

    function startAutomaticRefresh(arg0 int in, arg1 int in);

    function stopAutomaticRefresh();

    function swap(){@Throws};

    function swap(arg0 boolean in) returns(AS400Credential?){@Throws};
end

