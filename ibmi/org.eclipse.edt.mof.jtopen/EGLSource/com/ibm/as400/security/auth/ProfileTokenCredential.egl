package com.ibm.as400.security.auth;

import eglx.java.JavaObject;
import eglx.java.Object;


externalType ProfileTokenCredential extends AS400Credential, AS400BasicAuthenticationCredential type JavaObject
    static PW_NOPWD int;
    static PW_NOPWDCHK int;
    static TOKEN_LENGTH int;
    static TYPE_MULTIPLE_USE_NON_RENEWABLE int;
    static TYPE_MULTIPLE_USE_RENEWABLE int;
    static TYPE_SINGLE_USE int;

    constructor();

    function allowRefresh();

    function equals(arg0 Object? in) returns(boolean);

    function getTimeoutInterval() returns(int);

    function getTokenType() returns(int);

    function hashCode() returns(int);

    function initialize(arg0 AS400BasicAuthenticationPrincipal? in, arg1 string? in, arg2 boolean in, arg3 boolean in, arg4 boolean in, arg5 int in){@Throws};

    function isRenewable() returns(boolean);

    function isReusable() returns(boolean);

    function preventRefresh(){@Throws};

    function refresh(){@Throws};

    function refresh(arg0 int in, arg1 int in){@Throws};

    function setTimeoutInterval(arg0 int in){@Throws};

    function setToken(arg0 AS400Principal? in, arg1 string? in){@Throws};

    function setToken(arg0 string? in, arg1 string? in){@Throws};

    function setToken(arg0 AS400Principal? in, arg1 int in){@Throws};

    function setToken(arg0 string? in, arg1 int in){@Throws};

    function setTokenExtended(arg0 string? in, arg1 string? in){@Throws};

    function setTokenExtended(arg0 AS400Principal? in, arg1 string? in){@Throws};

    function setTokenType(arg0 int in){@Throws};

    function superHashCode() returns(int);

    function toString() returns(string?);
end

