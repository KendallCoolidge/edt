import eglx.http.*;
import eglx.rest.*;


program pgm1 {}
	httpProxy HttpProxy;
	httpRest HttpRest;
	function main()
	end
	
	function f5(p1 decimal)
			i1 int;
			call field1(i1) using httpProxy;//1 The target of the Call must be a Service or proxy function.
	end

	function f5a(p1 decimal)
			i1 int;
			call field1(i1) using httpRest;//1 The target of the Call must be a Service or proxy function.
	end

	function f7(p1 decimal)
			i1 int;
			call fp8(i1) using httpRest;//1 The call statement must specify a "returning to" or "returns" function.
	end

	function f7a(p1 decimal)
			i1 int;
			call fp8(i1) using httpProxy;//1 The call statement must specify a "returning to" or "returns" function.
	end

	function f9(p1 decimal)
			i1 int;
			call fp8(i1) using httpProxy returning to response1;//1 The type fp8 cannot be passed to the parameter p1 of the function response1. It is not assignment compatible with boolean.
	end
	
	function f9a(p1 decimal)
			i1 int;
			s1 string;
			r1 rec1;
			call fp13(s1, r1, i1) using httpProxy returning to response6;//1 The type int cannot be passed to the parameter p3 of the function response6. It is not assignment compatible with boolean.
	end

	function f11(p1 decimal)
			i1 int;
			call fp7(i1) using httpProxy onexception response1;//1 The parameter at position 1 of function response1 must have a type of eglx.lang.anyexception.
	end

	function f12(p1 decimal)
			i1 int;
			call fp8(i1) using httpProxy returning to response2;//1 All of the parameters in "returning to" or "onexception" function response2 must be defined with the IN modifier.
	end

	function f12a(p1 decimal)
			i1 int;
			call fp8(i1) using httpProxy returning to response3;//1 All of the parameters in "returning to" or "onexception" function response3 must be defined with the IN modifier.
	end

	function f14(p1 decimal)
			i1 int;
			call fp8(i1) using httpProxy returning to field1;//1 The "returning to" or "onexception" expression must resolve to a function.
	end

	function f15(p1 decimal)
			i1 int;
			call fp8(i1) using httpProxy returning to response4;//1 The "returning to" or "onexception" function response4 cannot return a type.
	end

	function f16(p1 decimal)
			i1 int;
			call lib1.fp1(i1) using httpProxy returning to lib1.response1;//1 The function response1 must be defined in the part pgm1.
	end

	function f17(p1 decimal)
			i1 int;
			call fp7(i1) using httpProxy returning to response5;//1 The "returning to" or "onexception" function response5 requires 0 parameter(s).
	end
	
	function f18(p1 decimal)
			i1 int;
			s1 string;
			r1 rec1;
			call fp13(s1, i1, i1) using httpProxy returning to response7;//1 The argument i1 cannot be passed to the in or out parameter p2 of the function fp13. The types int and rec1 are not assignment compatible.
	end

	function f19(p1 decimal)
			i1 string;
			call fp13(i1) using httpProxy returning to response7;//1 Function fp13 requires exactly 3 argument(s)
	end

	function f20(p1 decimal)
			i1 int;
			call HANDLER1.fp1(i1) using httpProxy returning to response5;//1 Only a library or service part can be use as a qualifier.
	end

	function f21(p1 decimal)
			i1 boolean;
			call fp7(i1) using httpProxy onexception response8;//1 The "returning to" or "onexception" function response8 requires 1 parameter(s).
	end


	function response1 (p1 boolean in)
	end

	function response2 (p1 rec1 out)
	end

	function response3 (p1 rec1 inout)
	end

	function response4 (p1 rec1 in)returns(int)
	end

	function response5 (http Rec1 in)
	end

	function response6 (p2 rec1 in, p3 boolean in)
	end

	function response7 (p2 rec1 in, p3 int in)
	end

	function response8 ()
	end

	function fp7 (p1 String in)
		{@REST{method=POST}} 
	end

	function fp8 (p1 String in)returns(rec1)
		{@REST{method=POST}} 
	end

	function fp9 (p1 String in)
		{@REST{method=POST}} 
	end

	function fp10 (p1 int) 
	end

	function fp12 (p1 String)returns(rec1)
		{@EglService} 
	end

	function fp13 (p1 String in, p2 rec1 out, p3 int inout)
		{@EglService} 
	end

	field1 int;
	
end

handler handler1
	function fp1 (p1 String in)returns(rec1)
		{@EglService} 
	end
end

library lib1
	function response1 (p1 String in, p2 rec1 in)
	end
	function fp1 (p1 String inout)returns(rec1)
		{@EglService} 
	end
end

service service1 {}
	function f1(p1 decimal)
			i1 int;
//			call this.fp9(i1) using new HttpRest;
	end
	function fp9 (p1 string in)
		{@REST{method=POST}} 
	end
end

record rec1 
	f1 string;
end