import eglx.rest.*;
import eglx.java.*;

interface inter1
	function f1() {@REST {method=POST}}; //1 The container for the eglx.rest.Rest function f1 is invalid. The property is only allowed on functions in Programs, Libraries, Services, and Basic Handlers.
	function f2() {@EGLService {}}; //1 The container for the eglx.rest.EglService function f2 is invalid. The property is only allowed on functions in Programs, Libraries, Services, and Basic Handlers.
end

externaltype et1 type JavaObject
	function f1() {@REST {method=_GET}}; //1 The container for the eglx.rest.Rest function f1 is invalid. The property is only allowed on functions in Programs, Libraries, Services, and Basic Handlers.
	function f2() {@EGLService {}}; //1 The container for the eglx.rest.EglService function f2 is invalid. The property is only allowed on functions in Programs, Libraries, Services, and Basic Handlers.
end



program pgm1 {}

	function main()
	end
	
	function fp1 (p1 string in)
		{@REST{}} //1 An Http method must be specified.
	end
	
	function fp2 (p1 int in)//1 The resource parameter p1 of the function fp2 which specifies the REST annotation must have a type of String or a part of type Record
		{@REST{method=POST}} 
	end

	function fp3 (p1 string)//1 The parameter p1 for the fuction fp3 which specifies the REST annotation must be defined with the IN modifier.
		{@REST{method=POST}} 
	end

	function fp4 (p1 string in) returns(boolean)//1 The function fp4 with specifies the REST annotation can only return a type of String or a part of type Record.
		{@REST{method=POST}} 
	end

	function fp5(p1 string in) returns(string)//1 The value of the responseFormat property must be NONE because the type of the resource parameter or return type of the function is String.
		{@REST{method=POST, responseFormat=XML}} 
	end

	function fp6(p1 string in, p2 string in)//1 Only one resource parameter is allowed for the funcion fp6 which specifies the REST annotation.
		{@REST{method=POST}} 
	end

	function fp7 (p1 string in)
		{@REST{method=POST, RequestFormat=XML}} //1 The value of the requestFormat property must be NONE because the type of the resource parameter or return type of the function is String.
	end

	function fp8 (p1 rec1 in)//1 The resource parameter p1 of the function fp8 which specifies a requestFormat of _FORM must be a part of type Record or Handler and the record cannot contain other records.
		{@REST{method=POST, RequestFormat=_Form}} 
	end

	function fp9 (p1 handler1 in)//1 The resource parameter p1 of the function fp9 which specifies a requestFormat of _FORM must be a part of type Record or Handler and the record cannot contain other records.
		{@REST{method=POST, RequestFormat=_Form}} 
	end

	function fp10(p1 string in)//1 A Resource parameter is not allowed for the funcion fp10 which specifies the REST annotation. Parameter p1 must be removed or specified in the uriTemplate.
		{@REST{method=_GET}} 
	end

	function fp11(p1 string in)//1 A Resource parameter is not allowed for the funcion fp11 which specifies the REST annotation. Parameter p1 must be removed or specified in the uriTemplate.
		{@REST{method=_GET, uriTemplate="http://{p2}"}} //1 The uri substitution variable p2 does not match any of the defined parameters for the function fp11.
	end

	function fp12(p1 rec1 in)//1 The non-resource parameter p1 for the function fp12 which specifies the REST annotation is not assignment compatible with String.
		{@REST{method=_GET, uriTemplate="http://{p1}"}} 
	end

	function fp13(p1 string in)
		{@REST{method=POST}}
		i1 int = 5; //1 A proxy function fp13 cannot contain statements.
	end

	function fp14(p1 string in)
		{@REST{}}//1 An Http method must be specified.
	end

	function fp15(p1 string in)
		{@REST{method=POST, responseFormat=_FORM}}//1 The value _FORM for the responseFormat property is not supported.
	end


end

record rec1
	f1 rec2;
end

record rec2
	f1 string;
end

record handler1
	f1 handler2;
end

record handler2
	f1 string;
end
