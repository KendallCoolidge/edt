import eglx.rest.*;
import eglx.http.*;


library myinter
	function interfunc() returns (int){@Resource{}, @EglService{}}
	end
end

service myserv

	
	function srvFunc() returns (int)
	end
end

service myserv2	
	i int;
	function testRemoteCallsToService()
		//test remote call to the same service
		call myserv.srvfunc(); //1 The call statement must specify a "returning to" or "returns" function.
		call myserv.srvfunc(); //1  The call statement must specify a "returning to" or "returns" function.
		
		call myserv.srvfunc() //1 The specified using clause type 'string(12)' is not compatible with the expected type eglx.http.IHttp.
				using "binding:fred"  
					returning to callback; 
					
		call myserv.srvfunc() //1 The specified using clause type 'any' is not compatible with the expected type eglx.http.IHttp.
				 using Resources.getResource( "binding:fred") 
				 	returning to callback; 
		

		call myserv.srvfunc()
				 using Resources.getResource( "binding:fred") as IHTTP //0
				 	returning to callback; 
		
		call myserv.srvfunc() returns(i); //0
		
		call myserv.srvfunc() returning to callback; //0
		call myserv.srvfunc() returning to callback; //0
	end


	function testRemoteCallsToInterface()
		//test remote call to the same service
		call myinter.interfunc(); //1 The call statement must specify a "returning to" or "returns" function.
		call myinter.interfunc(); //1  The call statement must specify a "returning to" or "returns" function.
		
		call myinter.interfunc() //1 The specified using clause type 'string(12)' is not compatible with the expected type eglx.http.IHttp.
				using "binding:fred"  
					returning to callback; 
					
		call myinter.interfunc()//1 The specified using clause type 'any' is not compatible with the expected type eglx.http.IHttp.
				 using Resources.getResource( "binding:fred") 
				 	returning to callback; 
		

		call myinter.interfunc()
				 using Resources.getResource( "binding:fred") as IHTTP //0
				 	returning to callback; 
		
		call myinter.interfunc() returns(i); //0
		
		call myinter.interfunc() returning to callback; //0
		call myinter.interfunc() returning to callback; //0
	end
	
	
	function callback(p1 int in)
	end
end


library RemoteFunctionCallTests
	

	i int;
	
	function srvFunc() returns (int)
	end
	
	function testRemoteCallsToService()
		//test remote call to the same service
		call myserv.srvfunc(); //1 The call statement must specify a "returning to" or "returns" function
		call myserv.srvfunc(); //1  The call statement must specify a "returning to" or "returns" function
		
		call myserv.srvfunc() //1 The specified using clause type 'string(12)' is not compatible with the expected type eglx.http.IHttp.
				using "binding:fred"  
					returning to callback; 
					
		call myserv.srvfunc() //1 The specified using clause type 'any' is not compatible with the expected type eglx.http.IHttp.
				 using Resources.getResource( "binding:fred") 
				 	returning to callback; 
		

		call myserv.srvfunc()
				 using Resources.getResource( "binding:fred") as IHTTP //0
				 	returning to callback; 
		
		call myserv.srvfunc() returns(i); //0
		
		call myserv.srvfunc() returning to callback; //0
		call myserv.srvfunc() returning to callback; //0
	end


	function testRemoteCallsToInterface()
		//test remote call to the same service
		call myinter.interfunc(); //1 The call statement must specify a "returning to" or "returns" function.
		call myinter.interfunc(); //1  The call statement must specify a "returning to" or "returns" function.
		
		call myinter.interfunc() //1 The specified using clause type 'string(12)' is not compatible with the expected type eglx.http.IHttp.
				using "binding:fred" 
					returning to callback; 
					
		call myinter.interfunc()//1 The specified using clause type 'any' is not compatible with the expected type eglx.http.IHttp.
				 using Resources.getResource( "binding:fred") 
				 	returning to callback; 
		

		call myinter.interfunc()
				 using Resources.getResource( "binding:fred") as IHTTP //0
				 	returning to callback; 
		
		call myinter.interfunc() returns(i); //0
		
		call myinter.interfunc() returning to callback; //0
		call myinter.interfunc() returning to callback; //0
	end
	
	
	function callback(p1 int in)
	end
end
