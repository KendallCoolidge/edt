package statements.sql;

externalType myEntity type Entity
	field1 string {@ID};
end
externalType nonEntity type Entity
	field1 string ;
end  
	
library sql
  
	a string;
	b int;
	
	ds SqlDataSource?;
	stmt SqlStatement?;
	rs SqlResultSet?;  
	myEntity myEntity; 
	nonEntity nonEntity;
	parent parent;
	child child;
	o orphan;
	ps SQLStatement?;
	basic basicRec;
	multi MultiTable;
	dict dictionary;
	array parent[];
	invalidArray string[];
	
	function duplicateClauses()
		//all statements in this function should have a single error 6510
		open rs from ds from ds;   //1
		open rs for myEntity from ds for myEntity; //1	
		open rs using a,b with stmt using b,a;	//1	
		open rs with #sql{stuff} with stmt from ds;  //1
		prepare ps from ds with #sql{} with expr; //1
		foreach (myEntity from rs from rs) end //1
		add parent to ds to rs; //1
		add parent to ds for parent for myEntity; //1
		get myEntity from rs from ds; //1
		get myEntity using a using b; //1
		get myEntity with #sql{} with a; //1
		execute from ds from ds; //1
		execute from ds with a with #sql{}; //1
		execute from ds using a using b; //1
		delete from ds from rs; //1
		delete parent from rs using a using b; //1
		delete parent from ds for a for b; //1
		delete parent from ds with a with #sql{}; //1
		replace parent to ds to rs; //1
		replace parent to ds for parent for parent; //1
		replace parent to ds with a with #sql{}; //1
		replace parent to ds using a using b; //1
	end
	
	function validateOpenTarget()
		//verify that the type of the target is a resultSet
		open rs from ds;  //0		
		open a from ds;  //1
		
		//verify that the type of the from clause is a dataSource
		open rs from a;  //1
		open rs from myEntity;  //1
		
		//validate that the with is either a sqlstmt or inline sql stmt 
		open rs with stmt;  //0
		open rs with #sql{stuff} from ds;  //0		
		open rs with a; //1
		
		//validate that if no FROM is specified, the WITH is specified with a sqlStmt expr
		open rs with #sql{stuff};  //1
		open rs using a,b;	//1
		
		//the FOR can be specified if no using or with is specified
		open rs using a,b from ds for myentity; //1 
		open rs with stmt for parent;  //1
		
		//the FOR must be an entity expr or an association expr
		open rs for myentity from ds; //0
		open rs for nonEntity from ds; //1
		open rs for parent from ds; //0
		open rs for child from ds; //1 no @Id
		open rs for child.parent from ds; //0
		open rs for a from ds;  //1
		open rs for parent.orphan from ds; //1 assoc. not supported yet
		open rs from ds into a ; //1
	end
	
	function validatePrepare()
		prepare ps from ds with #sql{insert into t (c1) values (?)}; //0
		
		// target must be an SQLStatement
		prepare ds from ds with #sql{insert into t (c1) values (?)}; //1
		
		prepare ps with #sql{insert into t (c1) values (?)}; //1 missing FROM
		
		prepare ps from ds; //1 missing WITH
		
		expr string;
		prepare ps from ds with expr; //0
		 
		// WITH expr must be STRING
		expr2 int;
		prepare ps from ds with expr2; //1
		
	end
	
	function validateForeach()
		foreach (a from rs) end //1 not in table type
		foreach (parent.id from ds) end //1 wrong data source type
		foreach (from rs) end //1 missing target
		foreach (parent.id from rs) end //0
		foreach (parent.id, child.name from rs) end //1 different parents
		foreach (parent.orphan from rs) end //1 association not yet supported
		foreach (parent.id, parent.id from rs) end //0
		foreach (parent from rs into a) end //1 INTO not allowed
	end
	
	function validateGetByKey()
		get myEntity from ds; //0
		get myEntity, myEntity from ds; //1 only 1 non-primitive expr allowed
		get myEntity from ds with #sql{}; //0
		get myEntity from rs with #sql{}; //1 must be sqldatasource
		get parent.id from ds; //0
		get parent.child from ds; //1 no @Id on child
		get parent from ds; //0
		get parent.child from ds using a; //0
		get basic from ds; //1 no @Id
		get basic from ds using a; //0
		get basic from ds with #sql{}; //0

		get dict from ds using a; //0
		get array from ds using a; //0
		get invalidArray from ds using a; //1
		get dict from ds into a; //1 INTO not allowed
	end
	
	function validateAdd()
		add myEntity to ds;//0 
		add myEntity, myEntity to ds;//1 
		add a to ds;//1
		add parent.id to ds;//0 
		add parent.id, child.name to ds;//1 
		add parent.id, parent.id to ds;//0
		add myEntity to ds for myEntity;//0 
		add myEntity to rs for myEntity;//1 no FOR when using result set
		add myEntity to ds for parent;//1 for type must match target type
		add parent.id to ds for a;//1 invalid FOR type
		add parent.id to ds for parent.orphan;//1 association not yet supported
		add parent.id to ds for parent;//0
		add parent.orphan to ds; //1 association not yet supported 
		add o, parent.orphan to ds; //1  
		add basic to ds; //0
		add multi to ds; //1 must be single table
	end
	
	function validateExecute()
		execute from ds; //0 
		execute from rs; //1
		execute from rs with ps; //0 (FROM ignored when WITH is sqlstatement)
		execute from rs with #sql{}; //1
		execute from rs with a; //1
		execute from ds with a using b; //0
		execute from ds using b; //0
		execute using b; //0
		execute with #sql{}; //0
	end
	 
	function validateDelete()
		delete from ds; //1 WITH required
		delete from ds with a for basic; //1 no FOR When no target
		delete from ds with #sql{}; //0
		delete from ds with a; //0
		delete from ds using a; //1 WITH required when no target and using sqldatasource
		delete from rs; //0
		delete from rs with a; //1 no WITH when no target and using sqlresultset
		delete from rs with #sql{}; //1 no WITH when no target and using sqlresultset
		delete from rs using a; //1 no USING when no target and using sqlresultset
		
		delete parent from ds for basic with #sql{}; //1 either FOR or WITH not both
		delete parent from ds for parent; //0
		delete parent from ds for myEntity; //1 FOR type must match target type
		delete multi from ds; //1 must be single table 
		delete parent from ds; //0
		delete parent.id from ds; //0 
		delete parent.child from ds; //1
		delete a from ds; //1
		delete parent.orphan from ds using a; //1 association not yet supported
		delete basic from ds; //1 when using sqldatasource and no USING or WITH, the target must have @Id
		delete basic from ds with a; //0 
		delete basic from ds with #sql{}; //0
		delete basic from ds using a; //0
		delete dict from ds using a; //0
		delete array from ds using a; //0
		delete invalidArray from ds using a; //1
		delete parent from ds for a; //1 FOR is not an entity
	end
	
	function validateReplace()
		replace parent to ds; //0
		replace parent to ds using a with b; //0
		replace parent to ds using a for parent; //1 no FOR 
		replace parent to ds with a for parent; //1 no FOR
		replace parent to ds with #sql{} for parent; //1 no FOR
		replace basic to ds; //1 need @Id when missing WITH
		replace basic to ds with a; //0
		replace basic to rs with a; //1 no USING or WITH for resultset
		replace basic to rs using a; //1 no USING or WITH for resultset
		replace a to ds; //1 target not data expr
		replace parent.id to ds; //0
		replace multi to ds; //1 no multiple tables
		replace dict to ds with a; //0
		replace array to ds with a; //0
		replace invalidArray to ds using a; //1
	end
end
