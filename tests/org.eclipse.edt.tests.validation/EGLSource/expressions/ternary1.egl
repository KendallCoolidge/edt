/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package expressions;

handler ternary1

	a any?;
	s string;
	nullableS string?;
	i int;
	b boolean;
	ba boolean[];
	myrec rec;
	d del1?;
	dec1 decimal;
	dec2 decimal(4,2);
	const constRec rec;

	function assignmentChecks()
		s = true ?? i : ba; //1 string and boolean[] are not compatible types in the expression s = ba
		s = true ?? ba : i; //1 string and boolean[] are not compatible types in the expression s = ba
		s = true ?? i : i; //0
		s = true
			?? (true ?? i : ba) //1 string and boolean[] are not compatible types in the expression s = ba
			: (true ?? ba : i); //1 string and boolean[] are not compatible types in the expression s = ba
		a = true ?? myrec : ba; //0
		a = true ?? doNotExist : ba; //1 doNotExist cannot be resolved.
		myrec = true
			?? getValue() //1 rec and int are not compatible types in the expression myrec = getValue()
			: getBoolean(); //1 rec and boolean are not compatible types in the expression myrec = getBoolean()
		ba = true ?? ba.appendElement(true) : ba :: true; //0
		d = true ?? d : f1; //0
		
		ba ::= true ?? ba[2] : ba :: true; //0
		ba ::= true
			?? i //1 boolean[] and int are not compatible types in the expression ba ::= i
			: s; //1 boolean[] and string are not compatible types in the expression ba ::= s
	end
	
	function funcArgChecks()
		setValueIn(true
			?? doNotExist //1 doNotExist cannot be resolved.
			: alsoNotExist); //1 alsoNotExist cannot be resolved.
		
		// No substrings allowed except for IN
		setValueIn(true ?? s[1:2] : s[1:2]); //0
		setValueOut(true
			?? s[1:2] //1 Substring access expressions are not valid as the target of a move or assignment, or as arguments to INOUT or OUT function parameters.
			: s[1:2]); //1 Substring access expressions are not valid as the target of a move or assignment, or as arguments to INOUT or OUT function parameters.
		setValueInout(true
			?? s[1:2] //1 Substring access expressions are not valid as the target of a move or assignment, or as arguments to INOUT or OUT function parameters.
			: s[1:2]); //1 Substring access expressions are not valid as the target of a move or assignment, or as arguments to INOUT or OUT function parameters.
		
		// Cannot pass null to non-nullable parms
		setValueInout(true
			?? null //1 Error in argument null in function invocation setValueInout. For parameters with the INOUT modifier, literals and literal expressions are not valid and argument constants are only valid if the parameter is also constant.
			: null); //1 Error in argument null in function invocation setValueInout. For parameters with the INOUT modifier, literals and literal expressions are not valid and argument constants are only valid if the parameter is also constant.
		setValueInNullable(true ?? null : null); //0
		
		// No set values as args
		setValueIn(true
			?? myrec{} //1
			: myrec{}); //1
		
		// Exprs that aren't names or literals require the IN modifier
		setValueIn(true ?? getValue() : i * 7); //0
		setValueOut(true
			?? getValue() //1 Error in argument getValue() in function invocation setValueOut. This type of argument requires that the parameter be defined with the IN modifier.
			: i * 7); //1  Error in argument i*7 in function invocation setValueOut. This type of argument requires that the parameter be defined with the IN modifier.
		setValueInout(true
			?? getValue() //1 Error in argument getValue() in function invocation setValueInout. This type of argument requires that the parameter be defined with the IN modifier.
			: i * 7); //1  Error in argument i*7 in function invocation setValueInout. This type of argument requires that the parameter be defined with the IN modifier.
		
		// Exprs that are literals or const require the IN modifier (except for const if the parm is inout and const, it's also allowed)
		setValueIn(true ?? 10 : constRec.i); //0
		setValueOut(true
			?? 10 //1 Error in argument 10 in function invocation setValueOut. Constants, literals and literal expressions are not valid for use with parameters defined with the OUT modifier.
			: constRec.i); //1 Error in argument constRec.i in function invocation setValueOut. Constants, literals and literal expressions are not valid for use with parameters defined with the OUT modifier.
		setValueInout(true
			?? 10 //1 Error in argument 10 in function invocation setValueInout. For parameters with the INOUT modifier, literals and literal expressions are not valid and argument constants are only valid if the parameter is also constant.
			: constRec.i); //1 Error in argument constRec.i in function invocation setValueInout. For parameters with the INOUT modifier, literals and literal expressions are not valid and argument constants are only valid if the parameter is also constant.
		setValueInoutConst(true
			?? 10 //1 Error in argument 10 in function invocation setValueInoutConst. For parameters with the INOUT modifier, literals and literal expressions are not valid and argument constants are only valid if the parameter is also constant.
			: constRec.i); //0
		
		// Checks for IN: arg can't be 'super', CAN be 'this', arg & parm must be assignment compatible
		setTernaryIn(true ?? this : this); //0
		setTernaryIn(true
			?? super //1 The expression "super" is not valid as a function argument.
			: super); //1 The expression "super" is not valid as a function argument.
		setStringIn(true ?? a : a); //0
		setArrayIn(true ?? a : a); //0
		setBooleanIn(true
			?? i //1 The argument i cannot be passed to the in or out parameter b of the function setBooleanIn. The types int and boolean are not assignment compatible.
			: i); //1 The argument i cannot be passed to the in or out parameter b of the function setBooleanIn. The types int and boolean are not assignment compatible.
		
		// Checks for OUT: arg can't be 'super' or 'this', arg & parm must be assignment compatible
		setTernaryOut(true
			?? this //1 The expression "this" is not valid for use with parameters defined with the INOUT or OUT modifier.
			: this); //1 The expression "this" is not valid for use with parameters defined with the INOUT or OUT modifier.
		setTernaryOut(true
			?? super //1 The expression "super" is not valid as a function argument.
			: super); //1 The expression "super" is not valid as a function argument.
		setDecimalOut1(true
			?? dec1 //0
			: dec2); //0
		setDecimalOut2(true
			?? dec1 //0
			: dec2); //0
		setStringOut(true ?? a : a); //0
		setArrayOut(true ?? a : a); //0
		setBooleanOut(true
			?? i //1 The argument i cannot be passed to the in or out parameter b of the function setBooleanOut. The types int and boolean are not assignment compatible.
			: i); //1 The argument i cannot be passed to the in or out parameter b of the function setBooleanOut. The types int and boolean are not assignment compatible.
		
		// Checks for INOUT: arg can't be 'super' or 'this', arg & parm are reference compatible, arg & parm nullability matches
		setTernaryInout(true
			?? this //1 The expression "this" is not valid for use with parameters defined with the INOUT or OUT modifier.
			: this); //1 The expression "this" is not valid for use with parameters defined with the INOUT or OUT modifier.
		setTernaryInout(true
			?? super //1 The expression "super" is not valid as a function argument.
			: super); //1 The expression "super" is not valid as a function argument.
		setStringInout(true
		 	?? s //0
		 	: nullableS); //1 The argument nullableS cannot be passed to the inOut parameter s of the function setStringInout. The types string? and string are not reference compatible.
	 	setStringInoutNullable(true
		 	?? s //1 The argument s cannot be passed to the inOut parameter s of the function setStringInoutNullable. The types string and string? are not reference compatible.
		 	: nullableS); //0
		 setStringInout(true
		 	?? ba //1 The argument ba cannot be passed to the inOut parameter s of the function setStringInout. The types boolean[] and string are not reference compatible.
		 	: ba); //1 The argument ba cannot be passed to the inOut parameter s of the function setStringInout. The types boolean[] and string are not reference compatible.
	end
	
	function returnChecks1() returns(string)
		if (true) return true ?? i : ba; end //1 The type boolean[] does not match the type string which the function returns.
		if (true) return true ?? ba : i; end //1 The type boolean[] does not match the type string which the function returns.
		if (true) return true ?? i : i; end //0
		if (true) return true
			?? (true ?? i : ba) //1 The type boolean[] does not match the type string which the function returns.
			: (true ?? ba : i) //1 The type boolean[] does not match the type string which the function returns.
			; end
	end
	
	function returnChecks2() returns(any)
		if (true) return true ?? myrec : ba; end //0
		if (true) return true ?? doNotExist : ba; end //1 doNotExist cannot be resolved.
	end
	
	function returnChecks3() returns(rec)
		if (true) return true
			?? getValue() //1 The type int does not match the type rec which the function returns.
			: getBoolean() //1 The type boolean does not match the type rec which the function returns.
			; end
	end
	
	function returnChecks4() returns(boolean[])
		if (true) return true ?? ba.appendElement(true) : ba :: true; end //0
	end
	
	function returnChecks5() returns(del1)
		return true ?? d : f1; //0
	end
	
	function asChecks()
		a = (true ?? i : ba) as string; //1 boolean[] and string are not compatible types in the expression ba as string
		a = (true ?? ba : i) as string; //1 boolean[] and string are not compatible types in the expression ba as string
		a = (true ?? i : i) as string; //0
		a = (true ?? myrec : ba) as any; //0
		a = (true ?? doNotExist : ba) as any; //1 doNotExist cannot be resolved.
		a = (true
			?? (true ?? i : ba) //1 boolean[] and string are not compatible types in the expression ba as string
			: (true ?? ba : i) //1 boolean[] and string are not compatible types in the expression ba as string
			) as string;
		a = (true
			?? getValue() //1 int and rec are not compatible types in the expression getValue() as rec
			: getBoolean() //1 boolean and rec are not compatible types in the expression getBoolean() as rec
			)as rec;
		a = (true
			?? ba.appendElement(true) //0
			: ba :: true //0
			)as boolean[];
		a = (true ?? d : f1) as del1; //0
	end
	
	function binaryChecks()
		a = ba :: (true ?? true : ba[1]); //0
		a = ba :: (true ?? true && false : ba :: true); //0
		a = ba :: (true ?? true ?? false : false : false); //0
		a = i * (true ?? s : i); //0
		a = b * (true ?? s : i); //2 No operation is defined for expressions b and s with the * operator in the expression b * s.|No operation is defined for expressions b and i with the * operator in the expression b * i.
		a = s + true ?? true : true; //0
		i = i * 76 - (true ?? 22 : i - 99) % (false ?? getValue() * 88 : i >> 2); //0
		a = ba :: (true ?? d : true); //1 boolean[] and del1 are not compatible types in the expression ba :: d
	end
	
	function forChecks()
		for (i from true ?? 10 : 20 to true ?? 10 : 20 by true ?? 10 : 20) end //0
		for (i from true ?? getValue() : getValue() to true ?? getValue() : getValue() by true ?? getValue() : getValue()) end //0
		for (i from true ?? true ?? getValue() : getValue() : true ?? getValue() : getValue() //0
			to true ?? true ?? getValue() : getValue() : true ?? getValue() : getValue() //0
			by true ?? true ?? getValue() : getValue() : true ?? getValue() : getValue()) end //0
		
		for (i from true
			?? getBoolean() //1 For statement start must be an integer literal, integer item or numeric expression of integers.
			: getBoolean() //1 For statement start must be an integer literal, integer item or numeric expression of integers.
			to true
			?? getBoolean() //1 For statement end must be an integer literal, integer item or numeric expression of integers.
			: getBoolean() //1 For statement end must be an integer literal, integer item or numeric expression of integers.
			by true
			?? getBoolean() //1 For statement delta must be an integer literal, integer item or numeric expression of integers.
			: getBoolean() //1 For statement delta must be an integer literal, integer item or numeric expression of integers.
			)
		end
		for (i from true
			?? true
				?? getBoolean() //1 For statement start must be an integer literal, integer item or numeric expression of integers.
				: getBoolean() //1 For statement start must be an integer literal, integer item or numeric expression of integers.
			: true
				?? getBoolean() //1 For statement start must be an integer literal, integer item or numeric expression of integers.
				: getBoolean() //1 For statement start must be an integer literal, integer item or numeric expression of integers.
			to true
				?? true
					?? getBoolean() //1 For statement end must be an integer literal, integer item or numeric expression of integers.
					: getBoolean() //1 For statement end must be an integer literal, integer item or numeric expression of integers.
				: true
					?? getBoolean() //1 For statement end must be an integer literal, integer item or numeric expression of integers.
					: getBoolean() //1 For statement end must be an integer literal, integer item or numeric expression of integers.
			by true
				?? true
					?? getBoolean() //1 For statement delta must be an integer literal, integer item or numeric expression of integers.
					: getBoolean() //1 For statement delta must be an integer literal, integer item or numeric expression of integers.
				: true
					?? getBoolean() //1 For statement delta must be an integer literal, integer item or numeric expression of integers.
					: getBoolean() //1 For statement delta must be an integer literal, integer item or numeric expression of integers.
			)
		end
	end
	
	function conditionChecks()
		a = true //0
			?? true : true;
		a = (1 >= 1) //0
			?? true : true;
		a = b //0
			?? true : true;
		a = ba[1] //0
			?? true : true;
		a = (true ?? false : true) //0
			?? true : true;
		a = getBoolean() //0
			?? true : true;
		
		a = doNotExist //1 doNotExist cannot be resolved.
			?? true : true;
		a = s //1 string and boolean are not compatible types in the expression s
			?? true : true;
		a = a //1 any and boolean are not compatible types in the expression a
			?? true : true;
		a = getValue() //1 int and boolean are not compatible types in the expression getValue()
			?? true : true;
		a = null //1 null and boolean are not compatible types in the expression null
			?? true : true;
	end
	
	function isaAsNewChecks()
		// Tests cases that used to fail in the parser
		a = new boolean ?? true : false; //0
		a = s isa string ?? true : false; //0
		a = b as boolean ?? true : false; //0
	end
	
	function getValue() returns(int) end
	function setValueIn(i int in) end
	function setValueInNullable(i int? in) end
	function setValueInout(i int inout) end
	function setValueInoutConst(i int const inout) end
	function setValueOut(i int out) end
	function getBoolean() returns(boolean) end
	function f1() end
	function setTernaryIn(t ternary1 in) end
	function setTernaryOut(t ternary1 out) end
	function setTernaryInout(t ternary1 inout) end
	function setDecimalOut1(d decimal out) end
	function setDecimalOut2(d decimal(4,2) out) end
	function setArrayIn(i int[] in) end
	function setArrayOut(i int[] out) end
	function setArrayInout(i int[] inout) end
	function setStringIn(s string in) end
	function setStringOut(s string out) end
	function setStringInout(s string inout) end
	function setStringInoutNullable(s string? inout) end
	function setBooleanIn(b boolean in) end
	function setBooleanOut(b boolean out) end
	function setBooleanInout(b boolean inout) end
end

record rec
	i int;
end

delegate del1() end