/*******************************************************************************
 * Copyright Â© 2012, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/

Program MyProj3 (pcb1 int) {@DLI { psb = psb, 					 
         handleHardDLIErrors = yes,
         pcbParms =/*["", "pcb1", "pcb2", "",""]*/[pcb1, pcb2] }	
         // when called from APPLA_valid pcb1 is pcbC1 and receives pcbA3 
         //							     pcb2 is pcbC2 and receives pcbA5
         // when called from APPLB_valid pcb1 is pcbC1 and receives pcbB4 
         //							     pcb2 is pcbC2 and receives pcbB1
         // this program cannot use pcbC3 or pcbC4 
  }
	 const catConstant string = "cat";
	function main()
		const dogConstant int = 5;
		course CourseX;
		coursePCB DB_PCBRecord;
		sqlRec sqlRec;
		sqlrec2 sqlrec;
		courses CourseX[]; 
		sqlrecs sqlrec[];
		indxrec IndxRecord;
		mqrec MQRec;
		relrec relrecord;
		srec	srecord;
		name string;
		course2 CourseX;
		sqlflex sqlRecFLEX;
		a,b,c int;
		d,e,f int;
		prepare preparestatementid;

		get course usingPCB pcb11;// 1 The usingPCB item must be defined in the program PSB 
		get sqlrec singlerow usingkeys catConstant,dogConstant;// 2 catConstant cannot be resolved as an item or the resolved item has the wrong type. It cannot be a constant | dogConstant cannot be resolved as an item or the resolved item has the wrong type. It cannot be a constant
		get sqlrec singlerow usingkeys name[5:9];//  1 Substring expressions are not valid in this statement location
		get sqlrecs  usingkeys catConstant,dogConstant;// 2 catConstant cannot be resolved as an item or the resolved item has the wrong type. It cannot be a constant | dogConstant cannot be resolved as an item or the resolved item has the wrong type. It cannot be a constant
		get sqlrecs  usingkeys name[5:9];//  1 Substring expressions are not valid in this statement location		
		get sqlrec with  preparestatementid using catConstant,dogConstant;// 2 catConstant cannot be resolved as an item or the resolved item has the wrong type. It cannot be a constant | dogConstant cannot be resolved as an item or the resolved item has the wrong type. It cannot be a constant
		get sqlrec with  preparestatementid using name[5:9];//  1 Substring expressions are not valid in this statement location
		get sqlrec with  preparestatementid into catConstant,dogConstant;// 2 catConstant cannot be resolved as an item or a container. It cannot be a constant | dogConstant cannot be resolved as an item or a container. It cannot be a constant
		get sqlrec with  preparestatementid into name[5:9];//  1 Substring expressions are not valid in this statement location


		get sqlrec  forupdate forupdate  with #sql{select a, b , c forupdate from xxxx for update of yyy};// 1 	The GET SQL I/O statement does not allow the FORUPDATE option to be specified more than once			{6510, EGLMESSAGE_DUPE_OPTION}
		get sqlrec singlerow  singlerow  into a , b ,c;// 1  The GET SQL I/O statement does not allow the SINGLEROW option to be specified more than once 		{6510, EGLMESSAGE_DUPE_OPTION}
		get sqlrec singlerow with #sql{select a, b , c from xxxx} into a , b ,c into a , b ,c;// 1 The GET SQL I/O statement does not allow the INTO clause to be specified more than once		 {6511, EGLMESSAGE_DUPE_CLAUSE}
		get sqlrec forupdate with preparestatementID using d using e, f into a , b ,c  usingkeys d, e, f;// 1 The GET SQL I/O statement does not allow the USING clause to be specified more than once		 {6511, EGLMESSAGE_DUPE_CLAUSE}
		get sqlrec with #sql{select a, b , c from xxxx} usingkeys d usingkeys e, f;// 1 The GET SQL I/O statement does not allow the USINGKEYS clause to be specified more than once	 {6511, EGLMESSAGE_DUPE_CLAUSE}
		get sqlrec forupdate with preparestatementID with preparestatementID using d,e,f into a , b ,c  usingkeys d, e, f;// 1  The GET SQL I/O statement does not allow the prepared statement reference to be specified more than once		{6513, EGLMESSAGE_DUPE_PREPARED_STMT_REFERENCE}
		get sqlrec with #sql{select a, b , c from xxxx} with #sql{select a, b , c from xxxx} into a , b ,c;//1 The GET SQL I/O statement does not allow the inline SQL statement to be specified more than once		{6512, EGLMESSAGE_DUPE_INLINE_SQL}
		get sqlrec forupdate singlerow;// 1 The GET SQL I/O statement does not allow both the forUpdate option and the singleRow option		{6508, EGLMESSAGE_CANT_HAVE_BOTH_FORUPDATE_SINGLEROW}
		get sqlrec with preparestatementID singlerow;//  The GET SQL I/O statement does not allow both the singleRow option and a prepared statement identifier		{6539, EGLMESSAGE_CANT_HAVE_BOTH_SINGLEROW_PREPARED_STMT_ID}
		get sqlrec with #sql{select a, b , c from xxxx}with preparestatementID;//1 The GET SQL I/O statement does not allow both an inline SQL statement and a prepared statement reference		{6509, EGLMESSAGE_CANT_HAVE_BOTH_INLINE_SQL_PREPARED_STMT_REF}
		get forupdate with preparestatementID	into a , b ,c;// 1 The GET SQL I/O statement does not allow specification of the forUpdate option unless an SQL record is provided	{6515, EGLMESSAGE_CANT_HAVE_FORUPDATE_WITHOUT_SQLRECORD}
		get with preparestatementID	into a , b ,c usingkeys d, e, f;// 1 The GET SQL I/O statement does not allow specification of the usingKeys option unless an SQL record is provided		{6530, EGLMESSAGE_CANT_HAVE_USINGKEYS_WITHOUT_SQLRECORD}
		get singlerow with #sql{select a, b , c from xxxx};// 1 The GET SQL I/O statement requires that the into clause and either an inline SQL statement or a prepared statement reference be specified when the SQL record object is omitted		{6516, EGLMESSAGE_MUST_HAVE_INTO_AND_SQL_INFO}
		get with preparestatementID	;// 1 The GET SQL I/O statement requires that the into clause and either an inline SQL statement or a prepared statement reference be specified when the SQL record object is omitted		{6516, EGLMESSAGE_MUST_HAVE_INTO_AND_SQL_INFO}
		get sqlrec with #sql{ } into a , b ,c;//1 The GET SQL statement cannot be empty		 {6500, EGLMESSAGE_EMPTY_SQL_STRING}
		get indxrec singlerow;// 1 The singleRow clause is only valid when the target record is an SQL record variable 		 {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
		get indxrec usingkeys d, e, f;// 1 	The usingKeys clause is only valid when the target record is an SQL record variable			 {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
		get indxrec with #sql{select a, b , c from xxxx}; // 1  The with #sql clause is only valid when the target record is an SQL record variable		{6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
		get indxrec with preparestatementID;// 1  The with clause is only valid when the target record is an SQL record variable		 {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
		get indxrec into a , b ,c;// 1 The into clause is only valid when the target record is an SQL record variable		{6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
		get indxrec using d;// 1 The using clause is only valid when the target record is an SQL record variable		{6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
		get sqlrecs forupdate;// 1  The forUpdate clause is not allowed when the target is an array
		get a;// 1 Invalid target a. The target of a get by key statement must be an SQL, indexed, relative, or DL/I segment record variable or an SQL record array		{6645, EGLMESSAGE_GET_BY_KEY_STATEMENT_TARGET_NOT_RECORD}
		
		get course;// 0
		get course usingPCB pcb1;// 0
		get indxrec;// 0
		get indxrec forupdate;// 0
		get relrec;// 0
		get relrec forupdate;//0
		
		get sqlrec;// 0
		get sqlrec singlerow;// 0
		get sqlrec singlerow with #sql{select a, b , c from xxxx};// 0
		
		get sqlrec into a , b ,c;// 0
		get sqlrec singlerow into a , b ,c;// 0
		get sqlrec singlerow with #sql{select a, b , c from xxxx} into a , b ,c;// 0
		
		get sqlrec usingkeys d, e, f;// 0
		get sqlrec singlerow usingkeys d, e, f;// 0
		get sqlrec singlerow with #sql{select a, b , c from xxxx} usingkeys d, e, f;// 0
		get sqlrec into a , b ,c usingkeys d, e, f;// 0
		get sqlrec singlerow into a , b ,c usingkeys d, e, f;// 0
		get sqlrec singlerow with #sql{select a, b , c from xxxx} into a , b ,c usingkeys d, e, f;// 0
		
		get sqlrec;//0
		get sqlrec forupdate;// 0
		get sqlrec forupdate resultsetid;//0
		
		get sqlrec with #sql{select a, b , c from xxxx};//0
		get sqlrec  forupdate with #sql{select a, b , c forupdate from xxxx for update of yyy};// 0
		get sqlrec forupdate resultsetid with #sql{select a, b , c from xxxx for update of yyy};//0
		
		get sqlrec with preparestatementID;//0
		get sqlrec forupdate with preparestatementID;// 0
		get sqlrec forupdate resultsetid with preparestatementID;//0
		
		get sqlrec with preparestatementID using d,e,f;//0
		get sqlrec forupdate with preparestatementID using d,e,f;// 0
		get sqlrec forupdate resultsetid with preparestatementID using d,e,f;//0
		
		get sqlrec usingkeys d, e, f;//0
		get sqlrec forupdate usingkeys d, e, f;// 0
		get sqlrec forupdate resultsetid usingkeys d, e, f;//0
		
		get sqlrec with #sql{select a, b , c from xxxx} usingkeys d, e, f;//0
		get sqlrec forupdate with #sql{select a, b , c from xxxx for update of yyy} ;// 0
		get sqlrec forupdate resultsetid with #sql{select a, b , c from xxxx for update of yyy}usingkeys d, e, f;//0
		
		get sqlrec with preparestatementID usingkeys d, e, f;//0
		get sqlrec forupdate with preparestatementID usingkeys d, e, f;// 0
		get sqlrec forupdate resultsetid with preparestatementID usingkeys d, e, f;//0
		
		get sqlrec with preparestatementID using d,e,f usingkeys d, e, f;//0
		get sqlrec forupdate with preparestatementID using d,e,f usingkeys d, e, f;// 0
		get sqlrec forupdate resultsetid with preparestatementID using d,e,f usingkeys d, e, f;//0
		
		
		
		get sqlrec into a , b ,c;//0
		get sqlrec forupdate into a , b ,c;// 0
		get sqlrec forupdate resultsetid into a , b ,c;//0
		
		get sqlrec with #sql{select a, b , c from xxxx} into a , b ,c;//0
		get sqlrec forupdate with #sql{select a, b , c from xxxx for update of yyy} into a , b ,c;// 0
		get sqlrec forupdate resultsetid with #sql{select a, b , c from xxxx for update of yyy} into a , b ,c;//0
		
		get sqlrec with preparestatementID into a , b ,c;//0
		get sqlrec forupdate with preparestatementID into a , b ,c;// 0
		get sqlrec forupdate resultsetid with preparestatementID into a , b ,c;//0
		
		get sqlrec with preparestatementID using d,e,f into a , b ,c;//0
		get sqlrec forupdate with preparestatementID using d,e,f into a , b ,c;// 0
		get sqlrec forupdate resultsetid with preparestatementID using d,e,f into a , b ,c;//0
		
		get sqlrec into a , b ,c  usingkeys d, e, f;//0
		get sqlrec forupdate into a , b ,c  usingkeys d, e, f;// 0
		get sqlrec forupdate resultsetid into a , b ,c  usingkeys d, e, f;//0
		
		get sqlrec with #sql{select a, b , c from xxxx} into a , b ,c  usingkeys d, e, f;//0
		get sqlrec forupdate with #sql{select a, b , c from xxxx for update of yyy} into a , b ,c  usingkeys d, e, f;// 0
		get sqlrec forupdate resultsetid with #sql{select a, b , c from xxxx for update of yyy} into a , b ,c  usingkeys d, e, f;//0
		
		get sqlrec with preparestatementID into a , b ,c  usingkeys d, e, f;//0
		get sqlrec forupdate with preparestatementID into a , b ,c  usingkeys d, e, f;// 0
		get sqlrec forupdate resultsetid with preparestatementID into a , b ,c  usingkeys d, e, f;//0
		
		get sqlrec with preparestatementID using d,e,f into a , b ,c  usingkeys d, e, f;//0
		get sqlrec forupdate with preparestatementID using d,e,f into a , b ,c  usingkeys d, e, f;// 0
		get sqlrec forupdate resultsetid with preparestatementID using d,e,f into a , b ,c  usingkeys d, e, f;//0
		
		get with #sql{select a, b , c from xxxx} into a , b ,c;// 0
		get singlerow with #sql{select a, b , c from xxxx} into a , b ,c;// 0
		get with preparestatementID	into a , b ,c;// 0
		get with preparestatementID	using d,e,f into a , b ,c;// 0

		get sqlrecs;// 0
		get sqlrecs with #sql{select a, b , c from xxxx};// 0
		get sqlrecs usingkeys d, e, f;// 0
		get sqlrecs with #sql{select a, b , c from xxxx} usingkeys d, e, f;// 0
		
	end
end

Program My2Proj  
	 
	function main()
		course CourseX;
		course2 CourseX;
		coursePCB DB_PCBRecord;
		courses CourseX[]; 

	get course;// 1 DL/I I/O is not allowed unless the program specifies the DLI and PSB properties	{7903,EGLMESSAGE_DLI_PROGRAM_MUST_HAVE_DLI

	end
end

Library MyLib
function addfunc ()
		course CourseX;
		coursePCB DB_PCBRecord;
		courses CourseX[]; 

		get course;// 1 DL/I I/O is not allowed unless the program specifies the DLI and PSB properties {7903}
end
end

Record CourseX type DLISegment end
Record sqlRec type sqlRecord
	10 item1X int;
end

Record sqlRecFLEX type sqlRecord
	item1X int;
end


Record IndxRecord type indexedrecord { filename = "myfile",keyitem = "item1"}
	10 itemX int;
end

record MQRec type MQRecord { queuename = "www"}
10 itemX int;
end

record relrecord type relativerecord { filename = "myfile",keyitem = "item1"}
10 itemX int;
end

record srecord type serialrecord{ filename = "myfile"}
10 itemX int;
end


Program MyProj {@DLI{}}
	recVar sqlRecDef;
	a int;
	student Student;
	students Student[];
	course Course;
	
	function main()	
		prepare prepareStmtID;
		
		get recVar with prepareStmtID;                   // 0
		get recVar singleRow with #sql{select c from d}; // 0
		get with prepareStmtID into a;                   // 0
		get singlerow with #sql{select e from f} into a; // 0
		
		get recVar singleRow with prepareStmtID;         // 1
		get singlerow with prepareStmtID into a;         // 1
		
		get student; 									 //0
		get student forUpdate;							 //0
		
		loc char(12) = "ABCDEFG";
		get student with #dli{ GU COURSE OFFERING (LOCATION=:loc) STUDENT }; //0
		get student forUpdate with #dli{ GHU COURSE OFFERING (LOCATION=:loc) STUDENT }; //0		
		
		get student, course with #dli{ GU STUDENT*D COURSE*D }; //0
		get student, recVar;// 1 When multiple targets are specified on an add or get statement, each must be a single DL/I segment record variable 		{7869,EGLMESSAGE_MULTIPLE_TARGETS_MUST_ALL_BE_DLISEGMENT_SCALARS}
		
		get students with #dli{ GU COURSE OFFERING (LOCATION=:loc) STUDENT GN STUDENT }; //0
	end

end

Record sqlRecDef type sqlRecord end
Record Student type DLISegment end
Record Course type DLISegment end

// checkGetByKeyClauseOrder:
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 The {0} SQL I/O statement has clauses that are out of order. {1} must appear before the {2} clause. {6503, EGLMESSAGE_SQL_CLAUSES_OUT_OF_ORDER}
// 1 When the FOR UPDATE OF clause is specified for a {0} SQL I/O statement it must be the last clause. {6517, EGLMESSAGE_FOR_UPDATE_OF_MUST_BE_LAST}

// checkGetByKeyClauses:
// 1 The {0} SQL I/O statement requires the {1} clause, which is missing. {6501, EGLMESSAGE_REQUIRED_SQL_CLAUSE_MISSING}
// 1 The {0} SQL I/O statement requires the {1} clause, which is missing. {6501, EGLMESSAGE_REQUIRED_SQL_CLAUSE_MISSING}
// 1 The {0} SQL I/O statement requires the {1} clause, which is missing. {6501, EGLMESSAGE_REQUIRED_SQL_CLAUSE_MISSING}

// checkGetByKeyExtraDupeClauses:
// 1 The {0} SQL I/O statement allows only one {1} clause. {6506, EGLMESSAGE_SQL_CLAUSES_DUPLICATED}
// 1 The {0} SQL I/O statement does not allow the {1} clause. {6507, EGLMESSAGE_SQL_CLAUSE_UNSUPPORTED}


// validate (1):
// 1 The {1} clause is only valid when the target record is an SQL record variable. {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
// 1 The {1} clause is only valid when the target record is an SQL record variable. {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
// 1 The {1} clause is only valid when the target record is an SQL record variable. {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
// 1 The {1} clause is only valid when the target record is an SQL record variable. {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
// 1 The {1} clause is only valid when the target record is an SQL record variable. {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
// 1 The {1} clause is only valid when the target record is an SQL record variable. {6641, EGLMESSAGE_INVALID_CLAUSE_FOR_NON_SQL_TARGET}
// 1 Invalid target {1}. The target of a get by key statement must be an SQL, indexed, or relative record variable or an SQL record array. {6645, EGLMESSAGE_GET_BY_KEY_STATEMENT_TARGET_NOT_RECORD}

Program pgm2 {allowunqualifieditemreferences = yes}
	function main()
		// The INTO clause will be allowed for a get statement where the target
		// is an SQL record array. When the INTO clause is specified for this
		// case, the elements of the clause must reference a data item within
		// the target SQL Record type.
		
		sqlRecAry sqlRecDef2[];
		otherSqlRec1 sqlRecDef2;
		otherSqlRecXX sqlRecDef2;
		otherSqlRec2 sqlRecDef3;
		get sqlRecAry into otherSqlRecXX.item1Z;// 1
		get sqlRecAry into sqlRecAry[1].item1Z;// 0
		
		get sqlRecAry into sqlRecAry[1].item1Z, sqlRecAry[1].item2Z, sqlRecAry[1].item2Z.item2aZ;	// 0
		get sqlRecAry into otherSqlRec1.item1Z, otherSqlRec1.item2Z.item2aZ;		// 2 Invalid into item otherSqlRec1.item1Z. Items in the into clause must be contained in the target record when the target of the get statement is an SQL record array | Invalid into item otherSqlRec1.item2Z.item2aZ. Items in the into clause must be contained in the target record when the target of the get statement is an SQL record array
		get sqlRecAry into otherSqlRec2.item3Z;		// 1 Invalid into item otherSqlRec2.item3Z. Items in the into clause must be contained in the target record when the target of the get statement is an SQL record array.
		
		get sqlRecAry into item1Z, item2Z, sqlRecAry[1].item2Z.item2aZ;	// 0
		get sqlRecAry into item1Z, otherSqlRec1.item2Z.item2aZ;		// 1 Invalid into item otherSqlRec1.item2Z.item2aZ. Items in the into clause must be contained in the target record when the target of the get statement is an SQL record array 
		get sqlRecAry into otherSqlRec2.item3Z;		// 1 Invalid into item otherSqlRec2.item3Z. Items in the into clause must be contained in the target record when the target of the get statement is an SQL record array.
		get sqlRecAry into item3Z;		// 1 Invalid into item item3Z. Items in the into clause must be contained in the target record when the target of the get statement is an SQL record array.
		get sqlRecAry into item2Z.item2aZ; // 1
	end
end

Record sqlRecDef2 type sqlRecord
	10 item1Z int;
	10 item2Z int;
		15 item2aZ int;
end

Record sqlRecDef3 type sqlRecord
	10 item3Z int;
end


