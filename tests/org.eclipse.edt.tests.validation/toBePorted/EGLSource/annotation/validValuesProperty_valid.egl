/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
// NO_ERROR
// valid values property valid test case
// Paul R. Hoffman
// 10/28/2004

Program validValuesProperty_valid
	function main()
	end
end

FormGroup ValidValueFormGroup 
	Form ValidValuesForm type TextForm 
		{formSize = [15,31]} 
	 	f1 validCharRange { position = [1,1] };
	 	f2 validCharValues { position = [2,1] }; 
	 	f3 validCharRangesAndValues { position = [3,1] }; 
	 	f4 validNumericRange { position = [4,1] };
	 	f5 validNumericValues { position = [5,1] }; 
	 	f6 validNumericRangesAndValues { position = [6,1] }; 
	 	f_validCharRange char(30) { position = [7,1],  
	 		validValues = [[ "x", "y" ]]  
			} 
		;
		f_validPrimitiveCharValues char(30) { position = [8,1], 
			validValues = [ "x", "z" ] 
			} 
		;
		f_validTypdefCharValues validCharRange { position = [9,1], 
			validValues = [ "x", "z" ] 
			} 
		;
		f_validCharRangesAndValues char(30) { position = [10,1], 
			validValues = [[ "x", "z" ], "c", "b", "a", ["1", "3" ]] 
			} 
		;
		f_validNumericRange money { position = [11,1], 
			validValues = [[ -10.5, 10.5 ]] 
			} 
		;
		f_validNumericValues float { position = [12,1], 
			validValues = [ 10, 4.5E3, -5 ] 
			} 
		;
		f_validNumericRangesAndValues int { position = [13,1], 
			validValues = [[ 100, 200 ], 500, 200, 700, [-200, -100 ]] 
			} 
		;
		
		f_validnumericRangeCheck num(5,3) { position = [15,1], 
			validValues = [[ -1.55, 1.55 ]]} 
		;  
			
			
		f_validnumericValidValuesCheck decimal(18,5)  { position = [14,1],
			validValues = [[ -1.55, 1.55 ], [ 1000, 2000 ], 100, 200, 300 ]} 
		; 
	end
end

Record validValuesConsoleForm type ConsoleForm { formsize=[10,55] }
  	f1 consoleField { fieldLen=10,  name="f1", dataType="validCharRange", position = [1,1] };
 	f2 consoleField { fieldLen=10,  name="f2", dataType="validCharValues", position = [2,1] }; 
 	f3 consoleField { fieldLen=10,  name="f3", dataType="validCharRangesAndValues", position = [3,1] }; 
 	f4 consoleField { fieldLen=10,  name="f4", dataType="validNumericRange", position = [4,1] };
 	f5 consoleField { fieldLen=10,  name="f5", dataType="validNumericValues", position = [5,1] }; 
 	f6 consoleField { fieldLen=10,  name="f6", dataType="validNumericRangesAndValues", position = [6,1] }; 
 	f_validCharRange consoleField { fieldLen=10,  dataType="char(30)", position = [7,1],  
 		validValues = [[ "x", "y" ]]  
		} 
	;
	f_validCharValues consoleField { fieldLen=10,  dataType="char(30)", position = [8,1], 
		validValues = [ "x", "z" ] 
		} 
	;
	f_validCharRangesAndValues consoleField { fieldLen=10,  dataType="char(30)", position = [9,1], 
		validValues = [[ "x", "z" ], "c", "b", "a", ["1", "3" ]] 
		} 
	;
	f_validNumericRange consoleField { fieldLen=10,  dataType="money", position = [10,1], 
		validValues = [[ -10.5, 10.5 ]] 
		} 
	;
	f_validNumericValues consoleField { fieldLen=10,  dataType="float", position = [11,1], 
		validValues = [ 10, 4.5E3, -5 ] 
		} 
	;
	f_validNumericRangesAndValues consoleField { fieldLen=10,  dataType="int", position = [12,1], 
		validValues = [[ 100, 200 ], 500, 200, 700, [-200, -100 ]] 
		} 
	;
end



handler ValidValuesPage type JSFHandler 
 	f_validCharRange char(30) {  
 		validValues = [[ "x", "y" ]]  
		} 
	;
	f_validCharValues char(30) { 
		validValues = [ "x", "z" ] 
		} 
	;
	f_validCharRangesAndValues char(30) { 
		validValues = [[ "x", "z" ], "c", "b", "a", ["1", "3" ]] 
		} 
	;
	f_validNumericRange money { 
		validValues = [[ -10.5, 10.5 ]] 
		} 
	;
	f_validNumericValues float { 
		validValues = [ 10, 4.5E3, -5 ] 
		} 
	;
	f_validNumericRangesAndValues int { 
		validValues = [[ 100, 200 ], 500, 200, 700, [-200, -100 ]] 
		} 
	;
end
	
DataItem validCharRange char(30) { 
 	validValues = [[ "x", "y" ]] 
	} 
end
DataItem validCharValues char(30) { 
	validValues = [ "x", "z" ] 
	} 
end
DataItem validCharRangesAndValues char(30) { 
	validValues = [[ "x", "z" ], "c", "b", "a", ["1", "3" ]] 
	} 
end
DataItem validNumericRange money { 
	validValues = [[ -10.5, 10.5 ]] 
	} 
end
DataItem validNumericValues float { 
	validValues = [ 10, 4.5E3, -5 ] 
	} 
end
DataItem validNumericRangesAndValues int { 
	validValues = [[ 100, 200 ], 500, 200, 700, [-200, -100 ]] 
	} 
end
