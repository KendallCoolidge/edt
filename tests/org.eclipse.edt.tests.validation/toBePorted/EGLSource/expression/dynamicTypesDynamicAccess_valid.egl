/*******************************************************************************
 * Copyright Â© 2012, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
// NO_ERROR

// Note that the valid test cases for accessing dynamic types are in 
// the collections and the any test cases

Record flexrecd1 type basicrecord
	item1a char(4);
	item1b flexrecd2;
	item1c string;
	item1d flexrecd3;
	embed flexrecd4;
end
Record flexrecd2 type basicrecord
	item2a bin(9,4);
	item2b string;
	item2c blob;
	
end
record flexrecd3 type basicrecord
	item3a flexrecd2;
	item3b any;
	item3c dictionary;
end
record flexrecd4 type basicrecord
	item4a Dictionary {
			ordering = ByInsertion,
			id=0001, 
			lastname="Wilson",
			firstName="Tim",
			salary=50000,
			birthday="021959" };
	item4b fixedrecd1;
end
record flexrecdwitharrays type basicrecord
	flexarray flexrecd2 [];
end

record fixedrecd1 type basicrecord
	10 fixeditem1 int;
end

Record fixedrecdoccurs type basicrecord
	10 level10 [3];
		15 level15 char(4) [2];
	
end
// validate dynamic access at multiple levels
program mydynamicpgm
	myflex1 flexrecd1;
	myflexarray flexrecd1 [];
	arrayofarrays flexrecd1 [2][2][3][4][5][6][7];
	arraywitharray flexrecdwitharrays [3];
	arraywithoccurs fixedrecdoccurs [4];
	name1, name2, name3 String;
	index int;
	function main()
			// these are all the same, a typedef to a flexible record is involved
			myflex1.item1b.item2b = "abc";         
			myflex1["item1b"]["item2b"] = "abc";
			myflex1.item1b["item2b"] = "abc";
			
			// these are all the same, a typedef to a dataitem and a dictionary are involved
			myflex1.item4a.salary = 75000;			
			myflex1.item4a["salary"] = 75000; 
			myflex1["item4a"]["salary"] = 75000;
			
			// don't fuss about things in the dictionary that
			// can't be resolved because you can't really tell that until runtime
			myflex1.item4a["newsalary"] = 75000; 
			
			// these are all the same, a typedef to a fixed record is involved
			myflex1.item4b.fixeditem1 = 15;
			myflex1["item4b"]["fixeditem1"] = 15;
			
			// these are all the same, a typedef to a flexible record which typedefs to another flexible record is involved 
			myflex1.item1d.item3a.item2a = 10;     
			myflex1.item1d.item3a["item2a"] = 10; 
			myflex1.item1d["item3a"]["item2a"] = 10; 
			myflex1["item1d"]["item3a"]["item2a"] = 10;			
			
			// now mix in variables, these are all the same as the previous set
			name1 = "item1d";
			name2 = "item3a";
			name3 = "item2a";	
			myflex1[name1][name2][name3] = 10;
			myflex1[name1]["item3a"][name3] = 10;	
			
			// now mix in arrays
			myflexarray[2].item1d["item3a"]["item2a"] = 10; 
			myflexarray[3][name1]["item3a"][name3] = 10;	
			myflexarray[index][name1]["item3a"][name3] = 10;
			arraywitharray[2].flexarray[1].item2a = 2.1;

			// looks like too many dimensions but it isn't:
			arrayofarrays[1][2][3][4][5][6][7][name3] = 2.1;

			// don't fuss because you can't know what the value of name1 is at save time
			myflexarray[3][name1][2]["item3a"][name3] = 10;

			// now arrays of records with multiply occurring items
			arraywithoccurs[1].level10[3].level15[2] = "abcd";
			arraywithoccurs[1].level10.level15[3,2] = "abcd";			
			arraywithoccurs[1].level10.level15[3][2] = "abcd";			

			myflexarray[1][name3][2][3][4][5][6][7] = 2.1;
			
			myDict dictionary;
			myDict.char1 = "abc";
			if ( (myDict.record1.char1 as char(1))[4:6] + myDict.record1.string2 as string + " GHI" + " " + myDict.record1.string1 as string != "DEF GHI XYZ" )
			end
		end
		
		function main2()
			rec1 NullableSQLRecord;
			array1 NullableSQLRecord[];
			anInt int;
			intArray int[];
			myDict Dictionary;
			
			rec1.aString = "ABC";
			myDict.recArray = array1;
		end
		
		function main3()
			anInt int;
			intArray int[];
			myDict Dictionary;
			
			myDict.array = intArray;
			anInt = myDict.intArray[1] as int;
		end
end

Record NullableSQLRecord type SQLRecord
	aString string;
end

Program consoleUIPgm
	function main()
		rec consoleFormRec;
		
		rec.field1["abc"] = 5;
	end
end

Record consoleFormRec type consoleForm {formSize = [20,20]}
	field1 consoleField {fieldLen = 14, position=[1,1]};
end
