package api.eglx_lang;


import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/** @test
  * @name Edttimestamp010
  * @title Edttimestamp001 - runParameterFunction
  * @description testing use of timestamp as a parameter
  * @testcases runParameterFunction01 - runParameterFunction4
  * @sources Edttimestamp010.egl
  * @keywords timestamp, functions, parameter
 **/
library ETimestamp010 {}

	// Constant Declarations
	
	const febNonLeap timestamp("yyyyMMddHHmmss") = "2011-02-28-10-55-30";

	const marFirst timestamp("yyyyMMddHHmmss") = "2011-03-01-10-55-30";

	
	// Variable Declarations
	vartimestamp timestamp?;
	
	function runParameterFunction01(){@Test}
		vartimestamp = febNonLeap;
		passValueAsIn(vartimestamp);
		LogResult.asserttimestampEqual("timestamp passed as in parameter", febNonLeap, vartimestamp);

	end
	
	function runParameterFunction02(){@Test}
		vartimestamp = febNonLeap;
		noNullVarTimestamp Timestamp = vartimestamp;
		passValueAsInOut(noNullVarTimestamp);
		vartimestamp = noNullVarTimestamp;
		LogResult.asserttimestampEqual("timestamp passed as inout parameter", marFirst, vartimestamp);

	end
	
	function runParameterFunction03(){@Test}
		vartimestamp = febNonLeap;
		passValueAsOut(vartimestamp);
		LogResult.asserttimestampEqual("timestamp returned as out parameter", marFirst, vartimestamp);

	end
	
	function runParameterFunction04(){@Test}
		vartimestamp = febNonLeap;
		vartimestamp = returnAtimestampValue();
		LogResult.asserttimestampEqual("timestamp returned as out parameter", marFirst, vartimestamp);

	end
	
	
	
	function passValueAsIn(intimestamp timestamp in)
		intimestamp = marFirst;
	end
	
	function passValueAsInOut(intimestamp timestamp inout)
		intimestamp = marFirst;
	end
	
	function passValueAsOut(outtimestamp timestamp out)
		outtimestamp = marFirst;
	end
	
	function returnAtimestampValue() returns (timestamp)
		return (marFirst);
	end
	
	function passNullableValueAsIn(intimestamp timestamp? in)
		intimestamp = marFirst;
	end
	
	function passNullableValueAsInOut(intimestamp timestamp? inout)
		intimestamp = marFirst;
	end
	
	function passNullableValueAsOut(outtimestamp timestamp? out)
		outtimestamp = marFirst;
	end
	
	function returnANullabletimestampValue() returns (timestamp?)
		return (marFirst);
	end
end