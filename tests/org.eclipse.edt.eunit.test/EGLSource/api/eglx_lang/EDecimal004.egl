package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;
import eglx.java.JavaObjectException;


/** @test
  * @name EDecimal004
  * @title EDecimal004 - runArithmeticFunction
  * @description testing decimal arithmetic opertations and expressions
  * @testcases runArithmeticFunction01 - runArithmeticFunction19
  * @sources EDecimal004.egl
  * @keywords decimal, operations, expressions
 **/
library EDecimal004 {}
	
	intActual decimal = 0.0;
	intExpect decimal = 0.0;
	variation string;

	function runArithmeticFunction01(){@Test}	
		variation = "operation + with literals";
		intActual = 375.75 + 5.5;
		intExpect = 381.25;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction02(){@Test}	
		variation = "operation + with negative literals";
		intActual = 375.75 + -5.5;
		intExpect = 370.25;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction03(){@Test}	
		variation = "operation - with literals";
		intActual = 375.75 - 5.5;
		intExpect = 370.25;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction04(){@Test}	
		variation = "operation - with negative literals";
		intActual = 375.75 - -5.5;
		intExpect = 381.25;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction05(){@Test}	
		variation = "operation * with literals";
		intActual = 111.11 * 5.5;
		intExpect = 611.105;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction06(){@Test}	
		variation = "operation * with negative literals";
		intActual = 111.11 * -5.5;
		intExpect = -611.105;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction07(){@Test}	
		variation = "operation / with literals";
		intActual = 375.75 / 5;
		intExpect = 75.15;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end

	function runArithmeticFunction08(){@Test}	
		variation = "operation / with negative literals";
		intActual = 375.75 / -5;
		intExpect = -75.15;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction09(){@Test}	
		variation = "operation / with literals";
		intActual = 375.75 / 2;
		intExpect = 187.875;
		if (intActual == intExpect)
			LogResult.assertDecimalEqual1(intExpect, intActual);
		else
			LogResult.skipped("JS ONLY 382587");
		end
	end

	function runArithmeticFunction10(){@Test}	
		variation = "operation / with negative literals";
		intActual = 375.75 / -2;
		intExpect = -187.875;
		if (intActual == intExpect)
			LogResult.assertDecimalEqual1(intExpect, intActual);
		else
			LogResult.skipped("JS ONLY 382587");
		end
	end
			
	function runArithmeticFunction11(){@Test {targetLang = [JAVA]}}	
		variation = "operation / with 0 and literals";
		failDetails string;
		try
			intActual = 375.75 / 0;
			failDetails = variation + " no exception ";
			LogResult.skipped(failDetails);
		onException (expect JavaObjectException)
			failDetails = variation + " exceptionType " + expect.exceptionType;
			LogResult.passed("OK");
		onException (wrong AnyException)
			failDetails = variation + " wrong exception " + wrong.message;
			LogResult.skipped(failDetails);
		end
	end
	
	function runArithmeticFunction12(){@Test {targetLang = [JAVA]}}	
		variation = "operation / with 0 and negative literals";
		failDetails string;
		try
			intActual = -375.75 / 0;
			failDetails = variation + " no exception ";
			LogResult.skipped(failDetails);
		onException (expect JavaObjectException)
			failDetails = variation + " exceptionType " + expect.exceptionType;
			LogResult.passed("OK");
		onException (wrong AnyException)
			failDetails = variation + " wrong exception " + wrong.message;
			LogResult.skipped(failDetails);
		end
	end
	
	function runArithmeticFunction13(){@Test}	
		variation = "operation % with literals";
		intActual = 375.75 % 4;
		intExpect = 3.75;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end

	function runArithmeticFunction14(){@Test}	
		variation = "operation % with negative literals";
		intActual = 375.75 % -4;
		intExpect = 3.75;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction15(){@Test}	
		variation = "operation ** with literals to float";
		actual float = 5 ** 3;
		intActual = actual;
		intExpect = 125;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end

	function runArithmeticFunction16(){@Test}	
		variation = "operation ** with negative literals to float";
		actual float = -5 ** 3;
		intActual = actual;
		intExpect = -125;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction17(){@Test}	
		variation = "operation ** with literals to bigInt";
		intActual = 5 ** 3;
		intExpect = 125;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction18(){@Test}	
		variation = "operation ** with negative literals to bigInt";
		intActual = -5 ** 3;
		intExpect = -125;
		LogResult.assertDecimalEqual1(intExpect, intActual);
	end
	
	function runArithmeticFunction19(){@Test}	
	 	variation string = "operation into overflow";
		try
			overflow decimal(5,2) = 123.45;
			overflow = overflow + 1000.25;
			variation += " no exception. Bug 356228 - EDT 1.0";
			LogResult.skipped(variation);
		onException (oops AnyException)
			if (oops isa NumericOverflowException)
				LogResult.passed("OK");
			else
				variation = "wrong exception " + variation;
				LogResult.skipped(variation);
			end
		end
	end	

end // EDecimal004

