package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;
import eglx.services.ServiceInvocationException;


/** @test
  * @name ESmallInt011
  * @title ESmallInt011 - runISAFunction
  * @description testing smallInt variable with the isa operator
  * @testcases runISAFunction01 - runISAFunctionn29
  * @sources ESmallInt011.egl
  * @keywords smallInt, isa
 **/
library ESmallInt011 {}

	variation string;
	isIt boolean;
	expected boolean;
	myTypes smallInt[] = [44];
	
	function assertTrue()
	 	success boolean = (isIt == expected);
	 	if (!success)
	 		Syslib.writeStdOut(variation);
	 		SysLib.writeStdOut(" actual " + isIt);
	 		SysLib.writeStdOut(" expect " + expected);
	 	end
 		LogResult.assertTrue(variation, success);
 	end

	function runISAFunction01(){@Test}
		variation = "smallint/array[i] is any";
		isIt = myTypes[1] isa any;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction02(){@Test}
		variation = "smallint/array[i] is bigInt";
		isIt = myTypes[1] isa bigInt;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction03(){@Test}
		variation = "smallint/array[i] is boolean";
		isIt = myTypes[1] isa boolean;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction04(){@Test}
		variation = "smallint/array[i] is date";
		isIt = myTypes[1] isa date;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction05(){@Test}
		variation = "smallint/array[i] is decimal(4,2)";
		isIt = myTypes[1] isa decimal(4,2);
		expected = false;
		assertTrue();
	end	
	
	function runISAFunction06(){@Test}
		variation = "smallint/array[i] is decimal";
		isIt = myTypes[1] isa decimal;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction07(){@Test}
		variation = "smallint/array[i] is dictionary";
		isIt = myTypes[1] isa dictionary;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction08(){@Test}
		variation = "smallint/array[i] is float";
		isIt = myTypes[1] isa float;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction09(){@Test}
		variation = "smallint/array[i] is int";
		isIt = myTypes[1] isa int;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction10(){@Test}
		variation = "smallint/array[i] is number";
		isIt = myTypes[1] isa number;
		expected = true;
		assertTrue();
	end
	
	function runISAFunction11(){@Test}
		variation = "smallint/array[i] is smallFloat";
		isIt = myTypes[1] isa smallFloat;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction12(){@Test}
		variation = "smallint/array[i] is smallInt";
		isIt = myTypes[1] isa smallInt;
		expected = true;
		assertTrue();
	end
	
	function runISAFunction13(){@Test}
		variation = "smallint/array[i] is string";
		isIt = myTypes[1] isa string;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction14(){@Test}
		variation = "smallint/array[i] is timestamp";
		isIt = myTypes[1] isa timestamp;
		expected = false;
		assertTrue();
	end	
	
	function runISAFunction15(){@Test}
		variation = "smallint/array[i] is anyexception";
		isIt = myTypes[1] isa anyexception;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction16(){@Test}
		variation = "smallint/array[i] is DynamicAccessException";
		isIt = myTypes[1] isa DynamicAccessException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction17(){@Test}
		variation = "smallint/array[i] is InvalidArgumentException";
		isIt = myTypes[1] isa InvalidArgumentException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction18(){@Test}
		variation = "smallint/array[i] is InvalidIndexException";
		isIt = myTypes[1] isa InvalidIndexException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction19(){@Test}
		variation = "smallint/array[i] is InvalidPatternException";
		isIt = myTypes[1] isa InvalidPatternException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction20(){@Test}
		variation = "smallint/array[i] is InvocationException";
		isIt = myTypes[1] isa InvocationException;
		expected = false;
		assertTrue();
	end

//	function runISAFunction21(){@Test {targetLang = [JAVA]}}
//		variation = "smallint/array[i] is JavaObjectException";
//		isIt = myTypes[1] isa JavaObjectException;
//		expected = false;
//		assertTrue();
//	end
//	
//	function runISAFunction22(){@Test{targetLang = [JAVASCRIPT]}}
//		variation = "smallint/array[i] is JavaScriptObjectException";
//		isIt = myTypes[1] isa JavaScriptObjectException;
//		expected = false;
//		assertTrue();
//	end
	
	function runISAFunction23(){@Test}
		variation = "smallint/array[i] is NullValueException";
		isIt = myTypes[1] isa NullValueException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction24(){@Test}
		variation = "smallint/array[i] is NumericOverflowException";
		isIt = myTypes[1] isa NumericOverflowException;
		expected = false;
		assertTrue();
	end

	function runISAFunction26(){@Test}
		variation = "smallint/array[i] is ServiceInvocationException";
		isIt = myTypes[1] isa ServiceInvocationException;
		expected = false;
		assertTrue();
	end
	
//	function runISAFunction27(){@Test{targetLang = [JAVA]}}
//		variation = "smallint/array[i] is SQLException";
//		isIt = myTypes[1] isa SQLException;
//		expected = false;
//		assertTrue();
//	end
	
	function runISAFunction28(){@Test}
		variation = "smallint/array[i] is TypeCastException";
		isIt = myTypes[1] isa TypeCastException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction30(){@Test}
		variation = "smallint/array[i] is bytes";
		isIt = myTypes[1] isa bytes;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction31(){@Test}
		variation = "smallint/array[i] is bytes(8)";
		isIt = myTypes[1] isa bytes(8);
		expected = false;
		assertTrue();
	end	
	
end // ESmallInt011