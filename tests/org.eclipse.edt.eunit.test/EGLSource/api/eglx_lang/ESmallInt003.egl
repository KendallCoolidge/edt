package api.eglx_lang;


import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/** @test
  * @name ESmallInt003
  * @title ESmallInt003 - runComparisonFunction
  * @description testing smallInt comparison operators
  * @testcases runComparisonFunction01 - runComparisonFunction40
  * @sources ESmallInt003.egl
  * @keywords smallInt, comparison
 **/
library ESmallInt003 {}
		
	int1 smallInt;
	int2 smallInt;
	int1n smallInt? = null;
	int2n smallInt? = 328;
	result boolean;
		
	// comparison test with smallInt literals
	function runComparisonFunction01(){@Test}
		result = (75 < 328);
		LogResult.assertTrue("literal comparison < true", result );
	end
	
	function runComparisonFunction02(){@Test}
		result = (328 < 75);
		LogResult.assertTrue("literal comparison < false", (!result) );
	end
	
	function runComparisonFunction03(){@Test}
		result = (75 < 75);
		LogResult.assertTrue("equal literal comparison < false", (!result) );
	end
	
	function runComparisonFunction04(){@Test}	
		result = (328 > 75);
		LogResult.assertTrue("literal comparison > true", result );
	end
	
	function runComparisonFunction05(){@Test}
		result = (75 > 328);
		LogResult.assertTrue("literal comparison > false", !result );
	end	
	
	function runComparisonFunction06(){@Test}
		result = (75 > 75);
		LogResult.assertTrue("equal literal comparison > false", (!result) );
	end
	
	function runComparisonFunction07(){@Test}
		result = (75 <= 328);
		LogResult.assertTrue("literal comparison <= true", result );
	end
	
	function runComparisonFunction08(){@Test}
		result = (328 <= 75);
		LogResult.assertTrue("literal comparison <= false", (!result) );
	end
	
	function runComparisonFunction09(){@Test}
		result = (75 <= 75);
		LogResult.assertTrue("equal literal comparison <= true", result );
	end
	
	function runComparisonFunction10(){@Test}
		result = (75 >= 328);
		LogResult.assertTrue("literal comparison >= false", !result );
	end
	
	function runComparisonFunction11(){@Test}
		result = (328 >= 75);
		LogResult.assertTrue("literal comparison >= true", result );
	end
	
	function runComparisonFunction12(){@Test}
		result = (75 >= 75);
		LogResult.assertTrue("equal literal comparison >= true", result );
	end
	
	function runComparisonFunction13(){@Test}
		result = (75 == 75);
		LogResult.assertTrue("equal literal comparison == true", result );
	end
	
	function runComparisonFunction14(){@Test}
		result = (75 != 328);
		LogResult.assertTrue("equal literal comparison != true", result );
	end
	
	function runComparisonFunction15(){@Test}
		result = (75 != 75);
		LogResult.assertTrue("equal literal comparison != false", !result );
	end
	
	// comparison test with smallInt variables
	function runComparisonFunction16(){@Test}
		int1 = 75;
		int2 = 328;
		result = ( int1 < int2);
		LogResult.assertTrue("variable comparison < true", result );
	end
	
	function runComparisonFunction17(){@Test}
		int1 = 328;
		int2 = 75;
		result = (int1 < int2);
		LogResult.assertTrue("variable comparison < false", (!result) );
	end
	
	function runComparisonFunction18(){@Test}
		int1 = 75;
		int2 = 75;
		result = (int1 < int2);
		LogResult.assertTrue("equal variable comparison < false", (!result) );
	end
	
	function runComparisonFunction19(){@Test}	
		int1 = 328;
		int2 = 75;
		result = (int1 > int2);
		LogResult.assertTrue("variable comparison > true", result );
	end
	
	function runComparisonFunction21(){@Test}
		int1 = 75;
		int2 = 328;
		result = (int1 > int2);
		LogResult.assertTrue("variable comparison > false", !result );
	end	
	
	function runComparisonFunction22(){@Test}
		int1 = 75;
		int2 = 75;
		result = (int1 > int2);
		LogResult.assertTrue("equal variable comparison > false", (!result) );
	end
	
	function runComparisonFunction23(){@Test}
		int1 = 75;
		int2 = 328;
		result = (int1 <= int2);
		LogResult.assertTrue("variable comparison <= true", result );
	end
	
	function runComparisonFunction24(){@Test}
		int1 = 328;
		int2 = 75;
		result = (int1 <= int2);
		LogResult.assertTrue("variable comparison <= false", (!result) );
	end
	
	function runComparisonFunction25(){@Test}
		int1 = 75;
		int2 = 75;
		result = (int1 <= int2);
		LogResult.assertTrue("equal variable comparison <= true", result );
	end
	
	function runComparisonFunction26(){@Test}
		int1 = 328;
		int2 = 75;
		result = (int1 <= int2);
		LogResult.assertTrue("equal variable comparison <= false", !result );
	end
	
	function runComparisonFunction27(){@Test}
		int1 = 75;
		int2 = 328;
		result = (int1 >= int2);
		LogResult.assertTrue("variable comparison >= false", !result );
	end
	
	function runComparisonFunction28(){@Test}
		int1 = 328;
		int2 = 75;
		result = (int1 >= int2);
		LogResult.assertTrue("variable comparison >= true", result );
	end
	
	function runComparisonFunction29(){@Test}
		int1 = 75;
		int2 = 75;
		result = (int1 >= int2);
		LogResult.assertTrue("equal variable comparison >= true", result );
	end
	
	function runComparisonFunction30(){@Test}
		int1 = 75;
		int2 = 328;
		result = (int1 >= int2);
		LogResult.assertTrue("equal variable comparison >= false", !result );
	end
	
	function runComparisonFunction31(){@Test}
		int1 = 75;
		int2 = 75;
		result = (int1 == int2);
		LogResult.assertTrue("equal variable comparison == true", result );
	end
	
	function runComparisonFunction32(){@Test}
		int1 = 75;
		int2 = 328;
		result = ( int1 == int2 );
		LogResult.assertTrue("equal variable comparison == false", !result );
	end
	
	function runComparisonFunction33(){@Test}
		int1 = 75;
		int2 = 328;
		result = (int1 != int2);
		LogResult.assertTrue("equal variable comparison != true", result );
	end
	
	function runComparisonFunction34(){@Test}
		int1 = 75;
		int2 = 75;
		result = (int1 != int2);
		LogResult.assertTrue("equal variable comparison != false", !result );
	end
	
	// comparison with nullable ints and null
	function runComparisonFunction35(){@Test}
		result = (int1n == null);
		LogResult.assertTrue("null variable equals null keyword == true", result );
	end
	
	function runComparisonFunction36(){@Test}
		result = (int1n != null);
		LogResult.assertTrue("null variable not equals null keyword != false", !result );
	end
	
	function runComparisonFunction37(){@Test}
		result = (int2n == null);
		LogResult.assertTrue("variable equals null keyword == false", !result );
	end
	
	function runComparisonFunction38(){@Test}
		result = (int2n != null);
		LogResult.assertTrue("variable not equals null keyword != true", result );
	end
	
	function runComparisonFunction39(){@Test}
		result = (int1n == int2n);
		LogResult.assertTrue("null variable equals variable == false", !result );
	end
	
	function runComparisonFunction40(){@Test}
		int1n = 328;
		result = (int1n != int2n);
		int1n = null;
		LogResult.assertTrue("null variable not equals variable != false", !result );
	end
	
end  // ESmallInt003
