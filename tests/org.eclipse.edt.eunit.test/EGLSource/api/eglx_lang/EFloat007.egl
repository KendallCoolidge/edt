package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/** @test
  * @name EFloat007
  * @title EFloat007 - runConversionFunction
  * @description testing conversion from float to/from other types
  * @testcases runConversionFunction01 - runConversionFunctionn34
  * @sources EFloat007.egl
  * @keywords float, 
 **/
library EFloat007 {}

	expectedFloat float?;
	actualFloat float;
	variation string;
	
	function assertTrue()
	 	LogResult.assertFloatEqual(variation, expectedFloat, actualFloat);
 	end
 	
  	function compileError(defectNo String in)
 		myInfo String = variation + " skipped due to compiler error " + defectNo;
 		LogResult.skipped(myInfo);
 	end

	// TODO test the boundary conditions 
	function runConversionFunction01(){@Test}
		variation = "int implicit float conversion";
		actual int = 7;
		actualFloat = actual;
		expectedFloat = 7;
		assertTrue();
	end
	
	function runConversionFunction02(){@Test}		
		variation = "negative int implicit float conversion";
		actual int = -7;
		actualFloat = actual;
		expectedFloat = -7;
		assertTrue();
	end
		
	function runConversionFunction03(){@Test}
		variation = "int? implicit float conversion";
		actual int? = 7;
		actualFloat = actual;
		expectedFloat = 7;
		assertTrue();
	end
	
	function runConversionFunction04(){@Test}
		variation = "decimal implicit float conversion";
		actual decimal(5,2) = 123.45;
		actualFloat = actual;
		expectedFloat = 123.45;
		assertTrue();
	end
	
	function runConversionFunction05(){@Test}
		variation = "negative decimal implicit float conversion";
		actual decimal(5,2) = -123.45;
		actualFloat = actual;
		expectedFloat = -123.45;
		assertTrue();
	end
	
	function runConversionFunction06(){@Test}
		variation = "decimal() implicit float conversion";
		actual decimal = 123.45;
		actualFloat = actual;
		expectedFloat = 123.45;
		assertTrue();
	end
	
	function runConversionFunction07(){@Test}
		variation = "decimal? implicit float conversion";
		actual decimal(5,2)? = 123.45;
		actualFloat = actual;
		expectedFloat = 123.45;
		assertTrue();
	end
	
	function runConversionFunction08(){@Test}
		variation = "decimal()? implicit float conversion";
		actual decimal? = 123.45;
		actualFloat = actual;
		expectedFloat = 123.45;
		assertTrue();
	end
	
	function runConversionFunction09(){@Test}
		variation = "float implicit float conversion1";
		actual float = 2.539E7;
		actualFloat = actual;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction10(){@Test}
		variation = "negative float implicit float conversion2";
		actual float = -2.539e7;
		actualFloat = actual;
		expectedFloat = -25390000;
		assertTrue();
	end
	
	function runConversionFunction11(){@Test}
		variation = "float? implicit float conversion1";
		actual float? = 2.539E7;
		actualFloat = actual;
		expectedFloat = 25390000;
		assertTrue();
	end

	function runConversionFunction12(){@Test}
		variation = "smallFloat implicit float conversion1";
		actual smallFloat = 2.539E7;
		actualFloat = actual;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction13(){@Test}
		variation = "negative smallFloat implicit float conversion1";
		actual smallFloat = 2.539E7;
		actualFloat = actual;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction14(){@Test}
		variation = "smallFloat? implicit float conversion1";
		actual smallFloat? = 2.539E7;
		actualFloat = actual;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction15(){@Test}
		variation = "bigint implicit float conversion";
		actual float = 8928234898823I;
		actualFloat = actual;
		expectedFloat = 8928234898823I;
		assertTrue();
	end
	
	function runConversionFunction16(){@Test}
		variation = "negative bigint implicit float conversion";
		actual float = -8928234898823I;
		actualFloat = actual;
		expectedFloat = -8928234898823I;
		assertTrue();
	end
	
	function runConversionFunction17(){@Test}
		variation = "bigint? implicit float conversion";
		actual float? = 8928234898823I;
		actualFloat = actual;
		expectedFloat = 8928234898823I;
		assertTrue();
	end
	
	function runConversionFunction18(){@Test}
		variation = "float explicit float conversion";
		actual float = 7;
		actualFloat = actual as float;
		expectedFloat = 7;
		assertTrue();
	end
	
	function runConversionFunction19(){@Test}		
		variation = "negative float explicit float conversion";
		actual float = -7;
		actualFloat = actual as float;
		expectedFloat = -7;
		assertTrue();
	end
		
	function runConversionFunction20(){@Test}
		variation = "float? explicit float conversion";
		actual float? = 7;
		actualFloat = actual as float;
		expectedFloat = 7;
		assertTrue();
	end
	
	function runConversionFunction21(){@Test}
		variation = "decimal explicit float conversion";
		actual decimal(5,2) = 123.45;
		actualFloat = actual as float;
		expectedFloat = 123.45;
		assertTrue();
	end
	
	function runConversionFunction22(){@Test}
		variation = "negative decimal explicit float conversion";
		actual decimal(5,2) = -123.45;
		actualFloat = actual as float;
		expectedFloat = -123.45;
		assertTrue();
	end
	
	function runConversionFunction23(){@Test}
		variation = "decimal() explicit float conversion";
		actual decimal = 123.45;
		actualFloat = actual as float;
		expectedFloat = 123.45;
		assertTrue();
	end
	
		function runConversionFunction24(){@Test}
		variation = "decimal? explicit float conversion";
		actual decimal(5,2)? = 123.45;
		actualFloat = actual as float;
		expectedFloat = 123.45;
		assertTrue();
	end
	
	function runConversionFunction25(){@Test}
		variation = "decimal()? explicit float conversion";
		actual decimal? = 123.45;
		actualFloat = actual as float;
		expectedFloat = 123.45;
		assertTrue();
	end
	
	function runConversionFunction26(){@Test}
		variation = "float explicit float conversion1";
		actual float = 2.539E7;
		actualFloat = actual as float;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction27(){@Test}
		variation = "negative float explicit float conversion2";
		actual float = -2.539e7;
		actualFloat = actual as float;
		expectedFloat = -25390000;
		assertTrue();
	end	
	
	function runConversionFunction28(){@Test}
		variation = "float? explicit float conversion1";
		actual float? = 2.539E7;
		actualFloat = actual as float;
		expectedFloat = 25390000;
		assertTrue();
	end

	function runConversionFunction29(){@Test}
		variation = "smallFloat explicit float conversion1";
		actual smallFloat = 2.539E7;
		actualFloat = actual as float;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction30(){@Test}
		variation = "negative smallFloat explicit float conversion1";
		actual smallFloat = 2.539E7;
		actualFloat = actual as float;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction31(){@Test}
		variation = "smallFloat? explicit float conversion1";
		actual smallFloat? = 2.539E7;
		actualFloat = actual as float;
		expectedFloat = 25390000;
		assertTrue();
	end
	
	function runConversionFunction32(){@Test}
		variation = "bigint explicit float conversion";
		actual float = 8928234898823I;
		actualFloat = actual as float;
		expectedFloat = 8928234898823I;
		assertTrue();
	end
	
	function runConversionFunction33(){@Test}
		variation = "negative bigint explicit float conversion";
		actual float = -8928234898823I;
		actualFloat = actual as float;
		expectedFloat = -8928234898823I;
		assertTrue();
	end
	
	function runConversionFunction34(){@Test}
		variation = "bigint? explicit float conversion";
		actual float? = 8928234898823I;
		actualFloat = actual as float;
		expectedFloat = 8928234898823I;
		assertTrue();
	end

	function runConversionFunction35(){@Test}
		variation = "bytes(8) implicit float conversion";
		actual bytes(8) = 0x3434343410101010;
		actualFloat = actual;
		expectedFloat = 3.218670059232498e-57;
		assertTrue();
	end
	
	function runConversionFunction37(){@Test}
		variation = "bytes implicit float conversion";
    	actual bytes = 0xF28159166A2117AE;
		actualFloat = actual;
		expectedFloat = -3.701654490889965e243;
		assertTrue();		
	end
	
	function runConversionFunction38(){@Test}
		variation = "bytes(8)? implicit float conversion";
		actual bytes(8)? = 0x7116141770B00B00;
		actualFloat = actual;
		expectedFloat = 5.615983623200424e236;
		assertTrue();	
	end
	
	function runConversionFunction39(){@Test}
		variation = "bytes? implicit float conversion";
		actual bytes? = 0x37B8C9D0E1F20314;
		actualFloat = actual;
		expectedFloat = 2.845562285546718e-40;
		assertTrue();
	end

end // EFloat007