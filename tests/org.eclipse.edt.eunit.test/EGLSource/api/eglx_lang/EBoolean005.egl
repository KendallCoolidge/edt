package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;
import eglx.services.ServiceInvocationException;

/** @test
  * @name EBoolean005
  * @title EBoolean005 - runISAFunction
  * @description testing boolean variable with the isa operator
  * @testcases runISAFunction01 - runISAFunctionn29
  * @sources EBoolean005.egl
  * @keywords boolean, isa
 **/
library EBoolean005 {}

	isIt boolean;
	expected boolean;
	boolean1 boolean = true;
	
	variation string;
	
	function assertTrue()
	 	success boolean = (isIt == expected);
	 	if (!success)
	 		Syslib.writeStdOut(variation);
	 		SysLib.writeStdOut(" actual " + isIt);
	 		SysLib.writeStdOut(" expect " + expected);
	 	end
 		LogResult.assertTrue(variation, success);
 	end

	function runISAFunction01(){@Test}
		variation = "boolean/variable is any";
		isIt = boolean1 isa any;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction02(){@Test}
		variation = "boolean/variable is bigInt";
		isIt = boolean1 isa bigInt;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction03(){@Test}
		variation = "boolean/variable is boolean";
		isIt = boolean1 isa boolean;
		expected = true;
		assertTrue();
	end
	
	function runISAFunction04(){@Test}
		variation = "boolean/variable is date";
		isIt = boolean1 isa date;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction05(){@Test}
		variation = "boolean/variable is decimal(4,2)";
		isIt = boolean1 isa decimal(4,2);
		expected = false;
		assertTrue();
	end	
	
	function runISAFunction06(){@Test}
		variation = "boolean/variable is decimal";
		isIt = boolean1 isa decimal;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction07(){@Test}
		variation = "boolean/variable is dictionary";
		isIt = boolean1 isa dictionary;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction08(){@Test}
		variation = "boolean/variable is float";
		isIt = boolean1 isa float;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction09(){@Test}
		variation = "boolean/variable is int";
		isIt = boolean1 isa int;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction10(){@Test}
		variation = "boolean/variable is number";
		isIt = boolean1 isa number;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction11(){@Test}
		variation = "boolean/variable is smallFloat";
		isIt = boolean1 isa smallFloat;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction12(){@Test}
		variation = "boolean/variable is smallInt";
		isIt = boolean1 isa smallInt;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction13(){@Test}
		variation = "boolean/variable is string";
		isIt = boolean1 isa string;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction14(){@Test}
		variation = "boolean/variable is timestamp";
		isIt = boolean1 isa timestamp;
		expected = false;
		assertTrue();
	end	
	
	function runISAFunction15(){@Test}
		variation = "boolean/variable is anyexception";
		isIt = boolean1 isa anyexception;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction16(){@Test}
		variation = "boolean/variable is DynamicAccessException";
		isIt = boolean1 isa DynamicAccessException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction17(){@Test}
		variation = "boolean/variable is InvalidArgumentException";
		isIt = boolean1 isa InvalidArgumentException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction18(){@Test}
		variation = "boolean/variable is InvalidIndexException";
		isIt = boolean1 isa InvalidIndexException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction19(){@Test}
		variation = "boolean/variable is InvalidPatternException";
		isIt = boolean1 isa InvalidPatternException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction20(){@Test}
		variation = "boolean/variable is InvocationException";
		isIt = boolean1 isa InvocationException;
		expected = false;
		assertTrue();
	end

//	function runISAFunction21(){@Test {targetLang = [JAVA]}}
//		variation = "boolean/variable is JavaObjectException";
//		isIt = boolean1 isa JavaObjectException;
//		expected = false;
//		assertTrue();
//	end
//	
//	function runISAFunction22(){@Test{targetLang = [JAVASCRIPT]}}
//		variation = "boolean/variable is JavaScriptObjectException";
//		isIt = boolean1 isa JavaScriptObjectException;
//		expected = false;
//		assertTrue();
//	end
	
	function runISAFunction23(){@Test}
		variation = "boolean/variable is NullValueException";
		isIt = boolean1 isa NullValueException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction24(){@Test}
		variation = "boolean/variable is NumericOverflowException";
		isIt = boolean1 isa NumericOverflowException;
		expected = false;
		assertTrue();
	end

	function runISAFunction26(){@Test}
		variation = "boolean/variable is ServiceInvocationException";
		isIt = boolean1 isa ServiceInvocationException;
		expected = false;
		assertTrue();
	end
	
//	function runISAFunction27(){@Test{targetLang = [JAVA]}}
//		variation = "boolean/variable is SQLException";
//		isIt = boolean1 isa SQLException;
//		expected = false;
//		assertTrue();
//	end
	
	function runISAFunction28(){@Test}
		variation = "boolean/variable is TypeCastException";
		isIt = boolean1 isa TypeCastException;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction30(){@Test}
		variation = "boolean/variable is bytes";
		isIt = boolean1 isa bytes;
		expected = false;
		assertTrue();
	end
	
	function runISAFunction31(){@Test}
		variation = "boolean/variable is bytes(8)";
		isIt = boolean1 isa bytes(8);
		expected = false;
		assertTrue();
	end	
	
end // EBoolean005