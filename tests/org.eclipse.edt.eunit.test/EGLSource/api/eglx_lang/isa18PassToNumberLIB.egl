package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.Test;

library isa18PassToNumberLIB

	isA_WS isA_WS;
	isA18_DEC_D0 isA18_DEC_D0;
	isA18_DEC_Dx isA18_DEC_Dx;
	use isaLIB;

Function runBasicDecimalISAFunction001() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL01D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 1;  isA_WS.myDec = 0;  
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL01D0); 
end

Function runBasicDecimalISAFunction002() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL02D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 2;  isA_WS.myDec = 0;  
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL02D0);  
end

Function runBasicDecimalISAFunction003() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL03D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 3;  isA_WS.myDec = 0;
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL03D0);  
end

Function runBasicDecimalISAFunction004() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL04D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 4;  isA_WS.myDec = 0;
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL04D0);  
end

Function runBasicDecimalISAFunction005() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL05D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 5;  isA_WS.myDec = 0;  
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL05D0);  
end

Function runBasicDecimalISAFunction006() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL06D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 6;  isA_WS.myDec = 0;  
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL06D0);  
end

Function runBasicDecimalISAFunction007() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL07D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 7;  isA_WS.myDec = 0;
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL07D0);  
end

Function runBasicDecimalISAFunction008() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL08D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 8;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL08D0);  
end

Function runBasicDecimalISAFunction009() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL09D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 9;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL09D0);  
end

Function runBasicDecimalISAFunction010() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL10D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 10;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL10D0);  
end

Function runBasicDecimalISAFunction011() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL11D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 11;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL11D0);  
end

Function runBasicDecimalISAFunction012() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL12D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 12;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL12D0);  
end

Function runBasicDecimalISAFunction013() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL13D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 13;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL13D0);  
end

Function runBasicDecimalISAFunction014() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL14D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 14;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL14D0);  
end

Function runBasicDecimalISAFunction015() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL15D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 15;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL15D0);  
end

Function runBasicDecimalISAFunction016() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL16D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 16;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL16D0);  
end

Function runBasicDecimalISAFunction017() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL17D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 17;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL17D0);  
end

Function runBasicDecimalISAFunction018() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - (isA18_DEC_D0.DECIMAL18D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL18D0);  
end // end isA_PassToNumber_18_DEC

Function runBasicDecimalISAFunction019() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";	
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D00");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D00);  
end

Function runBasicDecimalISAFunction020() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D01");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 1; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D01);  
end

Function runBasicDecimalISAFunction021() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D02");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 2; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D02);  
end

Function runBasicDecimalISAFunction022() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D03");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 3; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D03);  
end

Function runBasicDecimalISAFunction023() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D04");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 4; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D04);  
end

Function runBasicDecimalISAFunction024() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D05");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 5; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D05);  
end

Function runBasicDecimalISAFunction025() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D06");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 6; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D06);  
end

Function runBasicDecimalISAFunction026() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D07");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 7; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D07);  
end

Function runBasicDecimalISAFunction027() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D08");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 8; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D08);  
end

Function runBasicDecimalISAFunction028() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D09");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 9; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D09);  
end

Function runBasicDecimalISAFunction029() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D10");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 10; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D10);  
end

Function runBasicDecimalISAFunction030() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D11");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 11; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D11);  
end

Function runBasicDecimalISAFunction040() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D12");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 12; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D12);  
end

Function runBasicDecimalISAFunction041() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D13");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 13; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D13);  
end

Function runBasicDecimalISAFunction042() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D14");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 14; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D14);  
end

Function runBasicDecimalISAFunction043() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D15");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 15; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D15);  
end

Function runBasicDecimalISAFunction044() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D16");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 16; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D16);  
end

Function runBasicDecimalISAFunction045() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D17");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 17; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D17);  
end

Function runBasicDecimalISAFunction046() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D18");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 18; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D18);  
end // end isA_PassToNumber_18_DEC_D

Function runBasicDecimalISAFunction047() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_D0.DECIMAL02D0 - is it a decimal(1,0)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 1;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL02D0);  
end

Function runBasicDecimalISAFunction048() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_D0.DECIMAL02D0 - is it a decimal(2,0)");
  isA_WS.EXPECTED_COMPARE = "==";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 2;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL02D0);  
end

Function runBasicDecimalISAFunction049() {@Test}  
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_D0.DECIMAL02D0 - is it a decimal(3,0)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 3;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL02D0);  
end

Function runBasicDecimalISAFunction050() {@Test}      
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_D0.DECIMAL17D0 - is it a decimal(16,0)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 16;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL17D0);  
end

Function runBasicDecimalISAFunction051() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_D0.DECIMAL17D0 - is it a decimal(17,0)");
  isA_WS.EXPECTED_COMPARE = "==";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 17;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL17D0);  
end

Function runBasicDecimalISAFunction052() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_D0.DECIMAL17D0 - is it a decimal(18,0)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_D0(isA18_DEC_D0.DECIMAL17D0);  
end

Function runBasicDecimalISAFunction053() {@Test} 
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D01 - is it a decimal(18,0)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 0; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D01);  
end

Function runBasicDecimalISAFunction054() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D01 - is it a decimal(18,1)");
  isA_WS.EXPECTED_COMPARE = "==";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 1; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D01);  
end

Function runBasicDecimalISAFunction055() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D01 - is it a decimal(18,2)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 2; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D01);  
end

Function runBasicDecimalISAFunction056() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D17 - is it a decimal(18,16)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 16; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D17);  
end

Function runBasicDecimalISAFunction057() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D17 - is it a decimal(18,17)");
  isA_WS.EXPECTED_COMPARE = "==";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 17; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D17);  
end

Function runBasicDecimalISAFunction058() {@Test}
  isaLIB.setVariation("isA - PassToNumber - isA18_DEC_Dx.DECIMAL18D17 - is it a decimal(18,18)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 18;  isA_WS.myDec = 18; 
  isaNumberParm18_DEC_Dx(isA18_DEC_Dx.DECIMAL18D17);  
end // end isA_PassToNumber_18_DEC_BOUNDARY

function isaNumberParm18_DEC_D0(myNumber number)
    isA_WS.RESULT_COMPARE = "!=";
    isA_WS.hadFailure = "N";
    case(isA_WS.myType)
        when("DEC ")
            case(isA_WS.myLen)
                when(1)
                    if(myNumber isa decimal(1, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(2)
                    if(myNumber isa decimal(2, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(3)
                    if(myNumber isa decimal(3, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(4)
                    if(myNumber isa decimal(4, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(5)
                    if(myNumber isa decimal(5, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(6)
                    if(myNumber isa decimal(6, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(7)
                    if(myNumber isa decimal(7, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(8)
                    if(myNumber isa decimal(8, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(9)
                    if(myNumber isa decimal(9, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(10)
                     if(myNumber isa decimal(10, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(11)
                    if(myNumber isa decimal(11, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(12)
                    if(myNumber isa decimal(12, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(13)
                    if(myNumber isa decimal(13, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(14)
                    if(myNumber isa decimal(14, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(15)
                    if(myNumber isa decimal(15, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(16)
                    if(myNumber isa decimal(16, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(17)
                    if(myNumber isa decimal(17, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(18)
                    if(myNumber isa decimal(18, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end                	
            end
        otherwise
        	fullDetails string = "BUG in isaAnyNumber for " + isA_WS.myType;
            isaLIB.reportFailureWithText(fullDetails);
            isA_WS.hadFailure = "Y";
    end
    if(isA_WS.hadFailure == "N")
        isaLIB.compareIF(isA_WS.RESULT_COMPARE, isA_WS.EXPECTED_COMPARE);
    end
end  // end isaNumberParm18_DEC_D0

function isaNumberParm18_DEC_Dx(myNumber number)
    isA_WS.RESULT_COMPARE = "!=";
    isA_WS.hadFailure = "N";
    case(isA_WS.myType)
        when("DEC ")
                    case(isA_WS.myDec)
                        when(0)
                            if(myNumber isa decimal(18, 0))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(1)
                            if(myNumber isa decimal(18, 1))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(2)
                            if(myNumber isa decimal(18, 2))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(3)
                            if(myNumber isa decimal(18, 3))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(4)
                            if(myNumber isa decimal(18, 4))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(5)
                            if(myNumber isa decimal(18, 5))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(6)
                            if(myNumber isa decimal(18, 6))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(7)
                            if(myNumber isa decimal(18, 7))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(8)
                            if(myNumber isa decimal(18, 8))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(9)
                            if(myNumber isa decimal(18, 9))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(10)
                            if(myNumber isa decimal(18, 10))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(11)
                            if(myNumber isa decimal(18, 11))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(12)
                            if(myNumber isa decimal(18, 12))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(13)
                            if(myNumber isa decimal(18, 13))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(14)
                            if(myNumber isa decimal(18, 14))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(15)
                            if(myNumber isa decimal(18, 15))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(16)
                            if(myNumber isa decimal(18, 16))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(17)
                            if(myNumber isa decimal(18, 17))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(18)
                            if(myNumber isa decimal(18, 18))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                    end
        otherwise
        	fullDetails string = "BUG in isaAnyNumber for " + isA_WS.myType;
            isaLIB.reportFailureWithText(fullDetails);
            isA_WS.hadFailure = "Y";
    end
    if(isA_WS.hadFailure == "N")
        isaLIB.compareIF(isA_WS.RESULT_COMPARE, isA_WS.EXPECTED_COMPARE);
    end
end  // end isaNumberParm18_DEC_Dx

end
