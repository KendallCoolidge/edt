package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;
import eglx.java.JavaObjectException;


/** @test
  * @name ESmallFloat004
  * @title ESmallFloat004 - runArithmeticFunction
  * @description testing float arithmetic opertations and expressions
  * @testcases runArithmeticFunction01 - runArithmeticFunction19
  * @sources ESmallFloat004.egl
  * @keywords float, operations, expressions
 **/
library ESmallFloat004 {}
	
	floatActual float;
	floatExpect float;
	variation string;

 	function assertTrue()
	 	success boolean = (floatExpect == floatActual);
	 	if (!success)
	 		Syslib.writeStdOut(variation);
	 		SysLib.writeStdOut(" actual " + floatActual);
	 		SysLib.writeStdOut(" expect " + floatExpect);
	 	end
	 	// revert();
 //		LogResult.assertTrue(variation, success);
 		LogResult.assertFloatEqual1(floatExpect, floatActual);
 	end

	function runArithmeticFunction01(){@Test}	
		variation = "operation + with literals";
		floatActual = 2.539E7 + 1.3E2;
		floatExpect = 2.539013E7;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction02(){@Test}	
		variation = "operation + with negative literals";
		floatActual = 2.539E7 + -1.3E2;
		floatExpect = 2.538987E7;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction03(){@Test}	
		variation = "operation - with literals";
		floatActual = 2.539E7 - 1.3E2;
		floatExpect = 2.538987E7;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction04(){@Test}	
		variation = "operation - with negative literals";
		floatActual = 2.539E7 - -1.3E2;
		floatExpect = 2.539013E7;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction05(){@Test}	
		variation = "operation * with literals";
		floatActual = 2.539E7 * 1.3E2;
		floatExpect = 3.3007E9;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction06(){@Test}	
		variation = "operation * with negative literals";
		floatActual = 2.539E7 * -1.3E2;
		floatExpect = -3.3007E9;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction07(){@Test}	
		variation = "operation / with literals";
		floatActual = 2.539E7 / 1.3E2;
		floatExpect = 195307.6923076923;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end

	function runArithmeticFunction08(){@Test}	
		variation = "operation / with negative literals";
		floatActual = 2.539E7 / -1.3E2;
		floatExpect = -195307.6923076923;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction09(){@Test}	
		variation = "operation /2 with literals";
		floatActual = 2.539E7 / 2;
		floatExpect = 1.2695E7;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end

	function runArithmeticFunction10(){@Test}	
		variation = "operation /-2 with negative literals";
  		floatActual = 2.539E7 / -2;
		floatExpect = -1.2695E7;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
			
	function runArithmeticFunction11(){@Test {targetLang = [JAVA]}}	
		variation = "operation / with 0 and literals";
		failDetails string;
		try
			floatActual = 2.539E7 / 0;
			failDetails = variation + " no exception " + floatActual;
			LogResult.failed(failDetails);
//		onException (oops RuntimeException)
//			syslib.writeStdOut("passed runtime exception");
		onException (expect JavaObjectException)
			failDetails = variation + " exceptionType " + expect.exceptionType;
			LogResult.passed("OK");
		onException (wrong AnyException)
			failDetails = variation + " wrong exception " + wrong.message;
			LogResult.failed(failDetails);
		end
	end
	
	function runArithmeticFunction12(){@Test {targetLang = [JAVA]}}	
		variation = "operation / with 0 and negative literals";
		failDetails string;
		try
			floatActual = -2.539E7 / 0;
			failDetails = variation + " no exception ";
			LogResult.failed(failDetails);
		onException (expect JavaObjectException)
			failDetails = variation + " exceptionType " + expect.exceptionType;
			LogResult.passed("OK");
		onException (wrong AnyException)
			failDetails = variation + " wrong exception " + wrong.message;
			LogResult.failed(failDetails);
		end
	end
	
	function runArithmeticFunction13(){@Test}	
		variation = "operation % with literals";
		floatActual = 2.539879E6 % 2;
		floatExpect = 1;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end

	function runArithmeticFunction14(){@Test}
		variation = "operation % with negative literals";
		floatActual = 2.539879E6 % -2;
		floatExpect = 1;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
 
	function runArithmeticFunction15(){@Test}	
		variation = "operation ** with literals to float";
		actual float = 1.3E2 ** 3;
		floatActual = actual;
		floatExpect = 2197000.0;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end

	function runArithmeticFunction16(){@Test}	
		variation = "operation ** with negative literals to float";
		actual float = -1.3E2 ** 3;
		floatActual = actual;
		floatExpect = -2197000.0;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction17(){@Test}	
		variation = "operation ** with literals to float";
		floatActual = 1.3E2 ** 3;
		floatExpect = 2197000.0;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction18(){@Test}	
		variation = "operation ** with negative literals to float";
		floatActual = -1.3E2 ** 3;
		floatExpect = -2197000.0;
		LogResult.assertFloatEqual1(floatExpect, floatActual);
	end
	
	function runArithmeticFunction19()	
		// TODO figure out the maximum value for float
		variation = "operation + with overflow";
		try
			overflow float = 9223372036854775800.;
			overflow += 100;
			variation += " no exception";
			LogResult.failed(variation);
		onException(oops AnyException)
			if ( oops isa NumericOverflowException)
				LogResult.passed(variation);
			else
				variation += " wrong exception";
				LogResult.failed(variation);
			end
		end
	end

end // ESmallFloat004