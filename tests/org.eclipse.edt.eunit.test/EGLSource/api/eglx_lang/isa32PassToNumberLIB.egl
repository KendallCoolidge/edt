package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.Test;

library isa32PassToNumberLIB

	isA_WS isA_WS;
	isA31_DEC_D0 isA31_DEC_D0;
	isA32_DEC_D0 isA32_DEC_D0;
	isA32_DEC_Dx isA32_DEC_Dx;
	use isaLIB;

Function runBasicDecimalISAFunction001() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_D0.DECIMAL32D0");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 0;
  isaNumberParm32_DEC_Dx(isA32_DEC_D0.DECIMAL32D0);  //decimal(32,0))
end // end isA_PassToNumber_32_DEC

Function runBasicDecimalISAFunction002() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D00");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 0;
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D00);  //decimal(32,0))
end

Function runBasicDecimalISAFunction003() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D01");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 1;
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D01);  //decimal(32,1))
end

Function runBasicDecimalISAFunction004() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D02");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 2;
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D02);  //decimal(32,2))
end

Function runBasicDecimalISAFunction005() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D03");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 3;
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D03);  //decimal(32,3))
end

Function runBasicDecimalISAFunction006() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D04");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 4;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D04);  //decimal(32,4))
end

Function runBasicDecimalISAFunction007() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D05");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 5;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D05);  //decimal(32,5))
end

Function runBasicDecimalISAFunction008() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D06");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 6;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D06);  //decimal(32,6))
end

Function runBasicDecimalISAFunction009() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D07");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 7;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D07);  //decimal(32,7))
end

Function runBasicDecimalISAFunction010() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D08");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 8;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D08);  //decimal(32,8))
end

Function runBasicDecimalISAFunction011() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D09");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 9;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D09);  //decimal(32,9))
end

Function runBasicDecimalISAFunction012() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D10");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 10;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D10);  //decimal(32,10))
end

Function runBasicDecimalISAFunction013() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D11");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 11;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D11);  //decimal(32,11))
end

Function runBasicDecimalISAFunction014() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D12");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 12;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D12);  //decimal(32,12))
end

Function runBasicDecimalISAFunction015() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D13");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 13;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D13);  //decimal(32,13))
end

Function runBasicDecimalISAFunction016() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D14");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 14;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D14);  //decimal(32,14))
end

Function runBasicDecimalISAFunction017() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D15");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 15;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D15);  //decimal(32,15))
end

Function runBasicDecimalISAFunction018() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D16");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 16;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D16);  //decimal(32,16))
end

Function runBasicDecimalISAFunction019() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D17");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 17;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D17);  //decimal(32,17))
end

Function runBasicDecimalISAFunction020() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D18");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 18;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D18);  //decimal(32,18))
end

Function runBasicDecimalISAFunction021() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D19");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 19;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D19);  //decimal(32,19))
end

Function runBasicDecimalISAFunction022() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D20");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 20;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D20);  //decimal(32,20))
end

Function runBasicDecimalISAFunction023() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D21");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 21;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D21);  //decimal(32,21))
end

Function runBasicDecimalISAFunction024() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D22");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 22;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D22);  //decimal(32,22))
end

Function runBasicDecimalISAFunction025() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D23");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 23;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D23);  //decimal(32,23))
end

Function runBasicDecimalISAFunction026() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D24");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 24;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D24);  //decimal(32,24))
end

Function runBasicDecimalISAFunction027() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D25");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 25;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D25);  //decimal(32,25))
end

Function runBasicDecimalISAFunction028() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D26");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 26;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D26);  //decimal(32,26))
end

Function runBasicDecimalISAFunction029() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D27");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 27;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D27);  //decimal(32,27))
end

Function runBasicDecimalISAFunction030() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D28");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 28;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D28);  //decimal(32,28))
end

Function runBasicDecimalISAFunction031() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D29");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 29;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D29);  //decimal(32,29))
end

Function runBasicDecimalISAFunction032() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D30");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 30;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D30);  //decimal(32,30))
end

Function runBasicDecimalISAFunction033() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D31");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 31;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D31);  //decimal(32,31))
end

Function runBasicDecimalISAFunction034() {@Test}
  isA_WS.EXPECTED_COMPARE = "==";    
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D32");
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 32;  
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D32);  //decimal(32,32))
end // end isA_PassToNumber_32_DEC_D

Function isA_PassToNumber_32_DEC_BOUNDARY()
	
  isaLIB.setVariation("isA - PassToNumber - isA31_DEC_D0.DECIMAL31D0 - is it a decimal(30,0)");
  isA_WS.EXPECTED_COMPARE = "!=";  
  isA_WS.myType = "DEC ";  isA_WS.myLen = 30;  isA_WS.myDec = 0; 
  isaNumberParm31_DEC_D0(isA31_DEC_D0.DECIMAL31D0);  //decimal(30,0))

  isaLIB.setVariation("isA - PassToNumber - isA31_DEC_D0.DECIMAL31D0 - is it a decimal(31,0)");
  isA_WS.EXPECTED_COMPARE = "==";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 31;  isA_WS.myDec = 0; 
  isaNumberParm31_DEC_D0(isA31_DEC_D0.DECIMAL31D0);  //decimal(31,0))

  isaLIB.setVariation("isA - PassToNumber - isA31_DEC_D0.DECIMAL31D0 - is it a decimal(32,0)");
  isA_WS.EXPECTED_COMPARE = "!=";  
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 0; 
  isaNumberParm32_DEC_Dx(isA31_DEC_D0.DECIMAL31D0);  //decimal(32,0))
  
  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D01 - is it a decimal(32,0)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 0; 
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D01);  //decimal(32,0))

  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D01 - is it a decimal(32,1)");
  isA_WS.EXPECTED_COMPARE = "==";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 1; 
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D01);  //decimal(32,1))

  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D01 - is it a decimal(32,2)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 2; 
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D01);  //decimal(32,2))

  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D31 - is it a decimal(32,30)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 30; 
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D31);  //decimal(32,30))

  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D31 - is it a decimal(32,31)");
  isA_WS.EXPECTED_COMPARE = "==";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 31; 
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D31);  //decimal(32,31))

  isaLIB.setVariation("isA - PassToNumber - isA32_DEC_Dx.DECIMAL32D31 - is it a decimal(32,32)");
  isA_WS.EXPECTED_COMPARE = "!=";
  isA_WS.myType = "DEC ";  isA_WS.myLen = 32;  isA_WS.myDec = 32; 
  isaNumberParm32_DEC_Dx(isA32_DEC_Dx.DECIMAL32D31);  //decimal(32,32))
end  // end isA_PassToNumber_32_DEC_BOUNDARY

function isaNumberParm32_DEC_Dx(myNumber number)
    isA_WS.RESULT_COMPARE = "!=";
    isA_WS.hadFailure = "N";
    case(isA_WS.myType)
        when("DEC ")
            case(isA_WS.myLen)
                when(32)
                    case(isA_WS.myDec)
                        when(0)
                            if(myNumber isa decimal(32, 0))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(1)
                            if(myNumber isa decimal(32, 1))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(2)
                            if(myNumber isa decimal(32, 2))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(3)
                            if(myNumber isa decimal(32, 3))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(4)
                            if(myNumber isa decimal(32, 4))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(5)
                            if(myNumber isa decimal(32, 5))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(6)
                            if(myNumber isa decimal(32, 6))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(7)
                            if(myNumber isa decimal(32, 7))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(8)
                            if(myNumber isa decimal(32, 8))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(9)
                            if(myNumber isa decimal(32, 9))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(10)
                            if(myNumber isa decimal(32, 10))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(11)
                            if(myNumber isa decimal(32, 11))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(12)
                            if(myNumber isa decimal(32, 12))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(13)
                            if(myNumber isa decimal(32, 13))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(14)
                            if(myNumber isa decimal(32, 14))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(15)
                            if(myNumber isa decimal(32, 15))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(16)
                            if(myNumber isa decimal(32, 16))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(17)
                            if(myNumber isa decimal(32, 17))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(18)
                            if(myNumber isa decimal(32, 18))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(19)
                            if(myNumber isa decimal(32, 19))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(20)
                            if(myNumber isa decimal(32, 20))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(21)
                            if(myNumber isa decimal(32, 21))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(22)
                            if(myNumber isa decimal(32, 22))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(23)
                            if(myNumber isa decimal(32, 23))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(24)
                            if(myNumber isa decimal(32, 24))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(25)
                            if(myNumber isa decimal(32, 25))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(26)
                            if(myNumber isa decimal(32, 26))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(27)
                            if(myNumber isa decimal(32, 27))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(28)
                            if(myNumber isa decimal(32, 28))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(29)
                            if(myNumber isa decimal(32, 29))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(30)
                            if(myNumber isa decimal(32, 30))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(31)
                            if(myNumber isa decimal(32, 31))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                        when(32)
                            if(myNumber isa decimal(32, 32))
                                isA_WS.RESULT_COMPARE = "==";
                            end
                    end
            end
        otherwise
        	fullDetail string = "BUG in isaAnyNumber for " + isA_WS.myType;
            isaLIB.reportFailureWithText(fullDetail);
            isA_WS.hadFailure = "Y";
    end
    if(isA_WS.hadFailure == "N")
        isaLIB.compareIF(isA_WS.RESULT_COMPARE, isA_WS.EXPECTED_COMPARE);
    end
end  // end isaNumberParm32_DEC_Dx
function isaNumberParm31_DEC_D0(myNumber number)
    isA_WS.RESULT_COMPARE = "!=";
    isA_WS.hadFailure = "N";
    case(isA_WS.myType)
        when("DEC ")
            case(isA_WS.myLen)
                when(19)
                    if(myNumber isa decimal(19, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(20)
                    if(myNumber isa decimal(20, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(21)
                    if(myNumber isa decimal(21, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(22)
                    if(myNumber isa decimal(22, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(23)
                    if(myNumber isa decimal(23, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(24)
                    if(myNumber isa decimal(24, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(25)
                    if(myNumber isa decimal(25, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(26)
                    if(myNumber isa decimal(26, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(27)
                    if(myNumber isa decimal(27, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(28)
                    if(myNumber isa decimal(28, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(29)
                    if(myNumber isa decimal(29, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(30)
                    if(myNumber isa decimal(30, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end
                when(31)
                    if(myNumber isa decimal(31, 0))
                        isA_WS.RESULT_COMPARE = "==";
                    end                	
            end
        otherwise
        	fullDetail string = "BUG in isaAnyNumber for " + isA_WS.myType;
            isaLIB.reportFailureWithText(fullDetail);
            isA_WS.hadFailure = "Y";
    end
    if(isA_WS.hadFailure == "N")
        isaLIB.compareIF(isA_WS.RESULT_COMPARE, isA_WS.EXPECTED_COMPARE);
    end
end  // end isaNumberParm31_DEC_D0
	
end  // end PassToNumber32Library
