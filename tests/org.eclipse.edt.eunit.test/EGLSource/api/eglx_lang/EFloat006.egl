package api.eglx_lang;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;
import eglx.java.JavaObjectException;

/** @test
  * @name EFloat006
  * @title EFloat006 - runArithmeticFunction
  * @description testing samllInt arithmetic opertations and expressions
  * @testcases runArithmeticFunction01 - runArithmeticFunction18
  * @sources EFloat006.egl
  * @keywords float, operations, expressions
 **/
library EFloat006 {}
	
	float1 float? = 2.539E7;
	float2 float? = -2.539E7;
	float3 float? = 1.3E2;
	float4 float? = -1.3E2;
	float5 float? = 2;
	float6 float? = -2;
	int7 float? = 3;
	zero float? = 0;
	floatActual float;
	floatExpect float;
	variation string;
	
 	function assertTrue()
	 	success boolean = (floatExpect == floatActual);
	 	if (!success)
	 		Syslib.writeStdOut(variation);
	 		SysLib.writeStdOut(" actual " + floatActual);
	 		SysLib.writeStdOut(" expect " + floatExpect);
	 	end
	 	// revert();
 		LogResult.assertTrue(variation, success);
 	end

	function runArithmeticFunction01(){@Test}	
		variation = "operation + with variables";
		floatActual = float1 + float3;
		floatExpect = 2.539013E7;
		assertTrue();
	end
	
	function runArithmeticFunction02(){@Test}	
		variation = "operation + with negative variables";
		floatActual = float1 + float4;
		floatExpect = 2.538987E7;
		assertTrue();
	end
	
	function runArithmeticFunction03(){@Test}	
		variation = "operation - with variables";
		floatActual = float1 - float3;
		floatExpect = 2.538987E7;
		assertTrue();
	end
	
	function runArithmeticFunction04(){@Test}	
		variation = "operation - with negative variables";
		floatActual = float1 - float4;
		floatExpect = 2.539013E7;
		assertTrue();
	end
	
	function runArithmeticFunction05(){@Test}	
		variation = "operation * with variables";
		floatActual = float1 * float3;
		floatExpect = 3.3007E9;
		assertTrue();
	end
	
	function runArithmeticFunction06(){@Test}	
		variation = "operation * with negative variables";
		floatActual = float1 * float4;
		floatExpect = -3.3007E9;
		assertTrue();
	end
	
	function runArithmeticFunction07(){@Test}	
		variation = "operation / with variables";
		floatActual = float1 / float3;
		floatExpect = 195307.6923076923;
		assertTrue();
	end

	function runArithmeticFunction08(){@Test}	
		variation = "operation / with negative variables";
		floatActual = float1 / float4;
		floatExpect = -195307.6923076923;
		assertTrue();
	end
	
	function runArithmeticFunction09(){@Test}	
		variation = "operation / with variables";
		floatActual = float1 / float5;
		floatExpect = 1.2695E7;
		assertTrue();
	end

	function runArithmeticFunction10(){@Test}	
		variation = "operation / with negative variables";
		floatActual = float1 / float6;
		floatExpect = -1.2695E7;
		assertTrue();
	end
			
	function runArithmeticFunction11(){@Test {targetLang = [JAVA]}}	
		variation = "operation / with 0 and variables";
		failDetails string;
		try
			floatActual = float1 / zero;
			failDetails = variation + " no exception ";
			LogResult.failed(failDetails);
		onException (expect JavaObjectException)
			failDetails = variation + " exceptionType " + expect.exceptionType;
			LogResult.passed("OK");
		onException (wrong AnyException)
			failDetails = variation + " wrong exception " + wrong.message;
			LogResult.failed(failDetails);
		end
	end
	
	function runArithmeticFunction12(){@Test {targetLang = [JAVA]}}	
		variation = "operation / with 0 and negative variables";
		failDetails string;
		try
			floatActual = float2 / zero;
			failDetails = variation + " no exception ";
			LogResult.failed(failDetails);
		onException (expect JavaObjectException)
			failDetails = variation + " exceptionType " + expect.exceptionType;
			LogResult.passed("OK");
		onException (wrong AnyException)
			failDetails = variation + " wrong exception " + wrong.message;
			LogResult.failed(failDetails);
		end
	end
		
	function runArithmeticFunction13(){@Test}	
		variation = "operation % with variables";
		floatActual = float1 % float3;
		floatExpect = 90;
		assertTrue();
	end

	function runArithmeticFunction14(){@Test}	
		variation = "operation % with negative variables";
		floatActual = float1 % float4;
		floatExpect = 90;
		assertTrue();
	end
	
	function runArithmeticFunction15(){@Test}	
		variation = "operation ** with variables to float";
		actual float = float3 ** int7;
		floatActual = actual;
		floatExpect = 2197000.0;
		assertTrue();
	end

	function runArithmeticFunction16(){@Test}	
		variation = "operation ** with negative variables to float";
		actual float = float4 ** int7;
		floatActual = actual;
		floatExpect = -2197000.0;
		assertTrue();
	end
	
	function runArithmeticFunction17(){@Test}	
		variation = "operation ** with variables to float";
		floatActual = float3 ** int7;
		floatExpect = 2197000.0;
		assertTrue();
	end
	
	function runArithmeticFunction18(){@Test}	
		variation = "operation ** with negative variables to float";
		floatActual = float4 ** int7;
		floatExpect = -2197000.0;
		assertTrue();
	end

	
end // EFloat006

