package fvt.xml.handlers;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;
import eglx.xml.XmlLib;
import fvt.xml.handlers.data.MyRecord;

/* 
* @name FlexRecordLib
* @title The function test program for Flex Record
* @keywords Flex Record
* @author EDT team
* @createDate 2011/08/26
* @description 
* Test Flexible Records, convert Record to and from XML
*/

library FlexRecordLib

    myrec MyRecord{itemName = "name", items =["item1", "item2"],litems =["itm1234567" as string(5), "item23456789" as string(5)], item2 = 5,
    		litem = "abcdefghij",
            //binary=1245.55,
            //sbinary=45.55,
            //            shrt = 1245, intt = 1245, lng = 1245,
            //dbl=1245.55,
            bint = 1245, bdec = 1245.55, flt = 1245.44E20,
            //            numb = 245.55, 
            datefield = "03/27/2009", timefield = "17:16:15", ts = "2009/03/27 14:12:05",
            //            timefield = "14:12:05",
            //hhex ="123456abcdef",
            bool = true, bool2 = false,
            bits1 = 0xF00D, bits1 = 0x773415 };
    myrec2 MyRecord{};

    function testJSONConversionName(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.name");
        LogResult.assertStringEqual1(myrec.itemName, myrec2.itemName);
    end

    function testJSONConversionLItem(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.litem");
        LogResult.assertStringEqual1("abcdefghij" as string(5), myrec2.litem);
    end

    function testJSONConversionItemsSize(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.items.getSize()");
        LogResult.assertBigIntEqual1(myrec.items.getSize(), myrec2.items.getSize());
    end

    function testJSONConversionItems(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        i int = 0;
        while(i < myrec.items.getSize())
            i += 1;
            LogResult.logStdOut("MyRecord.items[" + i + "]");
            LogResult.assertStringEqual("Fail in MyRecord.items[" + i + "]", myrec.items[i], myrec2.items[i]);
        end
    end

    function testJSONConversionLItemsSize(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.litems.getSize()");
        LogResult.assertBigIntEqual1(myrec.litems.getSize(), myrec2.litems.getSize());
    end

    function testJSONConversionLItems(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        i int = 0;
        while(i < myrec.litems.getSize())
            i += 1;
            LogResult.logStdOut("MyRecord.items[" + i + "]");
            LogResult.assertStringEqual("Fail in MyRecord.items[" + i + "]", myrec.litems[i], myrec2.litems[i]);
        end
    end

    function testJSONConversionItem2(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.item2");
        LogResult.assertBigIntEqual1(myrec.item2, myrec2.item2);
    end

    //    function testJSONConversionShrt(){@Test}
    //        strlib.defaultDateFormat = "MM/dd/yyyy";
    //        myrec.nStr = null;
    //
    //        xml string;
    //        //xml = convertToXML(myrec);
    //        xml = XMLLib.convertToXML(myrec,true);
    //
    //        LogResult.logStdOut("<xmp>" + xml + "</xmp>");
    //
    //        //convertFromXML(xml, myrec2);
    //         XMLLib.convertFromXML(xml, myrec2);
    //
    //        LogResult.logStdOut("MyRecord.shrt");
    //        LogResult.assertBigIntEqual1(myrec.shrt, myrec2.shrt);
    //    end
    
    //    function testJSONConversionIntt(){@Test}
    //        strlib.defaultDateFormat = "MM/dd/yyyy";
    //        myrec.nStr = null;
    //
    //        xml string;
    //        //xml = convertToXML(myrec);
    //        xml = XMLLib.convertToXML(myrec,true);
    //
    //        LogResult.logStdOut("<xmp>" + xml + "</xmp>");
    //
    //        //convertFromXML(xml, myrec2);
    //         XMLLib.convertFromXML(xml, myrec2);
    //
    //        LogResult.logStdOut("MyRecord.intt");
    //        LogResult.assertBigIntEqual1(myrec.intt, myrec2.intt);
    //    end
    
    //    function testJSONConversionLng(){@Test}
    //        strlib.defaultDateFormat = "MM/dd/yyyy";
    //        myrec.nStr = null;
    //
    //        xml string;
    //        //xml = convertToXML(myrec);
    //        xml = XMLLib.convertToXML(myrec,true);
    //
    //        LogResult.logStdOut("<xmp>" + xml + "</xmp>");
    //
    //        //convertFromXML(xml, myrec2);
    //        XMLLib.convertFromXML(xml, myrec2);
    //
    //        LogResult.logStdOut("MyRecord.lng");
    //        LogResult.assertBigIntEqual1(myrec.lng, myrec2.lng);
    //    end
    
    function testJSONConversionBint(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.bint");
        LogResult.assertBigIntEqual1(myrec.bint, myrec2.bint);
    end

    function testJSONConversionBdec(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.bdec");
        LogResult.assertDecimalEqual1(myrec.bdec, myrec2.bdec);
    end

    function testJSONConversionFlt(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.flt");
        LogResult.assertFloatEqual1(myrec.flt, myrec2.flt);
    end

    //    function testJSONConversionNumb(){@Test}
    //        strlib.defaultDateFormat = "MM/dd/yyyy";
    //        myrec.nStr = null;
    //
    //        xml string;
    //        //xml = convertToXML(myrec);
    //        xml = XMLLib.convertToXML(myrec,true);
    //
    //        LogResult.logStdOut("<xmp>" + xml + "</xmp>");
    //
    //        //convertFromXML(xml, myrec2);
    //        XMLLib.convertFromXML(xml, myrec2);
    //
    //        LogResult.logStdOut("MyRecord.numb");
    //        LogResult.assertDecimalEqual1(myrec.numb, myrec2.numb);
    //    end
    
    function testJSONConversionDate(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.datefield");
        LogResult.assertDateEqual1(myrec.datefield, myrec2.datefield);
    end

    function testJSONConversionTime(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.timefield");
        LogResult.assertTimeEqual1(myrec.timefield, myrec2.timefield);
    end

    function testJSONConversionTS(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.ts");
        LogResult.assertTimestampEqual1(myrec.ts, myrec2.ts);
    end

    function testJSONConversionBool1(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.bool");
        LogResult.assertTrue1(myrec.bool == myrec2.bool);
    end

    function testJSONConversionBool2(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.bool2");
        LogResult.assertTrue1(myrec.bool2 == myrec2.bool2);
    end

    function testJSONConversionnStr(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.nStr");
        LogResult.assertTrue1(null == myrec2.nStr);
    end

    function testJSONConversionnStr2(){@Test}
        myrec.nStr2 = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.nStr2");
        LogResult.assertTrue1(null == myrec2.nStr2);
    end

    function testJSONConversionBits1(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.bits1");
        LogResult.assertTrue1(myrec.bits1 as bytes(2) == myrec2.bits1 as bytes(2));
    end

    function testJSONConversionBits2(){@Test}
        myrec.nStr = null;

        xml string;
        //xml = convertToXML(myrec);
        xml = XMLLib.convertToXML(myrec, true);

        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        XMLLib.convertFromXML(xml, myrec2);

        LogResult.logStdOut("MyRecord.bits2");
        LogResult.assertTrue1(myrec.bits2 == myrec2.bits2);
    end

    function testParsingException(){@Test}
        myrec.nStr2 = null;

        xml string = "<xmp><xmp>";
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        //convertFromXML(xml, myrec2);
        pass boolean = false;
        try
        	XMLLib.convertFromXML(xml, myrec2);
		onException(exception AnyException)
			pass = true;
        	LogResult.logStdOut("expected exception:" + exception.message);
		end
		LogResult.assertTrue1(pass);
    end
end