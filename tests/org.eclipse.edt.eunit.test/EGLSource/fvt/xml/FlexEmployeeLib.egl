package fvt.xml;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;
import org.eclipse.edt.eunit.runtime.targetLangKind;
import eglx.rbd.StrLib;
import eglx.xml.XmlLib;

/* 
* @name FlexEmployeeLib
* @title The function test program for Flex Employee Record
* @keywords Flex Employee Record
* @author EDT team
* @createDate 2011/08/26
* @description 
* Test Flexible Record, convert Employee Record to and from XML
*/

library FlexEmployeeLib

	function testXMLOnJava() {@Test{targetLang = [JAVA]}}
		// Revert all the Test annotations to include Java execution
		// on this enhancement has been worked
		LogResult.skipped("Java Only Bug 351892");
	end
	
    emp Employee{EmpNo{department = "sales", value = 10}, LastName = "Smith"};//, dict{abc="abc",cde="cde"} };
    emp2 Employee{};

    function initEmp(emp Employee)
        emp.dict = new Dictionary{abc = "abc", cde = "cde"};

        empNo1 EmpNumber{department = "shipping", value = 20};
        emp.array.appendElement(empNo1);
        empNo2 EmpNumber{department = "admin", value = 20};
        emp.array.appendElement(empNo2);

        ID int[] =[1, 3, 5, 9];
        lastName string[] =["Cervantes", "Moliere", "Twain", "Tolstoy"];
        firstName string[] =["Miguel", "", "Mark", "Lev"];
        age int[] =[90, 29, 30, 55];

        emp.dict["IDs"] = ID;
        emp.dict["dictEmpNo1"] = empNo1;
    end

    function testJSONConversionStump(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, false);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        LogResult.logStdOut("\"stump\" check");
        LogResult.assertTrue1(strlib.indexOf(xml, "<stump>") == 1);
    end

    function testJSONConversionStumpDoc(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        LogResult.logStdOut("\"stump\" check");
        LogResult.assertTrue1(strlib.indexOf(xml, "<?xml version=\"1.0\" encoding=\"UTF-8\"?><stump>") == 1);
    end

    function testJSONConversionDepartment(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        LogResult.logStdOut("\"department\" check");
        LogResult.assertTrue1(strlib.indexOf(xml, "department") == 0);
    end

    function testJSONConversionDept(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        LogResult.logStdOut("\"dept\" check");
        LogResult.assertTrue1(strlib.indexOf(xml, "dept") != 0);
    end

    function testJSONConversionValue(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        LogResult.logStdOut("\"value\" check");
        LogResult.assertTrue1(strlib.indexOf(xml, "value") == 0);
    end

    function testJSONConversionEmpno(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        LogResult.logStdOut("\"empno\" check");
        LogResult.assertTrue1(strlib.indexOf(xml, "EmpNo") != 0);
    end

    function testJSONConversionEmpNoDepart(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        XMLLib.convertFromXML(xml, emp2);

        LogResult.logStdOut("Employee.EmpNo.department ");
        LogResult.assertStringEqual1(emp.EmpNo.department, emp2.EmpNo.department);
    end

    function testJSONConversionEmpNoValue(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        XMLLib.convertFromXML(xml, emp2);

        LogResult.logStdOut("Employee.EmpNo.value ");
        LogResult.assertBigIntEqual1(emp.EmpNo.value, emp2.EmpNo.value);
    end

    function testJSONConversionEmpArrSize(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        XMLLib.convertFromXML(xml, emp2);

        LogResult.logStdOut("Employee.array.getSize() ");
        LogResult.assertBigIntEqual1(emp.array.getSize(), emp2.array.getSize());
    end

    function testJSONConversionEmpArray(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        XMLLib.convertFromXML(xml, emp2);

        i int = 0;
        while(i < emp.array.getSize())
            i += 1;

            LogResult.logStdOut("Employee.array[" + i + "].department ");
            LogResult.assertStringEqual("Fail in Employee.array[" + i + "].department ", emp.array[i].department, emp2.array[i].department);

            LogResult.logStdOut("Employee.array[" + i + "].value ");
            LogResult.assertBigIntEqual("Fail in Employee.array[" + i + "].value ", emp.array[i].value, emp2.array[i].value);
        end
    end

    function testJSONConversionEmpLastName(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        XMLLib.convertFromXML(xml, emp2);

        LogResult.logStdOut("Employee.LastName ");
        LogResult.assertStringEqual1(emp.LastName, emp2.LastName);
    end

    function testJSONConversionEmpDict1(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        XMLLib.convertFromXML(xml, emp2);

        LogResult.logStdOut("Employee.dict[\"abc\"] ");
        LogResult.assertStringEqual1(emp.dict["abc"], emp2.dict["abc"]);
    end

    function testJSONConversionEmpDict2(){@Test{targetLang = [JAVASCRIPT]}}
        initEmp(emp);

        //xml string = convertToXML(emp);
        xml string = XMLLib.convertToXML(emp, true);
        LogResult.logStdOut("<xmp>" + xml + "</xmp>");

        XMLLib.convertFromXML(xml, emp2);

        LogResult.logStdOut("Employee.dict[\"cde\"] ");
        LogResult.assertStringEqual1(emp.dict["cde"], emp2.dict["cde"]);
    end
end