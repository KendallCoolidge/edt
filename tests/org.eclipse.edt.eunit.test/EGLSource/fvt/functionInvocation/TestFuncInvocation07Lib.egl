package fvt.functionInvocation;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/*
* @name TestFuncInvocation07Lib
* @title The function test program for the EGL Function Invocation
* @keywords EGL Function Invocation
* @author EDT team
* @createDate 2011/08/09
* @description 
* This library is designed to test the EGL Function Invocation
*/

library TestFuncInvocation07Lib

    gblString string;
    gblInt int;
    gblRec myRecord;

    function testLocalInParameters1b(){@Test}
        gblString = "abc";
        localInString(gblString);
        LogResult.logStdOut("Local function IN String parameter - 1b");
        LogResult.assertStringEqual1("abc", gblString);
    end

    function testLocalInParameters2b(){@Test}
        gblInt = 10;
        localInInt(gblInt);
        LogResult.logStdOut("Local function IN integer parameter - 2b");
        LogResult.assertBigIntEqual1(10, gblInt);
    end

    function testLocalInParameters3b(){@Test}
        gblRec.s = "abc";
        gblRec.i = 10;
        localInRecord(gblRec);
        LogResult.logStdOut("Local function IN record parameter - 3b");
        LogResult.assertTrue1((gblRec.s == "abc") &&(gblRec.i == 10));
    end

    function testLocalOutParameters1b(){@Test}
        gblString = "abc";
        localOutString(gblString);
        LogResult.logStdOut("Local function OUT String parameter - 1b");
        LogResult.assertStringEqual1("cde", gblString);
    end

    function testLocalOutParameters2b(){@Test}
        gblInt = 10;
        localOutInt(gblInt);
        LogResult.logStdOut("Local function OUT integer parameter - 2b");
        LogResult.assertBigIntEqual1(5, gblInt);
    end

    function testLocalOutParameters3b(){@Test}
        gblRec.s = "abc";
        gblRec.i = 10;
        localOutRecord(gblRec);
        LogResult.logStdOut("Local function OUT record parameter - 3b");
        LogResult.assertTrue1((gblRec.s == "cde") &&(gblRec.i == 5));
    end

    function testLocalInOutParameters1b(){@Test}
        gblString = "abc";
        localInOutStringWithCheck(gblString);
        LogResult.logStdOut("Local function INOUT String parameter - 1b");
        LogResult.assertStringEqual1("cde", gblString);
    end

    function testLocalInOutParameters2b(){@Test}
        gblInt = 10;
        localInOutIntWithoutCheck(gblInt);
        LogResult.logStdOut("Local function INOUT integer parameter - 2b");
        LogResult.assertBigIntEqual1(5, gblInt);
    end

    function testLocalInOutParameters3b(){@Test}
        gblRec.s = "abc";
        gblRec.i = 10;
        localInOutRecord(gblRec);
        LogResult.logStdOut("Local function INOUT record parameter - 3b");
        LogResult.assertTrue1((gblRec.s == "cde") &&(gblRec.i == 5));
    end

    /*********************************************************************/

    function localInString(s string in) returns(string)
        s = "cde";
        checkGblString("IN", "abc");
        return(s);
    end

    function localInInt(i int in) returns(int)
        i = 5;
        checkGblInt("IN", 10);
        return(i);
    end

    function localInRecord(rec myRecord in) returns(myRecord)
        rec.s = "cde";
        rec.i = 5;
        checkGblRec("IN", new myRecord{s = "abc", i = 10});
        return(rec);
    end

    function localOutString(s string out) returns(string)
        s = "cde";
        checkGblString("OUT", "abc");
        return(s);
    end

    function localOutInt(i int out) returns(int)
        i = 5;
        checkGblInt("OUT", 10);
        return(i);
    end

    function localOutRecord(rec myRecord out) returns(myRecord)
        rec.s = "cde";
        rec.i = 5;
        checkGblRec("OUT", new myRecord{s = "abc", i = 10});
        return(rec);
    end

    function localInOutString(s string inOut) returns(string)
        s = "cde";
        checkGblString("INOUT", "cde");
        return(s);
    end
       
    function localInOutStringWithCheck(s string inOut) returns(string)
        s = "cde";
        return(s);
    end

    function localInOutInt(i int inOut) returns(int)
        i = 5;
        checkGblInt("INOUT", 5);
        return(i);
    end
    
   function localInOutIntWithoutCheck(i int inOut) returns(int)
        i = 5;
        return(i);
    end

    function localInOutRecord(rec myRecord inOut) returns(myRecord)
        rec.s = "cde";
        rec.i = 5;
        checkGblRec("INOUT", new myRecord{s = "cde", i = 5});
        return(rec);
    end

    /*******************************************************************/

    function checkGblString(scenario string in, expectedvalue string in)
        LogResult.logStdOut("Local function " + scenario + " string parameter - 1a");
        LogResult.assertStringEqual1(expectedvalue, gblString);
    end

    function checkGblInt(scenario string in, expectedvalue int in)
        LogResult.logStdOut("Local function " + scenario + " integer parameter - 2a");
        LogResult.assertBigIntEqual1(expectedvalue, gblInt);
    end

    function checkGblRec(scenario string in, expectedvalue myRecord in)
        LogResult.logStdOut("Local function " + scenario + " record parameter - 3a");
        LogResult.assertTrue1((gblRec.s == expectedvalue.s) &&(gblRec.i == expectedvalue.i));
    end

end