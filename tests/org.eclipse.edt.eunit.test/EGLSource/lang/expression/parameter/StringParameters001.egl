package lang.expression.parameter;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/* 
* @name 
* @title Function paramater declarations of type String all valid modifiers passing string literals
* @keywords FOR
* @author EDT team
* @createDate 2012/03/08
* @description 
*  Function paramater declarations of type String all valid modifiers passing string literals
*  variations added for for Enhancement 372275 Make string a reference type
*/
library StringParameters001
	toggleValue int;
	CONST updated string = "modified";
	
	function testFunctionParameterIn1() {@Test}
		toggleValue = 1;
        switchOnInParameter("aaa.aa");
    end	
    
  	function testFunctionParameterIn2() {@Test}
  		toggleValue = 2;
        switchOnInParameter("bbb.bb");
    end	
    
    function testFunctionParameterIn3() {@Test}
    	toggleValue = 3;
        switchOnInParameter("ccc.cc");
    end	

    function testFunctionParameterInWithUpdate() {@Test}
    	toggleValue = 3;
        updateInParameter("ccc.cc");
        // always true for literal values
        LogResult.assertTrue1(true);
    end	
    
    function testFunctionParameterInOut1() 
//    	Produces validation error
//    	toggleValue = 1;
//      switchOnInOutParameter("aaa.aa");
    end
    
    function testFunctionParameterInOut2() 
//    	Produces validation error
//    	toggleValue = 2;
//    	switchOnInOutParameter("bbb.bb");
    end
           
    function testFunctionParameterInOut3()         
//    	Produces validation error
//    	toggleValue = 3;
//	   	switchOnInOutParameter("ccc.cc");
    end
    
    function testFunctionParameterInOutWithUpdate() 
//      Produces validation error
//      updateInOutParameter("ccc.cc");
    end	
    
    function testFunctionParameterOutWithUpdate()  
//		Validation error when passing literal or constant to an OUT parameter
//      updateOutParameter("ccc.cc");    
    end	
        
	function testFunctionParameterDefault1()   {@Test}
		// Enhancement 372275 Make string a reference type
		toggleValue = 1;
        switchOnDefaultParameter("aaa.aa");
    end
    
    function testFunctionParameterDefault2()   {@Test}
	   // Enhancement 372275 Make string a reference type
   	   toggleValue = 2;
       switchOnDefaultParameter("bbb.bb");  
    end
    
    function testFunctionParameterDefault3()    {@Test}
        // Enhancement 372275 Make string a reference type
    	toggleValue = 3;                                            
        switchOnDefaultParameter("ccc.cc");
    end
    
    function testFunctionParameterDefaultWithUpdate()  {@Test}
        // Enhancement 372275 Make string a reference type
        updateDefaultParameter("333.33");
        // always true for literal values
        LogResult.assertTrue1(true);
    end	
    
   	function testFunctionParameterConstIn1() {@Test}
		toggleValue = 1;
        switchOnConstInParameter("aaa.aa");
    end
    
    function testFunctionParameterConstIn2() {@Test}
   		toggleValue = 2;
        switchOnConstInParameter("bbb.bb");  
    end
    
    function testFunctionParameterConstIn3() {@Test}  
    	toggleValue = 3;                                            
        switchOnConstInParameter("ccc.cc");
    end
    
    function testFunctionParameterConstInWithUpdate()                                            
        // called function always results in a validation error
    end
      
   	function testFunctionParameterConstInOut1()
//		Produces validation error
//		toggleValue = 1;
//      switchOnConstInOutParameter("aaa.aa");
    end
    
    function testFunctionParameterConstInOut2() 
//   	Produces validation error
//   	toggleValue = 2;
//      switchOnConstInOutParameter("bbb.bb");  
    end
    
    function testFunctionParameterConstInOut3() 
//    	Produces validation error
//    	toggleValue = 3;                                            
//      switchOnConstInOutParameter("ccc.cc");
    end

    function testFunctionParameterConstInOutWithUpdate()                                            
        // called function always results in a validation error
    end
    
   	function testFunctionParameterConstDefault1() {@Test}
		// Enhancement 372275 Make string a reference type
		toggleValue = 1;
        switchOnConstDefaultParameter("aaa.aa");
    end
    
    function testFunctionParameterConstDefault2() {@Test}
		// Enhancement 372275 Make string a reference type
   	    toggleValue = 2;
       switchOnConstDefaultParameter("bbb.bb");  
    end
    
    function testFunctionParameterConstDefault3() {@Test}
		// Enhancement 372275 Make string a reference type
    	toggleValue = 3;                                            
        switchOnConstDefaultParameter("ccc.cc");
    end
    
    function testFunctionParameterConstDefaultWithUpdate()                                            
        // called function always results in a validation error
    end
   
    function switchOnInParameter(paramStr string in)
    	resolved int = -1;
        case(paramStr)
            when("aaa.aa")
                resolved = 1;
            when("bbb.bb")
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

    function switchOnInOutParameter(paramStr string inOut)
    	resolved int = -1;
        case(paramStr)
            when("aaa.aa")
                resolved = 1;
            when("bbb.bb")
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnDefaultParameter(paramStr string)
    	resolved int = -1;
        case(paramStr)
            when("aaa.aa")
                resolved = 1;
            when("bbb.bb")
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

   function switchOnConstDefaultParameter(paramStr string const)
    	resolved int = -1;
        case(paramStr)
            when("aaa.aa")
                resolved = 1;
            when("bbb.bb")
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
 
    function switchOnConstInParameter(paramStr string const in)
    	resolved int = -1;
        case(paramStr)
            when("aaa.aa")
                resolved = 1;
            when("bbb.bb")
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
 
    function switchOnConstInOutParameter(paramStr string const inOut)
    	resolved int = -1;
        case(paramStr)
            when("aaa.aa")
                resolved = 1;
            when("bbb.bb")
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
 
    function updateInParameter(paramStr string in)
    	paramStr = updated;
    end
    
    function updateInOutParameter(paramStr string inOut)
    	paramStr = updated;
    end

    function updateOutParameter(paramStr string out)
    	paramStr = updated;
    end
        
    function updateDefaultParameter(paramStr string )
    	paramStr = updated;
    end
/*   
   function updateConstInParameter(paramStr string const in)
   		paramStr = updated;
   end
   		
	function updateConstInOutParameter(paramStr string const inout)
		paramStr = updated;
	end
   		
	function updateConstDefaultParameter(paramStr string const)
		paramStr = updated;
	end
*/	
end
