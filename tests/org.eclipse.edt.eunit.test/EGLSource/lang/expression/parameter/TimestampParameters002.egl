package lang.expression.parameter;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/* 
* @name 
* @title Function paramater declarations of type Timestamp all valid modifiers passing sized Timestamps
* @keywords FOR
* @author EDT team
* @createDate 2011/10/05
* @description 
*  Function paramater declarations of type Timestamp all valid modifiers passing sized Timestamps
*/
library TimestampParameters002
	toggleValue int;
	const updated timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:55:55";
	const time1 timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
	const time2 timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
	const time3 timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";

	function testFunctionParameterIn1() {@Test}
		toggleValue = 1;
		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
        switchOnInParameter(localTime);
    end	
    
  	function testFunctionParameterIn2() {@Test}
  		toggleValue = 2;
  		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
        switchOnInParameter(localTime);
    end	
    
    function testFunctionParameterIn3() {@Test}
    	toggleValue = 3;
    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
        switchOnInParameter(localTime);
    end	

    function testFunctionParameterInWithUpdate() {@Test}
		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
        updateInParameter(localTime); 
        LogResult.assertTrue1(localTime == time3);
    end	
  
    function testFunctionParameterInOut1() 
//		Produces validation error
//    	toggleValue = 1;
//    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
//	    switchOnInOutParameter(localTime);
    end
    
    function testFunctionParameterInOut2()  
//    	Produces validation error
//    	toggleValue = 2;
//    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
//      switchOnInOutParameter(localtime);
    end
           
    function testFunctionParameterInOut3()  
//    	Produces validation error
//    	toggleValue = 3;
//    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
//        switchOnInOutParameter(localTime);
    end
    
    function testFunctionParameterInOutWithUpdate() 
//    	Produces validation error
//    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
//      	updateInOutParameter(localTime); 
    end	
    
    function testFunctionParameterOutWithUpdate() 
// 		Produces valiation error
//		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
//	    updateOutParameter(localTime);    
//      LogResult.assertTrue1(localTime == updated);
    end	
     
	function testFunctionParameterDefault1() {@Test}
    	toggleValue = 1;
    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
       switchOnDefaultParameter(localTime);
    end
    
    function testFunctionParameterDefault2() {@Test}
    	toggleValue = 2;
    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
        switchOnDefaultParameter(localTime); 
		LogResult.assertTrue1(true);
    end
    
    function testFunctionParameterDefault3() {@Test}  
    	toggleValue = 3;
    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
        switchOnDefaultParameter(localTime);
    end
    
    
    function testFunctionParameterDefaultWithUpdate() {@Test}
    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
        updateDefaultParameter(localTime);
        LogResult.assertTrue1(true);
    end	
    
   	function testFunctionParameterConstIn1() {@Test}
		toggleValue = 1;
		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
        switchOnConstInParameter(localTime);
    end
    
    function testFunctionParameterConstIn2() {@Test}
   		toggleValue = 2;
   		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
        switchOnConstInParameter(localTime);  
    end
    
    function testFunctionParameterConstIn3() {@Test}  
    	toggleValue = 3;        
		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";                                   
        switchOnConstInParameter(localTime);
    end
    
    function testFunctionParameterConstInWithUpdate()                                            
        // called function always results in a validation error
    end
    
   	function testFunctionParameterConstInOut1() //{@Test}
//   		Produces validation error
//		toggleValue = 1;
//		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
//      	switchOnConstInOutParameter(localTime);
    end
    
    function testFunctionParameterConstInOut2() //{@Test}
//    	Produces validation error
//   	toggleValue = 2;
//   	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
//      switchOnConstInOutParameter(localTime);  
    end
    
    function testFunctionParameterConstInOut3() //{@Test}  
//    	Produces validation error
//    	toggleValue = 3;        
//    	localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";                                    
//    	switchOnConstInOutParameter(localTime);
    end

    function testFunctionParameterConstInOutWithUpdate()                                            
        // called function always results in a validation error
    end
    
   	function testFunctionParameterConstDefault1() {@Test}
		toggleValue = 1;
		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
        switchOnConstDefaultParameter(localTime);
    end
    
    function testFunctionParameterConstDefault2() {@Test}
   		toggleValue = 2;
   		localTime timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
        switchOnConstDefaultParameter(localTime);
    end
    
    function testFunctionParameterConstDefault3() {@Test}  
    	toggleValue = 3;                                            
        switchOnConstDefaultParameter("1965-10-11 09:33:33");
    end
    
    function testFunctionParameterConstDefaultWithUpdate()                                            
        // called function always results in a validation error
    end
   
    function switchOnInParameter(localLen timeStamp in)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

    function switchOnInOutParameter(localLen timeStamp inOut)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnDefaultParameter(localLen timeStamp)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
   function switchOnConstDefaultParameter(localLen timeStamp const)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
  
    function switchOnConstInParameter(localLen timeStamp const in)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
 
    function switchOnConstInOutParameter(localLen timeStamp const inOut)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

    function updateInParameter(localLen timeStamp in)
    	localLen = "1965-10-11 09:55:55";
    end
    
    function updateInOutParameter(localLen timeStamp inOut)
    	localLen = "1965-10-11 09:55:55";
    end

    function updateOutParameter(localLen timeStamp out)
    	localLen = "1965-10-11 09:55:55";
    end
        
    function updateDefaultParameter(localLen timeStamp )
    	localLen = "1965-10-11 09:55:55";
    end
/*    
   function updateConstInParameter(localLen timeStamp const in)
   		localLen = "1965-10-11 09:55:55";
   end
   		
	function updateConstInOutParameter(localLen timeStamp const inout)
		localLen = "1965-10-11 09:55:55";
	end
   		
	function updateConstDefaultParameter(localLen timeStamp const)
		localLen = "1965-10-11 09:55:55";
	end
*/
end
