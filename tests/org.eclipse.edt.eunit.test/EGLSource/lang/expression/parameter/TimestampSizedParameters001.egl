package lang.expression.parameter;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/* 
* @name 
* @title Function paramater declarations of type sized Timestamp all valid modifiers passing string literals
* @keywords FOR
* @author EDT team
* @createDate 2011/10/05
* @description 
*  Function paramater declarations of type sized Timestamp all valid modifiers passing string literals
*/
library TimestampSizedParameters001
	toggleValue int;
	const updated timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:55:55";
	const time1 timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:11:11";
	const time2 timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:22:22";
	const time3 timeStamp("yyyyMMddHHmmss") = "1965-10-11 09:33:33";
	
	function testFunctionParameterIn1() {@Test}
		toggleValue = 1;
        switchOnInParameter("1965-10-11 09:11:11");
    end	
    
  	function testFunctionParameterIn2() {@Test}
  		toggleValue = 2;
        switchOnInParameter("1965-10-11 09:22:22");
    end	
    
    function testFunctionParameterIn3() {@Test}
    	toggleValue = 3;
        switchOnInParameter("1965-10-11 09:33:33");
    end	

    function testFunctionParameterInWithUpdate() {@Test}
//		Meaningless when passing literal or constant to an OUT parameter
// 		This is a place holder.
//      updateInParameter("1965-10-11 09:33:33"); 
        LogResult.assertTrue1(true);
    end	
    
    function testFunctionParameterInOut1() {@Test}
//		Validation error when passing literal or constant to an InOUT parameter
// 		This is a place holder.
//    	toggleValue = 1;
//      switchOnInOutParameter("1965-10-11 09:11:11");
		LogResult.assertTrue1(true);
    end
    
    function testFunctionParameterInOut2() {@Test}
//		Validation error when passing literal or constant to an InOUT parameter
// 		This is a place holder.
//    	toggleValue = 2;
//      switchOnInOutParameter("1965-10-11 09:22:22");
		LogResult.assertTrue1(true);
    end
           
    function testFunctionParameterInOut3() {@Test}         
//		Validation error when passing literal or constant to an InOUT parameter
// 		This is a place holder.
//    	toggleValue = 3;
//      switchOnInOutParameter("1965-10-11 09:33:33");
		LogResult.assertTrue1(true);
    end
    
    function testFunctionParameterInOutWithUpdate() {@Test}
//		Meaningless when passing literal or constant to an OUT parameter
// 		This is a place holder.
//      updateInOutParameter("1965-10-11 09:33:33"); 
        LogResult.assertTrue1(true);
    end	
    
    function testFunctionParameterOutWithUpdate() {@Test}
//		Validation error when passing literal or constant to an OUT parameter
// 		This is a place holder.
//      updateOutParameter("1965-10-11 09:33:33");    
		LogResult.assertTrue1(true);
    end	
        
	function testFunctionParameterDefault1() {@Test}
//		Validation error when passing literal or constant to an InOUT parameter
// 		This is a place holder.
//    	toggleValue = 1;
//      switchOnDefaultParameter("1965-10-11 09:11:11");
		LogResult.assertTrue1(true);
    end
    
    function testFunctionParameterDefault2() {@Test}
//		Validation error when passing literal or constant to an InOUT parameter
// 		This is a place holder.
//    	toggleValue = 2;
//      switchOnDefaultParameter("1965-10-11 09:22:22"); 
		LogResult.assertTrue1(true);
    end
    
    function testFunctionParameterDefault3() {@Test}  
//		Validation error when passing literal or constant to an InOUT parameter
// 		This is a place holder.
//    	toggleValue = 3;
//      switchOnDefaultParameter("1965-10-11 09:33:33");
		LogResult.assertTrue1(true);
    end
    
    function testFunctionParameterDefaultWithUpdate() {@Test}
//		Validation error when passing literal or constant to an InOUT parameter
// 		This is a place holder.
//        updateDefaultParameter("1965-10-11 09:33:33");
        LogResult.assertTrue1(true);
    end	
    
   	function testFunctionParameterConstIn1() {@Test}
		toggleValue = 1;
        switchOnConstInParameter("1965-10-11 09:11:11");
    end
    
    function testFunctionParameterConstIn2() {@Test}
   		toggleValue = 2;
        switchOnConstInParameter("1965-10-11 09:22:22");  
    end
    
    function testFunctionParameterConstIn3() {@Test}  
    	toggleValue = 3;                                            
        switchOnConstInParameter("1965-10-11 09:33:33");
    end
    
    function testFunctionParameterConstInWithUpdate()                                            
        // called function always results in a validation error
    end
      
   	function testFunctionParameterConstInOut1() 
//		Produces validation error
//		toggleValue = 1;
//       switchOnConstInOutParameter("1965-10-11 09:11:11");
    end
    
    function testFunctionParameterConstInOut2()  
//   	Produces validation error
//   	toggleValue = 2;
//      switchOnConstInOutParameter("1965-10-11 09:22:22");  
    end
    
    function testFunctionParameterConstInOut3()   
//    	Produces validation error
//    	toggleValue = 3;                                            
//      switchOnConstInOutParameter("1965-10-11 09:33:33");
    end

    function testFunctionParameterConstInOutWithUpdate()                                            
        // called function always results in a validation error
    end
    
   	function testFunctionParameterConstDefault1() 
//		Produces validation error
//		toggleValue = 1;
//      switchOnConstDefaultParameter("1965-10-11 09:11:11");
    end
    
    function testFunctionParameterConstDefault2()  
//   	Produces validation error
//   	toggleValue = 2;
//      switchOnConstDefaultParameter("1965-10-11 09:22:22");  
    end
    
    function testFunctionParameterConstDefault3()   
//    	Produces validation error
//    	toggleValue = 3;                                            
//      switchOnConstDefaultParameter("1965-10-11 09:33:33");
    end
    
    function testFunctionParameterConstDefaultWithUpdate()                                            
        // called function always results in a validation error
    end
   
    function switchOnInParameter(localLen timeStamp("yyyyMMddHHmmss") in)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

    function switchOnInOutParameter(localLen timeStamp("yyyyMMddHHmmss") inOut)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnDefaultParameter(localLen timeStamp("yyyyMMddHHmmss"))
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
   function switchOnConstDefaultParameter(localLen timeStamp("yyyyMMddHHmmss") const)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

    function switchOnConstInParameter(localLen timeStamp("yyyyMMddHHmmss") const in)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
 
    function switchOnConstInOutParameter(localLen timeStamp("yyyyMMddHHmmss") const inOut)
    	resolved int = -1;
        case(localLen)
            when(time1)
                resolved = 1;
            when(time2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
 
    function updateInParameter(localLen timeStamp("yyyyMMddHHmmss") in)
    	localLen = "1965-10-11 09:55:55";
    end
    
    function updateInOutParameter(localLen timeStamp("yyyyMMddHHmmss") inOut)
    	localLen = "1965-10-11 09:55:55";
    end

    function updateOutParameter(localLen timeStamp("yyyyMMddHHmmss") out)
    	localLen = "1965-10-11 09:55:55";
    end
        
    function updateDefaultParameter(localLen timeStamp("yyyyMMddHHmmss") )
    	localLen = "1965-10-11 09:55:55";
    end
/*    
   function updateConstInParameter(localLen timeStamp("yyyyMMddHHmmss") const in)
   		localLen = "1965-10-11 09:55:55";
   end
   		
	function updateConstInOutParameter(localLen timeStamp("yyyyMMddHHmmss") const inout)
		localLen = "1965-10-11 09:55:55";
	end
   		
	function updateConstDefaultParameter(localLen timeStamp("yyyyMMddHHmmss") const)
		localLen = "1965-10-11 09:55:55";
	end
*/
end
