package lang.expression.parameter;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/* 
* @name 
* @title Function paramater declarations of type NUMBER all valid modifiers passing integer literals
* @keywords FOR
* @author EDT team
* @createDate 2011/10/03
* @description 
*  Function paramater declarations of type NUMBER all valid modifiers passing integer literals
* 358651 InOut shouldn't accept a literal 
*/
library NumberParameters001
	toggleValue int;
	const updated int = 89;
	
	function testFunctionParameterIn1() {@Test}
		toggleValue = 1;
        switchOnInParameter(1);
    end	
    
  	function testFunctionParameterIn2() {@Test}
  		toggleValue = 2;
        switchOnInParameter(2);
    end	
    
    function testFunctionParameterIn3() {@Test}
    	toggleValue = 3;
        switchOnInParameter(3);
    end	

    function testFunctionParameterInWithUpdate() {@Test}
//		Meaningless when passing literal or constant to an IN parameter
	    updateInParameter(3);
   		LogResult.assertTrue1(true);
    end	

    function testFunctionParameterInOut1()  
//    	Produces validation error
//    	toggleValue = 1;
//        switchOnInOutParameter(1);
    end
    
    function testFunctionParameterInOut2()  
//    	Produces validation error
//    	toggleValue = 2;
//    	switchOnInOutParameter(2);
    end
           
    function testFunctionParameterInOut3()        
//    	Produces validation error
//    	toggleValue = 3;
//	   	switchOnInOutParameter(3);
    end
    

    function testFunctionParameterInOutWithUpdate()  
//		Produces validation error
//        updateInOutParameter(3);
    end	
    
    function testFunctionParameterOutWithUpdate()  
//		Validation error when passing literal or constant to an OUT parameter
//	    updateOutParameter(3); 
    end	
        
	function testFunctionParameterDefault1() {@Test}
		toggleValue = 1;
        switchOnDefaultParameter(1);
    end
    
    function testFunctionParameterDefault2() {@Test}
   		toggleValue = 2;
        switchOnDefaultParameter(2);  
    end
    
    function testFunctionParameterDefault3() {@Test}  
    	toggleValue = 3;                                            
        switchOnDefaultParameter(3);
    end
    
    function testFunctionParameterDefaultWithUpdate() {@Test}
        updateDefaultParameter(3 as number);
        // always true for literal values
        LogResult.assertTrue1(true);
    end	
    
   	function testFunctionParameterConstIn1() {@Test}
		toggleValue = 1;
        switchOnConstInParameter(1);
    end
    
    function testFunctionParameterConstIn2() {@Test}
   		toggleValue = 2;
        switchOnConstInParameter(2);  
    end
    
    function testFunctionParameterConstIn3() {@Test}  
    	toggleValue = 3;                                            
        switchOnConstInParameter(3);
    end
    
    function testFunctionParameterConstInWithUpdate()                                            
        // called function always results in a validation error
    end

   	function testFunctionParameterConstInOut1() 
//   	Produces validation error
//		toggleValue = 1;
//      switchOnConstInOutParameter(1);
    end
    
    function testFunctionParameterConstInOut2()  
//   	Produces validation error
//   	toggleValue = 2;
//       switchOnConstInOutParameter(2);  
    end
    
    function testFunctionParameterConstInOut3()  
//    	Produces validation error
//    	toggleValue = 3;                                            
//      switchOnConstInOutParameter(3);
    end
 
    function testFunctionParameterConstInOutWithUpdate()                                            
        // called function always results in a validation error
    end
    
   	function testFunctionParameterConstDefault1() {@Test}
		toggleValue = 1;
        switchOnConstDefaultParameter(1);
    end
    
    function testFunctionParameterConstDefault2() {@Test}
   		toggleValue = 2;
        switchOnConstDefaultParameter(2);  
    end
    
    function testFunctionParameterConstDefault3() {@Test}  
    	toggleValue = 3;                                            
        switchOnConstDefaultParameter(3);
    end
    
    function testFunctionParameterConstDefaultWithUpdate()                                            
        // called function always results in a validation error
    end
    
    function switchOnInParameter(localLen number in)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

    function switchOnInOutParameter(localLen number inOut)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnDefaultParameter(localLen number)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
   function switchOnConstDefaultParameter(localLen number const)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnConstInParameter(localLen number const in)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnConstInOutParameter(localLen number const inOut)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function updateInParameter(localLen number in)
    	localLen = 89;
    end
    
    function updateInOutParameter(localLen number inOut)
    	localLen = 89;
    end

    function updateOutParameter(localLen number out)
    	localLen = 89;
    end
        
    function updateDefaultParameter(localLen number )
    	localLen = 89;
    end
/*    
   function updateConstInParameter(localLen number const in)
   		localLen = 89;
   end
   		
	function updateConstInOutParameter(localLen number const inout)
		localLen = 89;
	end
   		
	function updateConstDefaultParameter(localLen number const)
		localLen = 89;
	end
*/
end
