package lang.expression.parameter;

import org.eclipse.edt.eunit.runtime.LogResult;
import org.eclipse.edt.eunit.runtime.Test;

/* 
* @name 
* @title Function paramater declarations of type ANY all valid modifiers passing integer literals
* @keywords FOR
* @author EDT team
* @createDate 2011/10/03
* @description 
*  Function paramater declarations of type ANY all valid modifiers passing integer literals
* 358651 InOut shouldn't accept a literal 
*/
library AnyParameters001
	toggleValue int;
	const updated int = 89;
	
	function testFunctionParameterIn1() {@Test}
		toggleValue = 1;
        switchOnInParameter(1);
    end	
    
  	function testFunctionParameterIn2() {@Test}
  		toggleValue = 2;
        switchOnInParameter(2);
    end	
    
    function testFunctionParameterIn3() {@Test}
    	toggleValue = 3;
        switchOnInParameter(3);
    end	

    function testFunctionParameterInWithUpdate() {@Test}
    	// meaningless but possible
      	LogResult.assertTrue1(updateInParameter(3));
    end	

    function testFunctionParameterInOut1() 
// 		called function always results in a validation error
// 		IWN.VAL.6716.e The argument 1 cannot be passed to the inOut or Out parameter localLen of the 
// 		function switchOnInOutParameter. The types int and any are not reference compatible. 
//    	  toggleValue = 1;
//        switchOnInOutParameter(1);
    end
    
    function testFunctionParameterInOut2() 
// 		called function always results in a validation error\
//    	toggleValue = 2;
//    	switchOnInOutParameter(2);
    end
           
    function testFunctionParameterInOut3()     
// 		called function always results in a validation error    
//    	toggleValue = 3;
//    	switchOnInOutParameter(3);
    end
 

    function testFunctionParameterInOutWithUpdate() 
//		Meaningless when passing literal or constant to an INOUT parameter
// 		The argument 3 cannot be passed to the inOut or Out parameter localLen of the function updateInOutParameter. 
//      The types int and any are not reference compatible. 
//	    updateInOutParameter(3);
    end	
    
    function testFunctionParameterOutWithUpdate() 
//		Validation error when passing literal or constant to an OUT parameter
// 		Error in argument 3 in function invocation updateOutParameter. 
// 		Constants, literals and string literal expressions are not valid for use with parameters defined with the OUT modifier.
//    	updateOutParameter(3);
    end	
        
	function testFunctionParameterDefault1() {@Test}
		toggleValue = 1;
        switchOnDefaultParameter(1);
    end
    
    function testFunctionParameterDefault2() {@Test}
   		toggleValue = 2;
        switchOnDefaultParameter(2);  
    end
    
    function testFunctionParameterDefault3() {@Test}  
    	toggleValue = 3;                                            
        switchOnDefaultParameter(3);
    end
    
    function testFunctionParameterDefaultWithUpdate() {@Test}
        // always true for literal values
        LogResult.assertTrue1(updateDefaultParameter(3));
    end	
    
   	function testFunctionParameterConstIn1() {@Test}
		toggleValue = 1;
        switchOnConstInParameter(1);
    end
    
    function testFunctionParameterConstIn2() {@Test}
   		toggleValue = 2;
        switchOnConstInParameter(2);  
    end
    
    function testFunctionParameterConstIn3() {@Test}  
    	toggleValue = 3;                                            
        switchOnConstInParameter(3);
    end
    
    function testFunctionParameterConstInWithUpdate()                                            
        // called function always results in a validation error
    end
     
   	function testFunctionParameterConstInOut1() 
// 		called function always results in a validation error
// 		IWN.VAL.6716.e 4 The argument 1 cannot be passed to the inOut or Out parameter localLen of the 
// 		function switchOnInOutParameter. The types int and any are not reference compatible. 
//		toggleValue = 1;
//      switchOnConstInOutParameter(1);
    end
    
    function testFunctionParameterConstInOut2() 
// 		called function always results in a validation error
// 		IWN.VAL.6716.e 4 The argument 2 cannot be passed to the inOut or Out parameter localLen of the 
// 		function switchOnInOutParameter. The types int and any are not reference compatible. 
//   	toggleValue = 2;
//      switchOnConstInOutParameter(2);  
    end
    
    function testFunctionParameterConstInOut3()
// 		called function always results in a validation error
// 		IWN.VAL.6716.e 4 The argument 3 cannot be passed to the inOut or Out parameter localLen of the 
// 		function switchOnInOutParameter. The types int and any are not reference compatible. 
//    	toggleValue = 3;                                            
//        switchOnConstInOutParameter(3);
    end

    function testFunctionParameterConstInOutWithUpdate()                                            
        // called function always results in a validation error
    end
    
   	function testFunctionParameterConstDefault1() {@Test}
		toggleValue = 1;
        switchOnConstDefaultParameter(1);
    end
    
    function testFunctionParameterConstDefault2() {@Test}
   		toggleValue = 2;
        switchOnConstDefaultParameter(2);  
    end
    
    function testFunctionParameterConstDefault3() {@Test}  
    	toggleValue = 3;                                            
        switchOnConstDefaultParameter(3);
    end
    
    function testFunctionParameterConstDefaultWithUpdate()                                            
        // called function always results in a validation error
    end
    
    function switchOnInParameter(localLen any in)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end

    function switchOnInOutParameter(localLen any inOut)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnDefaultParameter(localLen any)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
   function switchOnConstDefaultParameter(localLen any const)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnConstInParameter(localLen any const in)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function switchOnConstInOutParameter(localLen any const inOut)
    	resolved int = -1;
        case(localLen)
            when(1)
                resolved = 1;
            when(2)
                resolved = 2;
            otherwise
                resolved = 3;
        end
        LogResult.assertBigIntEqual1(toggleValue, resolved);
        toggleValue = 0;
    end
    
    function updateInParameter(localLen any in) returns( boolean )
    	ok boolean = localLen == 3;
    	localLen = 89;
    	return ok;
    end
    
    function updateInOutParameter(localLen any inOut)
    	localLen = 89;
    end

    function updateOutParameter(localLen any out)
    	localLen = 89;
    end
        
    function updateDefaultParameter(localLen any) returns( boolean )
    	ok boolean = localLen == 3;
    	localLen = 89;
    	return ok;
    end
    
end
