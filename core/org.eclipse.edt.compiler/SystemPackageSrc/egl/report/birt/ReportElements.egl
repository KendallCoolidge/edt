/*******************************************************************************
 * Copyright Â© 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package egl.report.birt;

import egl.idl.java.JavaObject;
import egl.idl.java.JavaProperty;

externalType Style type JavaObject
	{
		javaName = "IScriptStyle",
		packageName = "org.eclipse.birt.report.engine.api.script.instance"
	}
	
	color string { @JavaProperty };
	backgroundColor string { @JavaProperty };
	
	/*
	 * large, larger, medium, small, smaller, x-large, x-small, xx-large, xx-small.
	 * Or a string containing a number followed by abbreviated unit of measurement
	 * e.g. "12pt". For details, refer to the units of measurement described below.
	 */
	fontSize string { @JavaProperty };
	
	// normal, italic, oblique
	fontStyle string { @JavaProperty };
	
	/*
	 * normal, bold, bolder, lighter
	 * Or numbers multiples of 100 e.g. 100, 200, 300, ... upto 900
	 */
	fontWeight string { @JavaProperty };
	
	// Name of the font family e.g. serif, sans-serif, cursive etc.
	fontFamily string { @JavaProperty };
	
	// normal or small-caps
	fontVariant string { @JavaProperty };
	
	/*
	 * One of the standard formats defined by BIRT like "General Number",
	 * "Fixed", "Percent", "Scientific" etc. or a custom format string
	 * based on special pattern characters supported by DecimalFormat class
	 * in Java e.g. "$#,##0.000" to display the number as $1,234.560
	 */
	numberFormat string { @JavaProperty };
	
	/*
	 * One of the standard formats defined by BIRT :
	 * "General Date" - October 20, 1998 12:00:00 AM CDT
	 * "Long Date" - October 7, 1998
	 * "Medium Date" - Oct 7, 1998
	 * "Short Date" - 10/7/98
	 * "Long Time" - 12:00:00 AM CDT
	 * "Medium Time" - 12:00:00 AM
	 * "Short Time" - 24:00
	 * Or a custom format string based on date and time patterns supported
	 * by SimpleDateFormat class in Java e.g. "M/d/yyyy, E" to display the
	 * date as "6/7/1998, Sun"
	 */
	dateFormat string { @JavaProperty };
	
	/*
	 * A format string based on special symbols defined by BIRT
	 * viz. @ & ! > <
	 */
	stringFormat string { @JavaProperty };
	
	/*
	 * Horizontal alignment. Supported values are "left", "right",
	 * "center" and "justify"
	 */
	textAlign string { @JavaProperty };
	
	/*
	 * Vertical alignment. Supported values are "top", "middle" and "bottom"
	 */
	verticalAlign string { @JavaProperty };
	
	/*
	 * border style: solid, dotted, dashed, double
	 * border width: thin, medium, thick
	 *
	 * Unless border-style is set, border-color and border-width do not
	 * have any effect.
	 */
	borderBottomColor string { @JavaProperty };
	borderBottomStyle string { @JavaProperty };
	borderBottomWidth string { @JavaProperty };
	borderLeftColor string { @JavaProperty };
	borderLeftStyle string { @JavaProperty };
	borderLeftWidth string { @JavaProperty };
	borderRightColor string { @JavaProperty };
	borderRightStyle string { @JavaProperty };
	borderRightWidth string { @JavaProperty };
	borderTopColor string { @JavaProperty };
	borderTopStyle string { @JavaProperty };
	borderTopWidth string { @JavaProperty };
	
	// valid value "underline"
	textUnderline string { @JavaProperty };
	// valid value "overline"
	textOverline string { @JavaProperty };
	// valid value "line-through"
	textLineThrough string { @JavaProperty };
	
	/*
	 * Sets whether a background image is fixed or scrolls with the rest of the page.
	 * Valid values: scroll, fixed.
	 */
	backgroundAttachment string { @JavaProperty };
	
	/* URI of the background image file */
	backgroundImage string { @JavaProperty };
	
	/*
	 * Horizontal position of the background image.
	 * center, left, right
	 * Or a string containing a number followed by abbreviated unit of measurement
	 * e.g. "12pt". For details, refer to the units of measurement described below.
	 */
	backgroundPositionX string { @JavaProperty };
	
	/*
	 * Vertical position of the background image.
	 * center, top, bottom
	 * Or a string containing a number followed by abbreviated unit of measurement
	 * e.g. "12pt". For details, refer to the units of measurement described below.
	 */
	backgroundPositionY string { @JavaProperty };
	
	/* repeat,
	 * no-repeat,
	 * repeat-x (repeat horizontally across the page),
	 * repeat-y (repeat vertically across the page)
	 */
	backgroundRepeat string { @JavaProperty };
	
	/*
	 * Can shrink if the actual content is smaller than the design size.
	 * Valid values: true, false
	 */
	canShrink string { @JavaProperty };
	
	// Valid values: inline, block, none
	displayType string { @JavaProperty { getMethod = "getDisplay", setMethod = "setDisplay" } };
	
	// Name of the master page
	masterPage string { @JavaProperty };
	
	// Valid values: always, auto, avoid, always-excluding-last, always-excluding-first
	pageBreakAfter string { @JavaProperty };
	pageBreakBefore string { @JavaProperty };
	
	// Valid values: avoid, auto
	pageBreakInside string { @JavaProperty };
	
	/*
	 * Sets whether to show this frame even if it is empty, or all its
	 * data elements are empty.
	 * Valid values: true, false
	 */
	showIfBlank string { @JavaProperty };
	
	// Valid values: capitalize, uppercase, lowercase, none
	textTransform string { @JavaProperty };
	
	/*
	 * Output format for which the element should be hidden.
	 * Valid values: all, pdf, html
	 */
	visibleFormat string { @JavaProperty };
	
	/*
	 * Valid values: normal, pre, nowrap
	 */
	whiteSpace string { @JavaProperty };
	
	/*
	 * All the remaining fields in this type are length values.
	 * Following different units of measurement can be used:
	 * em(em), ex(ex), pica(pc), point(pt), pixel(px), inch(in), millimeter(mm),
	 * centimeter(cm), percent(%).
	 * The string value is a number followed by abbreviated unit of measurement
	 * shown in parentheses above e.g. "2cm", "20mm", "1in".
	 */
	
	// Padding is the space between an element's content and its border.
	paddingTop string { @JavaProperty };
	paddingBottom string { @JavaProperty };
	paddingLeft string { @JavaProperty };
	paddingRight string { @JavaProperty };
	 
	// Margin is the space between border of an element and other elements.
	marginTop string { @JavaProperty };
	marginBottom string { @JavaProperty };
	marginLeft string { @JavaProperty };
	marginRight string { @JavaProperty };
	
	letterSpacing string { @JavaProperty };
	wordSpacing string { @JavaProperty };
	
	lineHeight string { @JavaProperty };
	
	textIndent string { @JavaProperty };
	
end

externalType ReportContext type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	// Sets value of a parameter.
	function setParameterValue( name string in, value any in );
	// Returns value of a parameter.
	function getParameterValue( name string in ) returns( any );
	
end

externalType RowData type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	// Get value of a column binding using its name.
	function getColumnValue( colName string in ) returns( any );
	
	// Get value of a column binding using its index.
	function getColumnValue( colIndex int in ) returns( any );
	
	// Get name of a column binding using its index.
	function getColumnName( colIndex int in ) returns( string );
	
	// Get number of column bindings.
	function getColumnCount() returns( int );
	
end

externalType ReportElementInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	/*
	 * set/get the height or width of an element. Different units of measurement
	 * can be used: em(em), ex(ex), pica(pc), point(pt), pixel(px), inch(in),
	 * millimeter(mm), centimeter(cm), percent(%). The string value is a number
	 * followed by abbreviated unit of measurement shown in parentheses above e.g.
	 * "2cm", "20mm", "1in".
	 */
	height string { @JavaProperty };
	width string { @JavaProperty };
	
	/*
	 * Get the parent of this element e.g. if this function is called
	 * on a label element which resides in a cell, then it will return
	 * the cell. Note that this function returns a ReportElementInstance.
	 * So to call the columnNumber of the cell, it will have to be casted
	 * into a CellInstance:
	 *
	 * elem ReportElementInstance = l.getParent();
	 * if( elem isa CellInstance )
	 *    c CellInstance = elem as CellInstance;
	 *    ...
	 * end
	 */
	function getParent() returns( ReportElementInstance );
	
	/*
	 * Get the row data i.e. set of column bindings. In the BIRT report designer,
	 * column bindings are listed under 'Binding' tab in the Property Editor view.
	 * Individual column bidings can be accessed using getColumnValue() function
	 * of RowData.
	 */
	function getRowData() returns( RowData );
	
	// Get the style of this element.
	function getStyle() returns( Style ) ;
	
	/*
	 * Get value of the specified named expression. In the BIRT report designer,
	 * named expressions are listed under 'Properties' tab in the Property Editor
	 * view. In the 'Properties' tab, choose 'Named Expressions' on left. To get
	 * value of a named expression, pass its name to this function.
	 */
	function getNamedExpressionValue( name string in ) returns( any );
	
end

externalType RowInstance extends ReportElementInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
end

externalType CellInstance extends ReportElementInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	/*
	 * Row span is the number of rows occupied by this cell.
	 */
	rowSpan int { @JavaProperty };
	
	/*
	 * Column span is the number of columns occupied by this cell.
	 */
	colSpan int { @JavaProperty };
	
	/*
	 * Get the column number in which this cell resides.
	 */
	columnNumber int { @JavaProperty{ getMethod="getColumn" } };
	
end

externalType ReportItemInstance extends ReportElementInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	helpText string { @JavaProperty };
	
end

externalType LabelInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	/*
	 * get/set label text.
	 */
	text string { @JavaProperty };
	
end

externalType TextInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	/*
	 * get/set the text.
	 */
	text string { @JavaProperty };
	
end

externalType DynamicTextInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	/*
	 * get/set the text.
	 */
	text string { @JavaProperty };
	
end

externalType DataInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	/*
	 * Get value of the bound expression associated with this data element.
	 */
	value any { @JavaProperty{ getMethod="getValue" } };
	
end

externalType ImageInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	// Text displayed when the cursor is moved over the image.
	altText string { @JavaProperty };
	
	// Get URI of a linked image (that is an image of type 'URI' or 'file')
	linkedImageURI string { @JavaProperty{ getMethod="getURI" } };
	
	// Get or set the URI of an image of type 'URI'
	imageURI string { @JavaProperty{ setMethod = "setURL", getMethod="getURL" } };
	
	// Get or set the name of an image of type 'embedded'
	embeddedImageName string { @JavaProperty{ setMethod = "setImageName", getMethod="getImageName" } };
	
	// Get or set the MIME type
	mimeType string { @JavaProperty };
	
	// Get or set the file name of an image of type 'file'
	resourceFolderImageFile string { @JavaProperty{ setMethod = "setFile", getMethod="getFile" } };
	
	// Get or set the data of an image of type 'dynamic'
	dynamicImageData blob { @JavaProperty{ setMethod = "setData", getMethod="getData" } };
	
end

externalType TableInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
	
	// The caption text shows up at top of the table.
	// It can be used to state what the table is about.
	caption string { @JavaProperty };
	
	// Whether the table header should be repeated on each page or not.
	repeatHeader boolean { @JavaProperty };
	
end

externalType ListInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
end

externalType GridInstance extends ReportItemInstance type JavaObject
	{
		eglIsSystemPart = yes
	}
end
