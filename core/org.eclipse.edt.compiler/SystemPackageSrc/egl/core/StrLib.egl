/*******************************************************************************
 * Copyright Â© 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package egl.core;

library StrLib
{
	eglIsSystemPart = yes
}
	function booleanAsString(value boolean in) returns(string)
		{eglSystemConstant = 132}
	end
	
	function byteLen(value char inout) returns(int) {eglSystemConstant = 59} end
	function byteLen(value mbchar inout) returns(int) {eglSystemConstant = 59} end
	function byteLen(value dbchar inout) returns(int) {eglSystemConstant = 59} end
	function byteLen(value unicode inout) returns(int) {eglSystemConstant = 59} end
	function byteLen(value hex inout) returns(int) {eglSystemConstant = 59} end
	function byteLen(value num inout) returns(int) {eglSystemConstant = 59} end
		
	function characterLen(text string in) returns(int)
		{eglSystemConstant = 60}
	end
	
	function clip(source string? in) returns(string?) {eglSystemConstant = 200} end	
	function clip(source string? in, clipType int? in) returns(string?) {eglSystemConstant = 200} end
	
	function formatDate(dateValue date? in, format string? in) returns(string?)
		{eglSystemConstant = 218, eglValidNumberOfArguments = [1, 2]}
	end
	
	function formatNumber(intValue smallint? in, format string? in) returns (string?) {eglSystemConstant = 203, eglValidNumberOfArguments = [1, 2]} end
	function formatNumber(intValue int? in, format string? in) returns (string?) {eglSystemConstant = 203, eglValidNumberOfArguments = [1, 2]} end
	function formatNumber(intValue bigint? in, format string? in) returns (string?) {eglSystemConstant = 203, eglValidNumberOfArguments = [1, 2]} end
	function formatNumber(decValue decimal? in, format string? in) returns (string?) {eglSystemConstant = 203, eglValidNumberOfArguments = [1, 2]} end
	function formatNumber(floatValue smallfloat? in, format string? in) returns (string?) {eglSystemConstant = 203, eglValidNumberOfArguments = [1, 2]} end
	function formatNumber(floatValue float? in, format string? in) returns (string?) {eglSystemConstant = 203, eglValidNumberOfArguments = [1, 2]} end

	function formatTime(timeValue time? in, format string? in) returns(string?)
		{eglSystemConstant = 219, eglValidNumberOfArguments = [1, 2]}
	end

	function formatTimeStamp(timestampvalue timestamp("yyyyMMddHHmmssffffff")? in, format string? in) returns(string?)
		{eglSystemConstant = 220, eglValidNumberOfArguments = [1, 2]}
	end
	
	function getNextToken(target char inout, source char in, sourceIndex int inout, sourceLen int inout, delimiters string in) returns(int) {eglSystemConstant = 55} end
	function getNextToken(target mbchar inout, source mbchar in, sourceIndex int inout, sourceLen int inout, delimiters string in) returns(int) {eglSystemConstant = 55} end
	function getNextToken(target dbchar inout, source dbchar in, sourceIndex int inout, sourceLen int inout, delimiters string in) returns(int) {eglSystemConstant = 55} end
	function getNextToken(target unicode inout, source unicode in, sourceIndex int inout, sourceLen int inout, delimiters string in) returns(int) {eglSystemConstant = 55} end
	function getNextToken(target hex inout, source hex in, sourceIndex int inout, sourceLen int inout, delimiters string in) returns(int) {eglSystemConstant = 55} end

	function getNextToken(source string inout, index int inout, delimiters string in) returns (string?) {eglSystemConstant = 55} end
	function getNextToken(source char inout, index int inout, delimiters char in) returns (char?) {eglSystemConstant = 55} end
	function getNextToken(source dbchar inout, index int inout, delimiters dbchar in) returns (dbchar?) {eglSystemConstant = 55} end
	function getNextToken(source mbchar inout, index int inout, delimiters mbchar in) returns (mbchar?) {eglSystemConstant = 55} end
	function getNextToken(source unicode inout, index int inout, delimiters unicode in) returns (unicode?) {eglSystemConstant = 55} end
	
	function getTokenCount(source string in, delimiters string in) returns (int)
		{eglSystemConstant = 61}
	end
	
	function indexOf(source string inout, pattern string in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source string inout, pattern string in, startIndex int in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source unicode inout, pattern unicode in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source unicode inout, pattern unicode in, startIndex int in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source char inout, pattern char in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source char inout, pattern char in, startIndex int in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source dbchar inout, pattern dbchar in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source dbchar inout, pattern dbchar in, startIndex int in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source mbchar inout, pattern mbchar in) returns (int) {eglSystemConstant = 62} end
	function indexOf(source mbchar inout, pattern mbchar in, startIndex int in) returns (int) {eglSystemConstant = 62} end
	
	function intAsChar( value int? in) returns (char(1)?) {eglSystemConstant = 204} end
	function charAsInt( value char(1)? in) returns (int?) {eglSystemConstant = 209} end
	function intAsUnicode ( value int? in) returns (unicode(1)?) {eglSystemConstant = 196} end
	function unicodeAsInt( value unicode(1)? in) returns (int?) {eglSystemConstant = 197} end
		

	function setBlankTerminator(value char inout) {eglSystemConstant = 56} end
	function setBlankTerminator(value mbchar inout) {eglSystemConstant = 56} end
	function setBlankTerminator(value dbchar inout) {eglSystemConstant = 56} end
	function setBlankTerminator(value unicode inout) {eglSystemConstant = 56} end
	function setBlankTerminator(value hex inout) {eglSystemConstant = 56} end

	function setNullTerminator(value char inout) {eglSystemConstant = 57} end
	function setNullTerminator(value mbchar inout) {eglSystemConstant = 57} end
	function setNullTerminator(value dbchar inout) {eglSystemConstant = 57} end
	function setNullTerminator(value unicode inout) {eglSystemConstant = 57} end
	function setNullTerminator(value hex inout) {eglSystemConstant = 57} end

	function lowerCase(characterItem string? in) returns(string?)
		{eglSystemConstant = 205}
	end

	function spaces(characterCount int? in) returns(string?)
		{eglSystemConstant = 206}
	end

	function upperCase(characterItem string? in) returns(string?)
		{eglSystemConstant = 207}
	end

	const isoDateFormat char(10)		{eglSystemConstant = 770} = "yyyy-MM-dd";
	const usaDateFormat char(10)		{eglSystemConstant = 771} = "MM/dd/yyyy";
	const eurDateFormat char(10)		{eglSystemConstant = 772} = "dd.MM.yyyy";
	const jisDateFormat char(10)		{eglSystemConstant = 773} = "yyyy-MM-dd";
	const isoTimeFormat char(8)			{eglSystemConstant = 774} = "HH.mm.ss";
	const usaTimeFormat char(7)			{eglSystemConstant = 775} = "hh:mm a";
	const eurTimeFormat char(8)			{eglSystemConstant = 776} = "HH.mm.ss";
	const jisTimeFormat char(8)			{eglSystemConstant = 777} = "HH:mm:ss";
	const db2TimeStampFormat char(26)	{eglSystemConstant = 778} = "yyyy-MM-dd-HH.mm.ss.SSSSSS";
	const odbcTimeStampFormat char(26)	{eglSystemConstant = 779} = "yyyy-MM-dd HH:mm:ss.SSSSSS";
										  
	defaultDateFormat string {eglSystemConstant = 783};
	defaultTimeFormat string {eglSystemConstant = 784};
	defaultTimeStampFormat string {eglSystemConstant = 785};
	defaultMoneyFormat string {eglSystemConstant = 786};
	defaultNumericFormat string {eglSystemConstant = 787};
	
	const nullFill string {eglSystemConstant = 769} = "";
end
