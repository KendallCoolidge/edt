/*******************************************************************************
 * Copyright Â© 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package egl.lang;

import egl.lang.reflect.ClassType;
import egl.lang.reflect.ParameterizableType;
import egl.lang.reflect.mof.Operation;

import org.eclipse.edt.mof.egl.SequenceType;
import org.eclipse.edt.mof.egl.FixedPrecisionType;
import org.eclipse.edt.mof.egl.TimestampType;
import org.eclipse.edt.mof.egl.IntervalType;

// Boolean primitive
externalType BooleanType extends AnyValue type ClassType

	static function $EQ(lvalue BooleanType in, rvalue BooleanType in) returns(BooleanType) {@Operation{"=="}};
	static function $NEQ(lvalue BooleanType in, rvalue BooleanType in) returns(BooleanType) {@Operation{"!="}};
	static function $AND(lvalue BooleanType in, rvalue BooleanType in) returns(BooleanType) {@Operation{"&&"}};
	static function $OR(lvalue BooleanType in, rvalue BooleanType in) returns(BooleanType) {@Operation{"||"}};
	static function $NOT(value BooleanType in) returns (BooleanType) {@Operation{"!"}};
	
	static function asBoolean(value AnyNumber in) returns (BooleanType) {@Operation{"narrow"}};
	static function asString(value BooleanType in) returns (AnyString) {@Operation{"narrow"}};

end

// Binary primitives
externalType AnyHex extends AnyValue type ParameterizableType {
	parameterizedType = SequenceType
}
end

externalType AnyByte extends AnyValue type ParameterizableType {
	parameterizedType = SequenceType
}
end


// Text primitives
externalType AnyString extends AnyText type ParameterizableType {
	parameterizedType = SequenceType
}
	static function $Plus(lvalue AnyString in, rvalue AnyString in) returns(AnyString) {@Operation{"+"}};
	static function $Concat(value AnyString in, rvalue AnyString in) returns (AnyString) {@Operation{"::"}};
	static function $ConcatNull(value AnyString in, rvalue AnyString in) returns(AnyString) {@Operation{"?:"}};
	static function $Matches(value AnyString in, rvalue AnyString in) returns(BooleanType) {@Operation{"matches"}};
	static function $Like(value AnyString in, rvalue AnyString in) returns(BooleanType) {@Operation{"like"}};
	static function $LT(lvalue AnyString in, rvalue AnyString in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue AnyString in, rvalue AnyString in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue AnyString in, rvalue AnyString in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue AnyString in, rvalue AnyString in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue AnyString in, rvalue AnyString in) returns(BooleanType) {@Operation{"=="}};
	static function $NEQ(lvalue AnyString in, rvalue AnyString in) returns(BooleanType) {@Operation{"!="}};
	
	// Valid Conversions
	static function asString(value Int16 in) returns(AnyString) {@Operation{"widen"}};
	static function asString(value Int32 in) returns(AnyString) {@Operation{"widen"}};
	static function asString(value Int64 in) returns(AnyString) {@Operation{"widen"}};
	static function asString(value AnyDecimal in) returns(AnyString) {@Operation{"widen"}};
	static function asString(value AnyString in, length Int32 in) returns(AnyString) {@Operation{"narrow"}};
	static function asString(value AnyChar in) returns(AnyString) {@Operation{"narrow"}};
	static function asString(value AnyMbChar in) returns(AnyString) {@Operation{"narrow"}};
end

externalType AnyChar extends AnyText type ParameterizableType {
	parameterizedType = SequenceType
}
	static function $Plus(lvalue AnyChar in, rvalue AnyChar in) returns(AnyChar) {@Operation{"+"}};
	static function $Concat(value AnyChar in, rvalue AnyChar in) returns (AnyChar) {@Operation{"::"}};
	static function $ConcatNull(value AnyChar in, rvalue AnyChar in) returns(AnyChar) {@Operation{"?:"}};
	static function $Matches(value AnyChar in, rvalue AnyChar in) returns(BooleanType) {@Operation{"matches"}};
	static function $Like(value AnyChar in, rvalue AnyChar in) returns(BooleanType) {@Operation{"like"}};
	static function $LT(lvalue AnyChar in, rvalue AnyChar in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue AnyChar in, rvalue AnyChar in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue AnyChar in, rvalue AnyChar in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue AnyChar in, rvalue AnyChar in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue AnyChar in, rvalue AnyChar in) returns(BooleanType) {@Operation{"=="}};
	static function $NEQ(lvalue AnyChar in, rvalue AnyChar in) returns(BooleanType) {@Operation{"!="}};
	
	// Valid Conversions
	static function asChar(value Int16 in) returns(AnyChar) {@Operation{"widen"}};
	static function asChar(value Int32 in) returns(AnyChar) {@Operation{"widen"}};
	static function asChar(value Int64 in) returns(AnyChar) {@Operation{"widen"}};
	static function asChar(value AnyDecimal in) returns(AnyChar) {@Operation{"widen"}};
	static function asChar(value AnyString in) returns(AnyChar) {@Operation{"widen"}};
	static function asChar(value AnyMbChar in) returns(AnyChar) {@Operation{"narrow"}};
end

externalType AnyMbChar extends AnyText type ParameterizableType {
	parameterizedType = SequenceType
}
	static function $Plus(lvalue AnyMbChar in, rvalue AnyMbChar in) returns(AnyChar) {@Operation{"+"}};
	static function $Concat(value AnyMbChar in, rvalue AnyMbChar in) returns (AnyChar) {@Operation{"::"}};
	static function $ConcatNull(value AnyMbChar in, rvalue AnyMbChar in) returns(AnyChar) {@Operation{"?:"}};
	static function $Matches(value AnyMbChar in, rvalue AnyMbChar in) returns(boolean) {@Operation{"matches"}};
	static function $Like(value AnyMbChar in, rvalue AnyMbChar in) returns(boolean) {@Operation{"like"}};
	static function $LT(lvalue AnyMbChar in, rvalue AnyMbChar in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue AnyMbChar in, rvalue AnyMbChar in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue AnyMbChar in, rvalue AnyMbChar in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue AnyMbChar in, rvalue AnyMbChar in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue AnyMbChar in, rvalue AnyMbChar in) returns(BooleanType) {@Operation{"=="}};
	
	// Valid Conversions
	static function AnyMbChar(value AnyString in) returns(AnyMbChar) {@Operation{"widen"}};
	static function AnyMbChar(value AnyChar in) returns(AnyMbChar) {@Operation{"widen"}};
	static function AnyMbChar(value Int32 in) returns(AnyMbChar) {@Operation{"narrow"}};
	static function AnyMbChar(value Int16 in) returns(AnyMbChar) {@Operation{"narrow"}};
end

externalType AnyDbChar extends AnyText type ParameterizableType {
	parameterizedType = SequenceType
}
end

externalType AnyUnicode extends AnyText type ParameterizableType {
	parameterizedType = SequenceType
}
end

externalType Int16 extends AnyNumber type ClassType 

	static function $Plus(value Int16 in) returns (Int32) {@Operation{"+"}};
	static function $Plus(lvalue Int16 in, rvalue Int16 in) returns (Int32) {@Operation{"+"}};
	static function $Minus(value Int16 in) returns (Int32) {@Operation{"-"}};
	static function $Minus(lvalue Int16 in, rvalue Int16 in) returns (Int32) {@Operation{"-"}};
	static function $Multiply(value Int16 in, rvalue Int16 in) returns (Int32) {@Operation{"*"}};
	static function $Divide(value Int16 in, rvalue Int16 in) returns (AnyDecimal) {@Operation{"/"}};
	static function $Modulus(value Int16 in, rvalue Int16 in) returns (Int16) {@Operation{"%"}};
	static function $PowerOf(value Int16 in, rvalue Int16 in) returns (Float64) {@Operation{"**"}};
	static function $BitAnd(value Int16 in, rvalue Int16 in) returns (Int16) {@Operation{"&"}};
	static function $BitOr(value Int16 in, rvalue Int16 in) returns (Int16) {@Operation{"|"}};
	static function $BitXor(value Int16 in, rvalue Int16 in) returns (Int16) {@Operation{"xor"}};
	static function $LT(lvalue Int16 in, rvalue Int16 in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue Int16 in, rvalue Int16 in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue Int16 in, rvalue Int16 in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue Int16 in, rvalue Int16 in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue Int16 in, rvalue Int16 in) returns(BooleanType) {@Operation{"=="}};
	
	// Valid Conversions
	static function asInt16(value Int32 in) returns(Int16) {@Operation{"narrow"}};
	static function asInt16(value Int64 in) returns(Int16) {@Operation{"narrow"}};
	static function asInt16(value Float32 in) returns(Int16) {@Operation{"narrow"}};
	static function asInt16(value Float64 in) returns(Int16) {@Operation{"narrow"}};
	static function asInt16(value AnyNum in) returns(Int16) {@Operation{"narrow"}};
	static function asInt16(value AnyDecimal in) returns(Int16) {@Operation{"narrow"}};
	static function asInt16(value AnyString in) returns(Int16) {@Operation{"narrow"}};
end

externalType Int32 extends AnyNumber type ClassType 

	static function $Plus(value Int32 in) returns (Int32) {@Operation{"+"}};
	static function $Plus(lvalue Int32 in, rvalue Int32 in) returns (Int32) {@Operation{"+"}};
	static function $Minus(value Int32 in) returns (Int32) {@Operation{"-"}};
	static function $Minus(lvalue Int32 in, rvalue Int32 in) returns (Int32) {@Operation{"-"}};
	static function $Multiply(lvalue Int32 in, rvalue Int32 in) returns (Int32) {@Operation{"*"}};
	static function $Divide(lvalue Int32 in, rvalue Int32 in) returns (AnyDecimal) {@Operation{"/"}};
	static function $Modulus(lvalue Int32 in, rvalue Int32 in) returns (Int32) {@Operation{"%"}};
	static function $PowerOf(lvalue Int32 in, rvalue Int32 in) returns (Float64) {@Operation{"**"}};
	static function $BitAnd(lvalue Int32 in, rvalue Int32 in) returns (Int32) {@Operation{"&"}};
	static function $BitOr(lvalue Int32 in, rvalue Int32 in) returns (Int32) {@Operation{"|"}};
	static function $BitXor(lvalue Int32 in, rvalue Int32 in) returns (Int32) {@Operation{"xor"}};
	static function $LT(lvalue Int32 in, rvalue Int32 in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue Int32 in, rvalue Int32 in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue Int32 in, rvalue Int32 in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue Int32 in, rvalue Int32 in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue Int32 in, rvalue Int32 in) returns(BooleanType) {@Operation{"=="}};

	// Valid Conversions
	static function asInt32(value Int16 in) returns(Int32) {@Operation{"widen"}};
	static function asInt32(value Int64 in) returns(Int32) {@Operation{"narrow"}};
	static function asInt32(value Float32 in) returns(Int32) {@Operation{"narrow"}};
	static function asInt32(value Float64 in) returns(Int32) {@Operation{"narrow"}};
	static function asInt32(value AnyNum in) returns(Int32) {@Operation{"narrow"}};
	static function asInt32(value AnyDecimal in) returns(Int32) {@Operation{"narrow"}};
	static function asInt32(value AnyString in) returns(Int32) {@Operation{"narrow"}};
end


externalType Int64 extends AnyNumber type ClassType 
	static function $Plus(value Int64 in) returns (Int64) {@Operation{"+"}};
	static function $Plus(lvalue Int64 in, rvalue Int64 in) returns (Int64) {@Operation{"+"}};
	static function $Minus(value Int64 in) returns (Int64) {@Operation{"-"}};
	static function $Minus(lvalue Int64 in, rvalue Int64 in) returns (Int64) {@Operation{"-"}};
	static function $Multiply(value Int64 in, rvalue Int64 in) returns (Int64) {@Operation{"*"}};
	static function $Divide(value Int64 in, rvalue Int64 in) returns (AnyDecimal) {@Operation{"/"}};
	static function $Modulus(value Int64 in, rvalue Int64 in) returns (Int64) {@Operation{"%"}};
	static function $PowerOf(value Int64 in, rvalue Int64 in) returns (Float64) {@Operation{"**"}};
	static function $BitAnd(value Int64 in, rvalue Int64 in) returns (Int64) {@Operation{"&"}};
	static function $BitOr(value Int64 in, rvalue Int64 in) returns (Int64) {@Operation{"|"}};
	static function $BitXor(value Int64 in, rvalue Int64 in) returns (Int64) {@Operation{"xor"}};
	static function $LT(lvalue Int64 in, rvalue Int64 in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue Int64 in, rvalue Int64 in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue Int64 in, rvalue Int64 in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue Int64 in, rvalue Int64 in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue Int64 in, rvalue Int64 in) returns(BooleanType) {@Operation{"=="}};
	
	// Valid Conversions
	static function asInt64(value Int16 in) returns(Int64) {@Operation{"widen"}};
	static function asInt64(value Int32 in) returns(Int64) {@Operation{"widen"}};
	static function asInt64(value Float32 in) returns(Int64) {@Operation{"narrow"}};
	static function asInt64(value Float64 in) returns(Int64) {@Operation{"narrow"}};
	static function asInt64(value AnyNum in) returns(Int64) {@Operation{"narrow"}};
	static function asInt64(value AnyDecimal in) returns(Int64) {@Operation{"narrow"}};
	static function asInt64(value AnyString in) returns(Int64) {@Operation{"narrow"}};
end

externalType Float32 extends AnyNumber type ClassType
	static function $Plus(value Float32 in) returns (Float32) {@Operation{"+"}};
	static function $Plus(lvalue Float32 in, rvalue Float32 in) returns (Float32) {@Operation{"+"}};
	static function $Minus(value Float32 in) returns (Float32) {@Operation{"-"}};
	static function $Minus(lvalue Float32 in, rvalue Float32 in) returns (Float32) {@Operation{"*"}};
	static function $Multiply(value Float32 in, rvalue Float32 in) returns (Float32) {@Operation{"*"}};
	static function $Divide(value Float32 in, rvalue Float32 in) returns (Float32) {@Operation{"/"}};
	static function $PowerOf(value Float32 in, rvalue Float32 in) returns (Float64) {@Operation{"**"}};
	static function $LT(lvalue Float32 in, rvalue Float32 in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue Float32 in, rvalue Float32 in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue Float32 in, rvalue Float32 in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue Float32 in, rvalue Float32 in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue Float32 in, rvalue Int16 in) returns(BooleanType) {@Operation{"=="}};
	
	// Valid Conversions
	static function asFloat32(value Int16 in) returns(Float32) {@Operation{"widen"}};
	static function asFloat32(value Int32 in) returns(Float32) {@Operation{"widen"}};
	static function asFloat32(value Int64 in) returns(Float32) {@Operation{"widen"}};
	static function asFloat32(value Float64 in) returns(Float32) {@Operation{"narrow"}};
	static function asFloat32(value AnyNum in) returns(Float32) {@Operation{"narrow"}};
	static function asFloat32(value AnyDecimal in) returns(Float32) {@Operation{"narrow"}};
	static function asFloat32(value AnyString in) returns(Float32) {@Operation{"narrow"}};
end

externalType Float64 extends AnyNumber type ClassType
	static function $Plus(value Float64 in) returns (Float64) {@Operation{"+"}};
	static function $Plus(lvalue Float64 in, rvalue Float64 in) returns (Float64) {@Operation{"+"}};
	static function $Minus(value Float64 in) returns (Float64) {@Operation{"-"}};
	static function $Minus(lvalue Float64 in, rvalue Float64 in) returns (Float64) {@Operation{"*"}};
	static function $Multiply(value Float64 in, rvalue Float64 in) returns (Float64) {@Operation{"*"}};
	static function $Divide(value Float64 in, rvalue Float64 in) returns (Float64) {@Operation{"/"}};
	static function $PowerOf(value Float64 in, rvalue Float64 in) returns (Float64) {@Operation{"**"}};
	static function $LT(lvalue Float64 in, rvalue Float64 in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue Float64 in, rvalue Float64 in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue Float64 in, rvalue Float64 in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue Float64 in, rvalue Float64 in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue Float64 in, rvalue Float64 in) returns(BooleanType) {@Operation{"=="}};
	
	// Valid Conversions
	static function asFloat64(value Int16 in) returns(Float64) {@Operation{"widen"}};
	static function asFloat64(value Int32 in) returns(Float64) {@Operation{"widen"}};
	static function asFloat64(value Int64 in) returns(Float64) {@Operation{"widen"}};
	static function asFloat64(value Float32 in) returns(Float64) {@Operation{"widen"}};
	static function asFloat64(value AnyNum in) returns(Float64) {@Operation{"narrow"}};
	static function asFloat64(value AnyDecimal in) returns(Float64) {@Operation{"narrow"}};
	static function asFloat64(value AnyString in) returns(Float64) {@Operation{"narrow"}};
end

// Fixed Precision numeric primitives
externalType AnyDecimal extends AnyNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
	static function $Plus(value AnyDecimal in) returns (AnyDecimal) {@Operation{"+"}};
	static function $Plus(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (AnyDecimal) {@Operation{"+"}};
	static function $Minus(value AnyDecimal in) returns (AnyDecimal) {@Operation{"-"}};
	static function $Minus(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (AnyDecimal) {@Operation{"-"}};
	static function $Multiply(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (AnyDecimal) {@Operation{"*"}};
	static function $Divide(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (AnyDecimal) {@Operation{"/"}};
	static function $PowerOf(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (AnyDecimal) {@Operation{"**"}};
	static function $LT(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (BooleanType) {@Operation{"<"}};
	static function $GT(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (BooleanType) {@Operation{">"}};
	static function $LTE(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (BooleanType) {@Operation{"<="}};
	static function $GTE(lvalue AnyDecimal in, rvalue AnyDecimal in) returns (BooleanType) {@Operation{">="}};
	static function $EQ(lvalue AnyDecimal in, rvalue AnyDecimal in) returns(BooleanType) {@Operation{"=="}};

	// Valid Conversions
	static function asDecimal(value Int16 in) returns(AnyDecimal) {@Operation{"widen"}};
	static function asDecimal(value Int32 in) returns(AnyDecimal) {@Operation{"widen"}};
	static function asDecimal(value Int64 in) returns(AnyDecimal) {@Operation{"widen"}};
	static function asDecimal(value Float32 in) returns(AnyDecimal) {@Operation{"widen"}};
	static function asDecimal(value Float64 in) returns(AnyDecimal) {@Operation{"widen"}};
	static function asDecimal(value AnyDecimal in, length Int32 in, decimals Int32 in) returns(AnyDecimal) {@Operation{"narrow"}};
	static function asDecimal(value AnyNum in) returns(AnyDecimal) {@Operation{"widen"}};
	static function asDecimal(value AnyString in) returns(AnyDecimal) {@Operation{"narrow"}};
end

externalType AnyPacf extends AnyNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
end

externalType AnyBin extends AnyNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
end

externalType AnyUBin extends AnyNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
end

externalType AnyNum extends AnyNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
end

externalType AnyUnicodeNum extends AnyNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
end

externalType AnyNumc extends AnyNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
end

// Date Time primitives
externalType EDate extends AnyValue type ClassType

	static function $Minus(lvalue EDate in, rvalue EDate in) returns(Int32) {@Operation{"-"}};	
	static function $Minus(lvalue EDate in, rvalue int64 in) returns(EDate) {@Operation{"-"}};
	static function $Minus(lvalue EDate in, rvalue AnySecondsInterval in) returns(AnyTimestamp) {@Operation{"-"}};
	static function $Minus(lvalue EDate in, rvalue AnyMonthsInterval in) returns(AnyTimestamp) {@Operation{"-"}};
	static function $Plus(lvalue EDate in, rvalue Int64 in) returns(EDate) {@Operation{"+"}};
	static function $Plus(lvalue Int64 in, rvalue EDate in) returns(EDate) {@Operation{"+"}};
	static function $Plus(lvalue EDate in, rvalue AnySecondsInterval in) returns(AnyTimestamp) {@Operation{"+"}};
	static function $Plus(lvalue EDate in, rvalue AnyMonthsInterval in) returns(AnyTimestamp) {@Operation{"+"}};
	
	static function asDate(value AnyTimestamp in) returns(EDate) {@Operation{"narrow"}};
	static function asDate(value AnyString in) returns(EDate) {@Operation{"narrow"}};
	static function asDate(value Int16 in) returns(EDate) {@Operation{"widen"}};
	static function asDate(value Int32 in) returns(EDate) {@Operation{"widen"}};
	static function asDate(value Int64 in) returns(EDate) {@Operation{"widen"}};
	static function asDate(value AnyDecimal in) returns(EDate) {@Operation{"widen"}};
	static function asDate(value Float32 in) returns(EDate) {@Operation{"widen"}};
	static function asDate(value Float64 in) returns(EDate) {@Operation{"widen"}};
	static function asString(value EDate in) returns(AnyString) {@Operation{"widen"}};
end

externalType ETime extends AnyValue type ClassType

	static function asTime(value AnyString in) returns(ETime) {@Operation{"narrow"}};
	static function asTime(value AnyTimestamp in) returns(ETime) {@Operation{"narrow"}};
	static function asString(value ETime in) returns(AnyString) {@Operation{"widen"}};
	
end

externalType AnyTimestamp extends AnyValue type ParameterizableType {
	parameterizedType = TimestampType
}
	static function $Minus(lvalue AnyTimestamp in, rvalue AnyTimestamp in) returns (AnyDecimal) {@Operation{"-"}};
	static function $Minus(lvalue AnyTimestamp in, rvalue AnyMonthsInterval in) returns(AnyTimestamp) {@Operation{"-"}};
	static function $Minus(lvalue AnyTimestamp in, rvalue AnySecondsInterval in) returns(AnyTimestamp) {@Operation{"-"}};
	static function $Plus(lvalue AnyTimestamp in, rvalue AnyMonthsInterval in) returns(AnyTimestamp) {@Operation{"+"}};
	static function $Plus(lvalue AnyMonthsInterval in, rvalue AnyTimestamp in) returns(AnyTimestamp) {@Operation{"+"}};
	static function $Plus(lvalue AnyTimestamp in, rvalue AnySecondsInterval in) returns(AnyTimestamp) {@Operation{"+"}};
	static function $Plus(lvalue AnySecondsInterval in, rvalue AnyTimestamp in) returns(AnyTimestamp) {@Operation{"+"}};
	
	static function asTimestamp(value EDate in) returns(AnyTimestamp) {@Operation{"widen"}};
	static function asTimestamp(value AnyString in) returns (AnyTimestamp) {@Operation{"narrow"}};
	static function asTimestamp(value AnyTimestamp in) returns (AnyTimestamp) {@Operation{"narrow"}};
	static function asString(value AnyTimestamp in) returns (AnyString) {@Operation{"widen"}};
end

externalType AnyInterval extends AnyValue type ParameterizableType { paramterizedType = IntervalType }
end

externalType AnyMonthsInterval extends AnyInterval type ParameterizableType {
	parameterizedType = IntervalType
}
	
	static function $Plus(lvalue AnyMonthsInterval in, rvalue AnyMonthsInterval in) returns (AnyMonthsInterval) {@Operation{"+"}};
	static function $Minus(lvalue AnyMonthsInterval in, rvalue AnyMonthsInterval in) returns (AnyMonthsInterval) {@Operation{"-"}};	
	static function $Multiply(lvalue AnyMonthsInterval in, rvalue Int64 in) returns (AnyMonthsInterval) {@Operation{"*"}};	
	static function $Divide(lvalue AnyMonthsInterval in, rvalue Int64 in) returns (AnyMonthsInterval) {@Operation{"/"}};
	
	static function asMonthsInterval(value AnySecondsInterval in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asMonthsInterval(value AnyMonthsInterval in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asMonthsInterval(value Int16 in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asMonthsInterval(value Int32 in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asMonthsInterval(value Int64 in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asMonthsInterval(value AnyDecimal in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asMonthsInterval(value Float32 in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asMonthsInterval(value Float64 in) returns(AnyMonthsInterval) {@Operation{"widen"}};
	static function asString(value AnyMonthsInterval in) returns (AnyString) {@Operation{"widen"}};
end

externalType AnySecondsInterval extends AnyInterval type ParameterizableType {
	parameterizedType = IntervalType
}
	static function $Plus(lvalue AnySecondsInterval in, rvalue AnySecondsInterval in) returns (AnySecondsInterval) {@Operation{"+"}};
	static function $Minus(lvalue AnySecondsInterval in, rvalue AnySecondsInterval in) returns (AnySecondsInterval) {@Operation{"-"}};	
	static function $Multiply(lvalue AnySecondsInterval in, rvalue Int64 in) returns (AnySecondsInterval) {@Operation{"*"}};	
	static function $Divide(lvalue AnySecondsInterval in, rvalue Int64 in) returns (AnySecondsInterval) {@Operation{"/"}};

	static function asSecondsInterval(value AnyMonthsInterval in) returns(AnySecondsInterval) {@Operation{"narrow"}};
	static function asSecondsInterval(value AnySecondsInterval in) returns(AnySecondsInterval) {@Operation{"widen"}};
	static function asSecondsInterval(value Int16 in) returns(AnySecondsInterval) {@Operation{"widen"}};
	static function asSecondsInterval(value Int32 in) returns(AnySecondsInterval) {@Operation{"widen"}};
	static function asSecondsInterval(value Int64 in) returns(AnySecondsInterval) {@Operation{"widen"}};
	static function asSecondsInterval(value AnyDecimal in) returns(AnySecondsInterval) {@Operation{"widen"}};
	static function asSecondsInterval(value Float32 in) returns(AnySecondsInterval) {@Operation{"widen"}};
	static function asSecondsInterval(value Float64 in) returns(AnySecondsInterval) {@Operation{"widen"}};
	static function asString(value AnySecondsInterval in) returns (AnyString) {@Operation{"widen"}};
end

externalType AnyClob type ClassType
end

externalType AnyBlob type ClassType 
end
