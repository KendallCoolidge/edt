/*******************************************************************************
 * Copyright Â© 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package egl.vg;

library VGLib
{
	eglIsSystemPart = yes
}
	function compareBytes(target hex inout, trgIndex int in, trgSubIndex int in, source hex inout, srcIndex int in, srcSubIndex int in) returns(int)
		{eglSystemConstant = 874}
	end

	function compareNum(value1 smallint in, value2 smallint in) returns (int) {eglSystemConstant = 8} end
	function compareNum(value1 int in, value2 int in) returns (int) {eglSystemConstant = 8} end
	function compareNum(value1 bigint in, value2 bigint in) returns (int) {eglSystemConstant = 8} end
	function compareNum(value1 smallfloat in, value2 smallfloat in) returns (int) {eglSystemConstant = 8} end
	function compareNum(value1 float in, value2 float in) returns (int) {eglSystemConstant = 8} end
	function compareNum(value1 decimal in, value2 decimal in) returns (int) {eglSystemConstant = 8} end

	function compareStr(str1 char inout, pos1 int in, length1 int in, str2 char inout, pos2 int in, length2 int in) returns(int) {eglSystemConstant = 50} end
	function compareStr(str1 dbchar inout, pos1 int in, length1 int in, str2 dbchar inout, pos2 int in, length2 int in) returns(int) {eglSystemConstant = 50} end
	function compareStr(str1 mbchar inout, pos1 int in, length1 int in, str2 mbchar inout, pos2 int in, length2 int in) returns(int) {eglSystemConstant = 50} end
	function compareStr(str1 unicode inout, pos1 int in, length1 int in, str2 unicode inout, pos2 int in, length2 int in) returns(int) {eglSystemConstant = 50} end
	function compareStr(str1 string inout, pos1 int in, length1 int in, str2 string inout, pos2 int in, length2 int in) returns(int) {eglSystemConstant = 50} end
	function compareStr(str1 num inout, pos1 int in, length1 int in, str2 num inout, pos2 int in, length2 int in) returns(int) {eglSystemConstant = 50} end
	function compareStr(str1 num inout, pos1 int in, length1 int in, str2 char inout, pos2 int in, length2 int in) returns(int) {eglSystemConstant = 50} end
	
	function concatenate(target char inout, source char in) returns(int) {eglSystemConstant = 51} end
	function concatenate(target dbchar inout, source dbchar in) returns(int) {eglSystemConstant = 51} end
	function concatenate(target mbchar inout, source mbchar in) returns(int) {eglSystemConstant = 51} end
	function concatenate(target mbchar inout, source dbchar in) returns(int) {eglSystemConstant = 51} end
	function concatenate(target unicode inout, source unicode in) returns(int) {eglSystemConstant = 51} end
	
	function concatenateBytes(target hex inout, source hex inout) returns(int)
		{eglSystemConstant = 875}
	end
	
	function concatenateWithSeparator(target char inout, source char in, separator char in) returns(int) {eglSystemConstant = 52} end
	function concatenateWithSeparator(target dbchar inout, source dbchar in, separator dbchar in) returns(int) {eglSystemConstant = 52} end
	function concatenateWithSeparator(target mbchar inout, source mbchar in, separator mbchar in) returns(int) {eglSystemConstant = 52} end
	function concatenateWithSeparator(target mbchar inout, source dbchar in, separator dbchar in) returns(int) {eglSystemConstant = 52} end
	function concatenateWithSeparator(target mbchar inout, source dbchar in, separator mbchar in) returns(int) {eglSystemConstant = 52} end
	function concatenateWithSeparator(target mbchar inout, source mbchar in, separator dbchar in) returns(int) {eglSystemConstant = 52} end
	function concatenateWithSeparator(target unicode inout, source unicode in, separator unicode in) returns(int) {eglSystemConstant = 52} end
	function concatenateWithSeparator(target hex inout, source hex in, separator hex in) returns(int) {eglSystemConstant = 52} end

	function connectionService(userid string in, password string in, database string in, product char(8), release char(8), connectionOption string in)
		{eglSystemConstant = 75, eglValidNumberOfArguments = [3, 5, 6]}
	end

	function copyBytes(target hex inout, trgIndex int in, trgSubIndex int in, source hex inout, srcIndex int in, srcSubIndex int in)
		{eglSystemConstant = 873}
	end
	
	function copyStr(target char inout, targetIndex int in, targetLen int in, source char in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	function copyStr(target dbchar inout, targetIndex int in, targetLen int in, source dbchar in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	function copyStr(target mbchar inout, targetIndex int in, targetLen int in, source mbchar in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	function copyStr(target mbchar inout, targetIndex int in, targetLen int in, source dbchar in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	function copyStr(target unicode inout, targetIndex int in, targetLen int in, source unicode in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	function copyStr(target num inout, targetIndex int in, targetLen int in, source num in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	function copyStr(target num inout, targetIndex int in, targetLen int in, source char in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	function copyStr(target string inout, targetIndex int in, targetLen int in, source string in, sourceIndex int in, sourceLen int in) {eglSystemConstant = 53} end
	
	function findStr(sourceString char inout, sourceIndex int inout, sourceLen int in, searchString char in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString mbchar inout, sourceIndex int inout, sourceLen int in, searchString mbchar in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString mbchar inout, sourceIndex int inout, sourceLen int in, searchString dbchar in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString dbchar inout, sourceIndex int inout, sourceLen int in, searchString dbchar in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString unicode inout, sourceIndex int inout, sourceLen int in, searchString unicode in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString num inout, sourceIndex int inout, sourceLen int in, searchString num in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString num inout, sourceIndex int inout, sourceLen int in, searchString char in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString hex inout, sourceIndex int inout, sourceLen int in, searchString hex in) returns(int) {eglSystemConstant = 54} end
	function findStr(sourceString string inout, sourceIndex int inout, sourceLen int in, searchString string in) returns(int) {eglSystemConstant = 54} end

	function floatingDifference(op1 float in, op2 float in) returns(float)
		{eglSystemConstant = 13}
	end

	function floatingMod(op1 float in, op2 float in) returns(float)
		{eglSystemConstant = 14}
	end

	function floatingProduct(op1 float in, op2 float in) returns(float)
		{eglSystemConstant = 15}
	end

	function floatingQuotient(op1 float in, op2 float in) returns(float)
		{eglSystemConstant = 16}
	end

	function floatingSum(op1 float in, op2 float in) returns(float)
		{eglSystemConstant = 17}
	end
	
	function getVAGSysType() returns(char(8))
		{eglSystemConstant = 127}
	end
	
	function setSubStr(target char inout, start int in, length int in, source char inout) {eglSystemConstant = 58} end
	function setSubStr(target char inout, start int in, length int in, source hex inout) {eglSystemConstant = 58} end
	function setSubStr(target char inout, start int in, length int in, source mbchar inout) {eglSystemConstant = 58} end
	function setSubStr(target dbchar inout, start int in, length int in, source dbchar inout) {eglSystemConstant = 58} end
	function setSubStr(target hex inout, start int in, length int in, source char inout) {eglSystemConstant = 58} end
	function setSubStr(target hex inout, start int in, length int in, source hex inout) {eglSystemConstant = 58} end
	function setSubStr(target hex inout, start int in, length int in, source mbchar inout) {eglSystemConstant = 58} end
	function setSubStr(target mbchar inout, start int in, length int in, source char inout) {eglSystemConstant = 58} end
	function setSubStr(target mbchar inout, start int in, length int in, source hex inout) {eglSystemConstant = 58} end
	function setSubStr(target mbchar inout, start int in, length int in, source mbchar inout) {eglSystemConstant = 58} end
	function setSubStr(target unicode inout, start int in, length int in, source unicode inout) {eglSystemConstant = 58} end
	
	function startTransaction(request any in) {eglSystemConstant = 104} end
	function startTransaction(request any in, prID int inout) {eglSystemConstant = 104} end
	function startTransaction(request any in, prID char inout) {eglSystemConstant = 104} end
	function startTransaction(request any in, prID int inout, termID char(4) inout) {eglSystemConstant = 104} end
	function startTransaction(request any in, prID char inout, termID int inout) {eglSystemConstant = 104} end
	function startTransaction(request any in, prID int inout, termID int inout) {eglSystemConstant = 104} end
	function startTransaction(request any in, prID char inout, termID char(4) inout) {eglSystemConstant = 104} end
	
	function VGTDLI(func char(4) in, pcbIndex smallint in, args hex) {eglSystemConstant = 130, eglValidNumberOfArguments = [-1, 2]} end
	function VGTDLI(func char(4) in, args hex) {eglSystemConstant = 130, eglValidNumberOfArguments = [-1, 1]} end
end
