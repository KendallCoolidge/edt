/*******************************************************************************
 * Copyright Â© 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/

package egl.core;

Record Alias type Annotation
{
	targets = [
		ElementKind.libraryPart,
		ElementKind.programPart,
		ElementKind.formGroupPart,
		ElementKind.formPart,
		ElementKind.servicePart,
		ElementKind.interfacePart,
		ElementKind.dataTablePart,
		ElementKind.functionMbr,
		ElementKind.structuredFieldMbr,
		ElementKind.dataItemPart
	],
	eglAnnotationGroup = "ui",
	eglIsSystemAnnotation = yes
}
	value string;
end

Record AllowUnqualifiedItemReferences type Annotation
{
	targets = [
		ElementKind.libraryPart,
		ElementKind.programPart,
		ElementKind.servicePart,
		ElementKind.handlerPart
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record BindService type Annotation
{
	targets = [elementKind.fieldMbr]/*,
	targetTypes = [ServiceRef, InterfaceRef]*/,
	eglIsSystemAnnotation = yes
}
  	bindingKey string;
end

Record CaseSensitive type Annotation
{
	targets = [ElementKind.fieldMbr],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record ContainerContextDependent type Annotation
{
	targets = [
		ElementKind.functionPart,
		ElementKind.recordPart,
		ElementKind.structuredRecordPart
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record DedicatedService type Annotation
{
	targets = [elementKind.fieldMbr]/*,
	targetTypes = [ServiceRef, InterfaceRef]*/,
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.DedicatedServiceAnnotationTypeBinding",
	eglIsSystemAnnotation = yes
}
end

Record DeleteAfterUse type Annotation
{
	targets = [ElementKind.dataTableUse],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record FormConversionTable type Annotation
{
	targets = [
		ElementKind.programPart
	],
	eglIsSystemAnnotation = yes
}
	value string;
end

Record HandleHardIOErrors type Annotation
{
	targets = [
		ElementKind.fieldMbr,
		ElementKind.libraryPart,
		ElementKind.programPart,
		ElementKind.servicePart,
		ElementKind.handlerPart,
		ElementKind.vguirecordPart
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record I4GLItemsNullable type Annotation
{ 
	targets = [
		ElementKind.programPart,
		ElementKind.libraryPart,
		ElementKind.recordPart,
		ElementKind.structuredRecordPart,
		ElementKind.handlerPart
	],
	eglIsSystemAnnotation = yes
}	
	value boolean = yes;
end

Record IncludeReferencedFunctions type Annotation
{
	targets = [
		ElementKind.libraryPart,
		ElementKind.programPart,
		ElementKind.servicePart,
		ElementKind.handlerPart
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record Initialized type Annotation
{
	targets = [
		ElementKind.fieldMbr,
		ElementKind.structuredFieldMbr
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record IsExternal type Annotation {
	targets = [
		ElementKind.callStatement,
		ElementKind.transferStatement,
		ElementKind.showStatement
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record UnloadOnExit type Annotation {
	targets = [
		ElementKind.exitStatement
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record GetRest type Annotation
{ 
	targets = [ ElementKind.functionMbr], 
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.GetRestAnnotationTypeBinding",
	eglIsSystemAnnotation = yes
}
	uriTemplate string;
	requestFormat restFormatKind;
	responseFormat restFormatKind;
end

Record PostRest type Annotation
{ 
	targets = [ ElementKind.functionMbr], 
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.PostRestAnnotationTypeBinding",
	eglIsSystemAnnotation = yes
}
	uriTemplate string;
	requestFormat restFormatKind;
	responseFormat restFormatKind;
end

Record PutRest type Annotation
{ 
	targets = [ ElementKind.functionMbr], 
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.PutRestAnnotationTypeBinding",
	eglIsSystemAnnotation = yes
}
	uriTemplate string;
	requestFormat restFormatKind;
	responseFormat restFormatKind;
end

Record DeleteRest type Annotation
{ 
	targets = [ ElementKind.functionMbr], 
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.DeleteRestAnnotationTypeBinding",
	eglIsSystemAnnotation = yes
}
	uriTemplate string;
	requestFormat restFormatKind;
	responseFormat restFormatKind;
end

Record RestBinding type Annotation
{ 
    targets = [elementKind.fieldMbr]/*,
    targetTypes = [ServiceRef, InterfaceRef]*/,
	eglIsSystemAnnotation = yes
}  
  	baseURI string;
  	sessionCookieId string;
end

Record WebBinding type Annotation
{
    targets = [elementKind.fieldMbr]/*,
    targetTypes = [ServiceRef, InterfaceRef]*/,
    eglIsSystemAnnotation = yes
}
	wsdlLocation string;
	wsdlService string;
	wsdlPort string;
	uri string;
end

Record Timeout type Annotation {
	targets = [
		ElementKind.callStatement
	],
	eglIsSystemAnnotation = yes
}
	value int;
end

Record IsNoRefresh type Annotation
{
	targets = [
		ElementKind.callStatement
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record LinkageKey type Annotation
{
	targets= [
		ElementKind.callStatement,
		ElementKind.transferStatement,
		ElementKind.showStatement
	],
	eglIsSystemAnnotation = yes
}
	value String;
end

Record MaxSize type Annotation
{
	targets = [ElementKind.fieldMbr],
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.MaxSizeAnnotationTypeBinding",
	eglIsSystemAnnotation = yes
}
	value int;
end

Record Ordering type Annotation
{
	targets = [ElementKind.fieldMbr],
	eglIsSystemAnnotation = yes
}
	value OrderingKind;
end

Record Redefines type Annotation
{
	targets = [ElementKind.fieldMbr, ElementKind.structuredFieldMbr],
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.RedefinesAnnotationTypeBinding",
	eglIsSystemAnnotation = yes
}
	value InternalRef;
end

Record TextLiteralDefaultIsString type Annotation
{
	targets = [
		ElementKind.libraryPart,
		ElementKind.programPart,
		ElementKind.servicePart,
		ElementKind.handlerPart,
		ElementKind.recordPart,
		ElementKind.structuredRecordPart
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record ThrowNrfEofExceptions type Annotation
{
	targets = [
		ElementKind.fieldMbr,
		ElementKind.libraryPart,
		ElementKind.programPart,
		ElementKind.servicePart,
		ElementKind.handlerPart,
		ElementKind.vguirecordPart
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end

Record V60ExceptionCompatibility type Annotation { 
	targets = [ 
		ElementKind.fieldMbr,
		ElementKind.ProgramPart, 
		ElementKind.HandlerPart,
		ElementKind.LibraryPart,
		ElementKind.ServicePart,
		ElementKind.vguirecordPart
	],
	eglIsSystemAnnotation = yes
}
	value boolean = false;
end

Record XML type Annotation
{
	targets = [
		ElementKind.functionMbr,
		ElementKind.servicePart,
		ElementKind.interfacePart
	],
	eglIsSystemAnnotation = yes
}
	name string;
	namespace string;
end

Record XMLRootElement type Annotation
{ targets = [ ElementKind.recordPart ], eglIsSystemAnnotation = yes}
  name string;
  namespace string;
  nillable boolean;
end

Record XMLStructure type Annotation
{ targets = [ ElementKind.recordPart ], eglIsSystemAnnotation = yes}
  value XMLStructureKind;
end

Record XMLElement type Annotation
{ targets = [ ElementKind.fieldMbr ], eglIsSystemAnnotation = yes}
  name string;
  namespace string;
  nillable boolean;
end

Record XMLAttribute type Annotation
{ targets = [ ElementKind.fieldMbr ], eglIsSystemAnnotation = yes}
  name string;
  namespace string;
end

Record FORMName type Annotation
{ 
	targets = [ 
		ElementKind.fieldMbr,
		ElementKind.structuredFieldMbr
	], 
	eglIsSystemAnnotation = yes
}
  value string;
end

Record JSONName type Annotation
{ 
	targets = [ 
		ElementKind.fieldMbr,
		ElementKind.structuredFieldMbr
	], 
	eglIsSystemAnnotation = yes
}
  value string;
end


Record EGLProperty type Annotation
{ targets = [ElementKind.FieldMbr],
  validationProxy = "org.eclipse.edt.compiler.binding.annotationType.EGLPropertyAnnotationTypeBinding",	
  eglIsSystemAnnotation = yes
} 
  getMethod internalRef;
  setMethod internalRef;
end

Record Override type Annotation
{ targets = [ElementKind.FieldMbr, ElementKind.FunctionMbr],
  eglIsSystemAnnotation = yes}
end


Record OneWay type Annotation
{
	targets = [
		ElementKind.functionMbr
	],
	eglIsSystemAnnotation = yes
}
	value boolean = yes;
end
