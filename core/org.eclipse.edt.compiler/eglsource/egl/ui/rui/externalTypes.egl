/*******************************************************************************
 * Copyright Â© 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package egl.ui.rui;

import egl.javascript.*;
import egl.core.*;

ExternalType Event type JavaScriptObject {
		relativePath = "egl/ui/rui",
		javaScriptName = "Event",
		eglIsSystemAnnotation = yes
	}	
	x Int { @JavaScriptProperty { getMethod="getX", setMethod="setX" } };
	y Int { @JavaScriptProperty { getMethod="getY", setMethod="setY" } };
	screenX Int;
	screenY Int;
	clientX Int;
	clientY Int;
	ch int;
	widget Widget;
	mouseButton int;
	altKey boolean;
	ctrlKey boolean;
	metaKey boolean;
	shiftKey boolean;
			
	function stopPropagation();
	function preventDefault();
end

Delegate EventHandler( e Event in ) {eglIsSystemPart = yes}
end

ExternalType Document type JavaScriptObject {
		relativePath = "egl/ui/rui",
		javaScriptName = "Document",
		eglIsSystemAnnotation = yes
	}
	
	onKeyDown EventHandler  { @JavaScriptProperty { setMethod="setOnKeyDown" } };
	onKeyPress EventHandler { @JavaScriptProperty { setMethod="setOnKeyPress" } };
	onKeyUp EventHandler { @JavaScriptProperty { setMethod="setOnKeyUp" } };
	onMouseDown EventHandler { @JavaScriptProperty { setMethod="setOnMouseDown" } };
	onMouseMove EventHandler { @JavaScriptProperty { setMethod="setOnMouseMove" } };
	onMouseOver EventHandler { @JavaScriptProperty { setMethod="setOnMouseOver" } };
	onMouseOut EventHandler { @JavaScriptProperty { setMethod="setOnMouseOut" } };
	onMouseUp EventHandler { @JavaScriptProperty { setMethod="setOnMouseUp" } };
	onScroll EventHandler { @JavaScriptProperty { setMethod="setOnScroll" } };
	onChange EventHandler { @JavaScriptProperty { setMethod="setOnChange" } };						
	onClick EventHandler { @JavaScriptProperty { setMethod="setOnClick" } };

	onSelectStart EventHandler { @JavaScriptProperty { setMethod="setOnSelecStart" } };
	onDragStart EventHandler { @JavaScriptProperty { setMethod="setOnDragStart" } };
	
	body Widget;
	
	location String  { @JavaScriptProperty { setMethod="setLocation", getMethod="getLocation" } };
end

ExternalType Widget type JavaScriptObject{relativePath = "egl/ui/rui",
		javaScriptName = "Widget",
		eglIsSystemAnnotation = yes
}
	private document Document;
	pixelWidth int { @JavaScriptProperty { getMethod = "getPixelWidth", setMethod = "setPixelWidth" } };
	function getPixelWidth() returns (int);
	function setPixelWidth(value int in);

	pixeLHeight int { @JavaScriptProperty { getMethod = "getPixelHeight", setMethod = "setPixelHeight" } };
	function getPixelHeight() returns (int);
	function setPixelHeight(value int in);

	logicalParent Widget {@JavaScriptProperty { getMethod = "getLogicalParent", setMethod = "setLogicalParent" }};
	function getLogicalParent() returns (Widget);
	function setLogicalParent(value Widget in);

	parent Widget {@JavaScriptProperty { getMethod = "getParent", setMethod = "setParent" }};
	function getParent() returns (Widget);
	function setParent(value Widget in);

	style String { @JavaScriptProperty { getMethod = "getStyle", setMethod = "setStyle" } };
	function getStyle() returns (String);
	function setStyle(value String in);

	background string { @JavaScriptProperty { getMethod = "getBackground", setMethod = "setBackground" } };
	function getBackground() returns (String);
	function setBackground(value String in);
	
	layoutData any { @JavaScriptProperty { getMethod = "getLayoutData", setMethod = "setLayoutData" } };
	function getLayoutData() returns (any);
	function setLayoutData(value any in);

	tabIndex int { @JavaScriptProperty { getMethod = "getTabIndex", setMethod = "setTabIndex" }, @VEProperty{category = "Accessibility"} };
	function getTabIndex() returns (int);
	function setTabIndex(value int in);

	ariaLive string { @JavaScriptProperty { getMethod = "getAriaLive", setMethod = "setAriaLive" }, @VEProperty{category = "Accessibility"} };
	function getAriaLive() returns (String);
	function setAriaLive(value String in);

	ariaRole string { @JavaScriptProperty { getMethod = "getAriaRole", setMethod = "setAriaRole" }, @VEProperty{category = "Accessibility"} };
	function getAriaRole() returns (String);
	function setAriaRole(value String in);
	
	disabled boolean  { @JavaScriptProperty { getMethod = "getDisabled", setMethod = "setDisabled" }, @VEProperty{category = "Appearance"} };
	function getDisabled() returns (boolean);
	function setDisabled(value boolean in);

	cursor String { @JavaScriptProperty { getMethod = "getCursor", setMethod = "setCursor" }, @VEProperty{category = "Appearance"} };
	function getCursor() returns (String);
	function setCursor(value String in);

	visibility String { @JavaScriptProperty { getMethod = "getVisibility", setMethod = "setVisibility" } };
	function getVisibility() returns (String);
	function setVisibility(value String in);

	visible boolean { @JavaScriptProperty { getMethod = "getVisible", setMethod = "setVisible" }, @VEProperty{category = "Appearance", 			
			default = "true"
	} };
	function getVisible() returns (boolean);
	function setVisible(value boolean in);
	
	opacity String { @JavaScriptProperty { getMethod = "getOpacity", setMethod = "setOpacity" }, @VEProperty{category = "Appearance"} };
	function getOpacity() returns (String);
	function setOpacity(value String in);

	zIndex String { @JavaScriptProperty { getMethod = "getZIndex", setMethod = "setZIndex" }, @VEProperty{category = "Position"} };
	function getZIndex() returns (String);
	function setZIndex(value String in);

	height String { @JavaScriptProperty { getMethod = "getHeight", setMethod = "setHeight" }, @VEProperty{category = "Position"} };
	function getHeight() returns (String);
	function setHeight(value String in);

	width String { @JavaScriptProperty { getMethod = "getWidth", setMethod = "setWidth" }, @VEProperty{category = "Position"} };
	function getWidth() returns (String);
	function setWidth(value String in);

	y int { @JavaScriptProperty { getMethod = "getY", setMethod = "setY" }, @VEProperty{category = "Position"} };
	function getY() returns (int);
	function setY(value int in);

	x int { @JavaScriptProperty { getMethod = "getX", setMethod = "setX" }, @VEProperty{category = "Position"} };
	function getX() returns (int);
	function setX(value int in);
	
	position string { @JavaScriptProperty { getMethod = "getPosition", setMethod = "setPosition" },
			@VEProperty {
				category = "Position", 
				propertyType="choice", 
				choices = [
					@VEPropertyChoice{id="\"absolute\"", displayName="absolute"}, 
					@VEPropertyChoice{id="\"relative\"", displayName="relative"}, 
					@VEPropertyChoice{id="\"static\"", displayName="static"}
				],
				default = "\"static\""
			} };
	function getPosition() returns (String);
	function setPosition(value String in);
	
	marginBottom int { @JavaScriptProperty { getMethod = "getMarginBottom", setMethod = "setMarginBottom" }, @VEProperty{category = "Spacing"} };
	function getMarginBottom() returns (int);
	function setMarginBottom(value int in);

	marginTop int { @JavaScriptProperty { getMethod = "getMarginTop", setMethod = "setMarginTop" }, @VEProperty{category = "Spacing"} };
	function getMarginTop() returns (int);
	function setMarginTop(value int in);

	marginRight int { @JavaScriptProperty { getMethod = "getMarginRight", setMethod = "setMarginRight" }, @VEProperty{category = "Spacing"} };
	function getMarginRight() returns (int);
	function setMarginRight(value int in);

	marginLeft int { @JavaScriptProperty { getMethod = "getMarginLeft", setMethod = "setMarginLeft" }, @VEProperty{category = "Spacing"} };
	function getMarginLeft() returns (int);
	function setMarginLeft(value int in);

	margin int { @JavaScriptProperty { getMethod = "getMargin", setMethod = "setMargin" }, @VEProperty{category = "Spacing"} };
	function getMargin() returns (int);
	function setMargin(value int in);
	
	paddingBottom int { @JavaScriptProperty { getMethod = "getPaddingBottom", setMethod = "setPaddingBottom" }, @VEProperty{category = "Spacing"} };
	function getPaddingBottom() returns (int);
	function setPaddingBottom(value int in);

	paddingTop int { @JavaScriptProperty { getMethod = "getPaddingTop", setMethod = "setPaddingTop" }, @VEProperty{category = "Spacing"} };
	function getPaddingTop() returns (int);
	function setPaddingTop(value int in);

	paddingRight int { @JavaScriptProperty { getMethod = "getPaddingRight", setMethod = "setPaddingRight" }, @VEProperty{category = "Spacing"} };
	function getPaddingRight() returns (int);
	function setPaddingRight(value int in);

	paddingLeft int { @JavaScriptProperty { getMethod = "getPaddingLeft", setMethod = "setPaddingLeft" }, @VEProperty{category = "Spacing"} };
	function getPaddingLeft() returns (int);
	function setPaddingLeft(value int in);

	padding int { @JavaScriptProperty { getMethod = "getPadding", setMethod = "setPadding" }, @VEProperty{category = "Spacing"} };
	function getPadding() returns (int);
	function setPadding(value int in);
	
	borderBottomStyle string { @JavaScriptProperty { getMethod = "getBorderBottomStyle", setMethod = "setBorderBottomStyle" }, @VEProperty{category = "Border", 
				propertyType="choice", 
				choices = [
					@VEPropertyChoice{id="\"solid\"", displayName="solid"}, 
					@VEPropertyChoice{id="\"double\"", displayName="double"}, 
					@VEPropertyChoice{id="\"groove\"", displayName="groove"}, 
					@VEPropertyChoice{id="\"dotted\"", displayName="dotted"}, 
					@VEPropertyChoice{id="\"dashed\"", displayName="dashed"}, 
					@VEPropertyChoice{id="\"inset\"", displayName="inset"}, 
					@VEPropertyChoice{id="\"outset\"", displayName="outset"}, 
					@VEPropertyChoice{id="\"ridge\"", displayName="ridge"}
				],
				default = "\"solid\""
		} };
	function getBorderBottomStyle() returns (String);
	function setBorderBottomStyle(value String in);

	borderTopStyle string { @JavaScriptProperty { getMethod = "getBorderTopStyle", setMethod = "setBorderTopStyle" }, @VEProperty{category = "Border", 
				propertyType="choice", 
				choices = [
					@VEPropertyChoice{id="\"solid\"", displayName="solid"}, 
					@VEPropertyChoice{id="\"double\"", displayName="double"}, 
					@VEPropertyChoice{id="\"groove\"", displayName="groove"}, 
					@VEPropertyChoice{id="\"dotted\"", displayName="dotted"}, 
					@VEPropertyChoice{id="\"dashed\"", displayName="dashed"}, 
					@VEPropertyChoice{id="\"inset\"", displayName="inset"}, 
					@VEPropertyChoice{id="\"outset\"", displayName="outset"}, 
					@VEPropertyChoice{id="\"ridge\"", displayName="ridge"}
				],
				default = "\"solid\""  
		} };
	function getBorderTopStyle() returns (String);
	function setBorderTopStyle(value String in);
	
	borderRightStyle string { @JavaScriptProperty { getMethod = "getBorderRightStyle", setMethod = "setBorderRightStyle" }, @VEProperty{category = "Border", 
				propertyType="choice", 
				choices = [
					@VEPropertyChoice{id="\"solid\"", displayName="solid"}, 
					@VEPropertyChoice{id="\"double\"", displayName="double"}, 
					@VEPropertyChoice{id="\"groove\"", displayName="groove"}, 
					@VEPropertyChoice{id="\"dotted\"", displayName="dotted"}, 
					@VEPropertyChoice{id="\"dashed\"", displayName="dashed"}, 
					@VEPropertyChoice{id="\"inset\"", displayName="inset"}, 
					@VEPropertyChoice{id="\"outset\"", displayName="outset"}, 
					@VEPropertyChoice{id="\"ridge\"", displayName="ridge"}
				],
				default = "\"solid\""  
		} };
	function getBorderRightStyle() returns (String);
	function setBorderRightStyle(value String in);

	borderLeftStyle string { @JavaScriptProperty { getMethod = "getBorderLeftStyle", setMethod = "setBorderLeftStyle" }, @VEProperty{category = "Border", 
				propertyType="choice", 
				choices = [
					@VEPropertyChoice{id="\"solid\"", displayName="solid"}, 
					@VEPropertyChoice{id="\"double\"", displayName="double"}, 
					@VEPropertyChoice{id="\"groove\"", displayName="groove"}, 
					@VEPropertyChoice{id="\"dotted\"", displayName="dotted"}, 
					@VEPropertyChoice{id="\"dashed\"", displayName="dashed"}, 
					@VEPropertyChoice{id="\"inset\"", displayName="inset"}, 
					@VEPropertyChoice{id="\"outset\"", displayName="outset"}, 
					@VEPropertyChoice{id="\"ridge\"", displayName="ridge"}
				],
				default = "\"solid\""  
		} };
	function getBorderLeftStyle() returns (String);
	function setBorderLeftStyle(value String in);

	borderStyle String { @JavaScriptProperty { getMethod = "getBorderStyle", setMethod = "setBorderStyle" }, @VEProperty{category = "Border", 
				propertyType="choice", 
				choices = [
					@VEPropertyChoice{id="\"solid\"", displayName="solid"}, 
					@VEPropertyChoice{id="\"double\"", displayName="double"}, 
					@VEPropertyChoice{id="\"groove\"", displayName="groove"}, 
					@VEPropertyChoice{id="\"dotted\"", displayName="dotted"}, 
					@VEPropertyChoice{id="\"dashed\"", displayName="dashed"}, 
					@VEPropertyChoice{id="\"inset\"", displayName="inset"}, 
					@VEPropertyChoice{id="\"outset\"", displayName="outset"}, 
					@VEPropertyChoice{id="\"ridge\"", displayName="ridge"}
				],
				default = "\"solid\""  
		} };
	function getBorderStyle() returns (String);
	function setBorderStyle(value String in);
	
	borderBottomWidth int { @JavaScriptProperty { getMethod = "getBorderBottomWidth", setMethod = "setBorderBottomWidth" }, @VEProperty{category = "Border"} };
	function getBorderBottomWidth() returns (int);
	function setBorderBottomWidth(value int in);

	borderTopWidth int { @JavaScriptProperty { getMethod = "getBorderTopWidth", setMethod = "setBorderTopWidth" }, @VEProperty{category = "Border"} };
	function getBorderTopWidth() returns (int);
	function setBorderTopWidth(value int in);

	borderRightWidth int { @JavaScriptProperty { getMethod = "getBorderRightWidth", setMethod = "setBorderRightWidth" }, @VEProperty{category = "Border"} };
	function getBorderRightWidth() returns (int);
	function setBorderRightWidth(value int in);
	
	borderLeftWidth int { @JavaScriptProperty { getMethod = "getBorderLeftWidth", setMethod = "setBorderLeftWidth" }, @VEProperty{category = "Border"} };
	function getBorderLeftWidth() returns (int);
	function setBorderLeftWidth(value int in);

	borderWidth int { @JavaScriptProperty { getMethod = "getBorderWidth", setMethod = "setBorderWidth" }, @VEProperty{category = "Border"} };
	function getBorderWidth() returns (int);
	function setBorderWidth(value int in);

	borderColor String { @JavaScriptProperty { getMethod = "getBorderColor", setMethod = "setBorderColor" }, @VEProperty{category = "Border", propertyType="color"} };
	function getBorderColor() returns (String);
	function setBorderColor(value String in);
	
	fontWeight String { @JavaScriptProperty { getMethod = "getFontWeight", setMethod = "setFontWeight" }, @VEProperty{ 
				propertyType="choice", 
				choices = [
					@VEPropertyChoice{id="\"normal\"", displayName="normal"}, 
					@VEPropertyChoice{id="\"bold\"", displayName="bold"}, 
					@VEPropertyChoice{id="\"bolder\"", displayName="bolder"}, 
					@VEPropertyChoice{id="\"lighter\"", displayName="lighter"}
				],
				default = "\"normal\""  
		} };
	function getFontWeight() returns (String);
	function setFontWeight(value String in);
		
	fontSize string { @JavaScriptProperty { getMethod = "getFontSize", setMethod = "setFontSize" }, @VEProperty{} };
	function getFontSize() returns (String);
	function setFontSize(value String in);

	font string { @JavaScriptProperty { getMethod = "getFont", setMethod = "setFont" }, @VEProperty{} };
	function getFont() returns (String);
	function setFont(value String in);

	backgroundColor string { @JavaScriptProperty { getMethod = "getBackgroundColor", setMethod = "setBackgroundColor" }, @VEProperty{propertyType="color"} };
	function getBackgroundColor() returns (String);
	function setBackgroundColor(value String in);

	color string { @JavaScriptProperty { getMethod = "getColor", setMethod = "setColor" }, @VEProperty{propertyType="color" } };
	function getColor() returns (String);
	function setColor(value String in);
	
	class String { @JavaScriptProperty { getMethod = "getClass", setMethod = "setClass" }, @VEProperty };
	function getClass() returns (String);
	function setClass(value String in);

	id String { @JavaScriptProperty { getMethod = "getID", setMethod = "setID" },  @VEProperty{} };
	function getID() returns (String);
	function setID(value String in);
	
	reverseTextDirection string {@JavaScriptProperty{setMethod = "setReverseTextDirection", getMethod = "getReverseTextDirection"},
			@VEProperty{
				category = "Bidi",
				propertyType = "choice",
				choices = [
					@VEPropertyChoice{id = "\"Yes\"", displayName = "Yes"},
					@VEPropertyChoice{id = "\"No\"", displayName = "No"}
				],
				default = "\"No\""
			} };
	function getReverseTextDirection() returns (String);
	function setReverseTextDirection(value String in);

	textLayout string {@JavaScriptProperty{setMethod = "setTextLayout", getMethod = "getTextLayout"}, 
			@VEProperty{
				category = "Bidi",
				propertyType = "choice",
				choices = [
					@VEPropertyChoice{id = "\"Logical\"", displayName = "Logical"},
					@VEPropertyChoice{id = "\"Visual\"", displayName = "Visual"}
				],
				default = "\"Logical\""
			} };	
	function getTextLayout() returns (String);
	function setTextLayout(value String in);

	widgetOrientation string {@JavaScriptProperty{setMethod = "setWidgetOrientation", getMethod = "getWidgetOrientation"}, 
			@VEProperty{
				category = "Bidi",
				propertyType = "choice",
				choices = [
					@VEPropertyChoice{id="\"LTR\"", displayName = "LTR"},
					@VEPropertyChoice{id="\"RTL\"", displayName = "RTL"}
				],
				default = "\"LTR\""
			} };
	function getWidgetOrientation() returns (String);
	function setWidgetOrientation(value String in);
	
	targetWidget Widget { }; //@JavaScriptProperty { getMethod = "getTargetWidget", setMethod = "setTargetWidget" } };
	
	tagName String { @JavaScriptProperty { getMethod = "getTagName", setMethod = "setTagName" } };
	function getTagName() returns (String);
	function setTagName(value String in);

	innerHTML String {@JavaScriptProperty { getMethod = "getInnerHTML", setMethod = "setInnerHTML" }};
	function getInnerHTML() returns (String);
	function setInnerHTML(value String in);

	innerText String {@JavaScriptProperty { getMethod = "getInnerText", setMethod = "setInnerText" }};
	function getInnerText() returns (String);
	function setInnerText(value String in);

	value String {@JavaScriptProperty { getMethod = "getValue", setMethod = "setValue" }};
	function getValue() returns (String);
	function setValue(value String in);

	children Widget[] {@JavaScriptProperty { getMethod = "getChildren", setMethod = "setChildren" }};
	function getChildren() returns (Widget[]);
	function setChildren(children Widget[] in);
	
	function getAttribute(attribute string in) returns (any);
	function setAttribute(attribute String in, value any in);
	function removeAttribute(attribute String in);
	
	function appendChild(widget Widget in);
	function appendChildren(widget Widget[] in);
	function removeChild(widget Widget in);
	function removeChildren();
	function childrenChanged();
	
	function getElementById(id String in) returns (Widget);
	function getElementsByName(name String in) returns (Widget[]);
	function getElementsByTagName(tagName String in) returns (Widget[]);
	
	function focus();
	function select();
	
	function toString() returns(string);
			
	onStartDrag StartDragFunction { @JavaScriptProperty { getMethod = "getOnStartDrag", setMethod = "setOnStartDrag"}};
	function getOnStartDrag() returns (StartDragFunction);
	function setOnStartDrag(drag StartDragFunction in);

	onDrag DragFunction { @JavaScriptProperty { getMethod = "getOnDrag", setMethod = "setOnDrag"}};
	function getOnDrag() returns (DragFunction);
	function setOnDrag(drag DragFunction in);
	
	onDropOnTarget DropOnTargetFunction { @JavaScriptProperty { getMethod = "getOnDropOnTarget", setMethod = "setOnDropOnTarget" } };
	function getOnDropOnTarget() returns (DropOnTargetFunction);
	function setOnDropOnTarget(target DropOnTargetFunction in);
	// Functions to manage individual event handler types.
	// Each widget may not support all of them and may choose to
	// ignore attempts to add event handlers it does not recognize.
	
	onChange
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnChange", setMethod="setOnChange" },
			@VEEvent{}
		};
	function getOnChange() returns (EventHandler[]);
	function setOnChange(handlers EventHandler[] in);
	
	onClick
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnClick", setMethod="setOnClick" },
			@VEEvent{}
		};
	function getOnClick() returns (EventHandler[]);
	function setOnClick(handlers EventHandler[] in);
	
	onSelect
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnSelect", setMethod="setOnSelect" },
			@VEEvent{}
		};
	function getOnSelect() returns (EventHandler[]);
	function setOnSelect(handlers EventHandler[] in);
	
	onFocusGained
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnFocusGained", setMethod="setOnFocusGained" },
			@VEEvent{}
		};
	function getOnFocusGained() returns (EventHandler[]);
	function setOnFocusGained(handlers EventHandler[] in);
	
	onFocusLost
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnFocusLost", setMethod="setOnFocusLost" },
			@VEEvent{}
		};
	function getOnFocusLost() returns (EventHandler[]);
	function setOnFocusLost(handlers EventHandler[] in);
	
	onKeyDown
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnKeyDown", setMethod="setOnKeyDown" },		
			@VEEvent{}
		};
	function getOnKeyDown() returns (EventHandler[]);
	function setOnKeyDown(handlers EventHandler[] in);
	
	onKeyPress
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnKeyPress", setMethod="setOnKeyPress" },
			@VEEvent{}
		};
	function getOnKeyPress() returns (EventHandler[]);
	function setOnKeyPress(handlers EventHandler[] in);
	
	onKeyUp
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnKeyUp", setMethod="setOnKeyUp" },
			@VEEvent{}
		};
	function getOnKeyUp() returns (EventHandler[]);
	function setOnKeyUp(handlers EventHandler[] in);
	
	onMouseDown
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnMouseDown", setMethod="setOnMouseDown" },
			@VEEvent{}
		};
	function getOnMouseDown() returns (EventHandler[]);
	function setOnMouseDown(handlers EventHandler[] in);
	
	onMouseMove
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnMouseMove", setMethod="setOnMouseMove" },
			@VEEvent{}
		};
	function getOnMouseMove() returns (EventHandler[]);
	function setOnMouseMove(handlers EventHandler[] in);
	
	onMouseOver
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnMouseOver", setMethod="setOnMouseOver" },
			@VEEvent{}
		};
	function getOnMouseOver() returns (EventHandler[]);
	function setOnMouseOver(handlers EventHandler[] in);
	
	onMouseOut
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnMouseOut", setMethod="setOnMouseOut" },
			@VEEvent{}
		};
	function getOnMouseOut() returns (EventHandler[]);
	function setOnMouseOut(handlers EventHandler[] in);
	
	onMouseUp
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnMouseUp", setMethod="setOnMouseUp" },
			@VEEvent{}
		};
	function getOnMouseUp() returns (EventHandler[]);
	function setOnMouseUp(handlers EventHandler[] in);
	
	onScroll
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnScroll", setMethod="setOnScroll" },
			@VEEvent{}
		};
	function getOnScroll() returns (EventHandler[]);
	function setOnScroll(handlers EventHandler[] in);
	
	onContextMenu
			EventHandler[]
			
			{ @JavaScriptProperty { getMethod="getOnContextMenu", setMethod="setOnContextMenu" },
			@VEEvent{}
		};
	function getOnContextMenu() returns (EventHandler[]);
	function setOnContextMenu(handlers EventHandler[] in);
		
	function morph(duration int in, callback EffectCallback in, morphFunction MorphFunction in);
	function fadeIn(duration int in, callback EffectCallback in);
	function fadeOut(duration int in, callback EffectCallback in);
	function resize(width int in, height int in, duration int in, callback EffectCallback in);
	
	numericSwap String {
			@VEProperty{
				category = "Bidi",
				propertyType = "choice",
				choices = [
					@VEPropertyChoice{id = "\"Yes\"", displayName = "Yes"},
					@VEPropertyChoice{id = "\"No\"", displayName = "No"}
				],
				default = "\"No\""
			}
		};
	
	symmetricSwap String {
			@VEProperty{
				category = "Bidi",
				propertyType = "choice",
				choices = [
					@VEPropertyChoice{id = "\"Yes\"", displayName = "Yes"},
					@VEPropertyChoice{id = "\"No\"", displayName = "No"}
				],
				default = "\"No\""
			}
		};
		
	displayStyle string {@JavaScriptProperty  { getMethod = "getDisplayStyle", setMethod = "setDisplayStyle" }};

	function getError() returns (boolean);
	function setError(value boolean in);

	function setBiDiMarkers(isTextTypeVisual boolean in, isTextOrientationRightToLeft boolean in);
	function setBiDiStyles(value1 boolean in, value2 boolean in);
	function cleanBiDiMarkers();
	function getSymmetricSwap() returns (string);
	function setSymmetricSwap(value string in);
	function getNumericSwap() returns (string);
	function setNumericSwap(value string in);
	
end


ExternalType View type JavaScriptObject{relativePath = "egl/ui/rui",
		javaScriptName = "View",
		eglIsSystemAnnotation = yes
		}
		
	function getProperty(property String in) returns (String);
	function appendChildToParent(p1 Widget in, p2 Widget in);
	private document Document;
	private initialUI Widget[];
	
	

end

Delegate EffectCallback() {eglIsSystemPart = yes}
end
Delegate MorphFunction(widget Widget in, step float in) {eglIsSystemPart = yes}
end
Delegate StartDragFunction(widget Widget in, x int in, y int in) returns(boolean) {eglIsSystemPart = yes}
end
Delegate DropOnTargetFunction(widget Widget in, dropTarget Widget in, x int in, y int in) {eglIsSystemPart = yes}
end
Delegate DragFunction(widget Widget in, dropTarget Widget in, x int in, y int in) {eglIsSystemPart = yes}
end
