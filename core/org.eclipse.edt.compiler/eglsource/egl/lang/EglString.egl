package egl.lang;

import egl.lang.reflect.ParameterizableType;
import egl.lang.reflect.mof.Operation;

import org.eclipse.edt.mof.egl.SequenceType;

externalType EglString extends AnyText type ParameterizableType {
	parameterizedType = SequenceType
}
	/**
	 * {@Operation +} Concatenates two Srings
	 */
	static function $Plus(lvalue EglString in, rvalue EglString in) returns(EglString) {@Operation{"+"}};

	/**
	 * {@Operation ::} Concatenates two strings
	 */
	static function $Concat(value EglString in, rvalue EglString in) returns (EglString) {@Operation{"::"}};

	/**
	 * {@Operation ?:} Concatenates two strings.  If either is null then
	 */
	static function $ConcatNull(value EglString in, rvalue EglString in) returns(EglString) {@Operation{"?:"}};

	/**
	 * {@Operation <} Compares two strings.
	 */
	static function $LT(lvalue EglString in, rvalue EglString in) returns (EglBoolean) {@Operation{"<"}};

	/**
	 * {@Operation >} Compares two strings.
	 */
	static function $GT(lvalue EglString in, rvalue EglString in) returns (EglBoolean) {@Operation{">"}};

	/**
	 * {@Operation <=} Compares two strings.
	 */
	static function $LTE(lvalue EglString in, rvalue EglString in) returns (EglBoolean) {@Operation{"<="}};

	/**
	 * {@Operation >=} Compares two strings.
	 */
	static function $GTE(lvalue EglString in, rvalue EglString in) returns (EglBoolean) {@Operation{">="}};

	/**
	 * {@Operation ==} Compares two strings.
	 */
	static function $EQ(lvalue EglString in, rvalue EglString in) returns(EglBoolean) {@Operation{"=="}};

	/**
	 * {@Operation !=} Compares two strings.
	 */
	static function $NEQ(lvalue EglString in, rvalue EglString in) returns(EglBoolean) {@Operation{"!="}};

	/**
	 * {@Operation [:} Returns the substring starting at fromIndex and ending at toIndex.
	 * @throws InvalidIndexException  if either index is out of range, or fromIndex is > toIndex.
	 */
	static function $Substr(value EglString in, fromIndex EglInt in, toIndex EglInt in) returns(EglString) {@Operation{"[:"}};

	/**
	 * {@Operation widen} Converts an int to a string.  The result will begin
	 * with a sign only if the value is negative.  There will be no characters
	 * in the result aside from the optional sign and the digits of the value.
	 */
	static function asString(value EglInt in) returns(EglString) {@Operation{"widen"}};

	/**
	 * {@Operation widen} Converts a boolean to a string.  The result will be
	 * "true" or "false".
	 */
	static function asString(value EglBoolean in) returns (EglString) {@Operation{"widen"}};


	/**
	 * {@Operation widen} Performs conversion from EglString to EglString.
	 */
	static function asString(value EglString in) returns(EglString) {@Operation{"widen"}};
end
