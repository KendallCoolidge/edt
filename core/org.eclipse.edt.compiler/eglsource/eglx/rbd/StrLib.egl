/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package eglx.rbd;

library StrLib
	function booleanAsString(value boolean in) returns(string)
		if ( value )
			return( "true" );
		else
			return( "false" );
		end
	end
	
	function characterLen(text string in) returns(int)
		return( text.clip().length() );
	end
	
	function clip(source string? in) returns(string?)
		if ( source == null )
			return( null );
		else
			return( source.clip() );
		end
	end
	
	function clip(source string? in, clipType int? in) returns(string?)
		if ( source == null || clipType == null )
			return( null );
		else
			case ( clipType )
				when (0)
					return( source.trim() );
				when (1)
					return( source.clipLeading() );
				when (2)
					return( source.clip() );
				otherwise
					return( source );
			end
		end
	end
		
	function formatDate(dateValue date? in, format string? in) returns(string?)
		if ( dateValue == null || format == null )
			return( null );
		else
			return( StringLib.format( dateValue, format ) );
		end
	end
		
	function formatNumber(intValue smallint? in, format string? in) returns (string?)
		if ( intValue == null || format == null )
			return( null );
		else
			return( StringLib.format( intValue, format ) );
		end
	end
		
	function formatNumber(intValue int? in, format string? in) returns (string?)
		if ( intValue == null || format == null )
			return( null );
		else
			return( StringLib.format( intValue, format ) );
		end
	end
		
	function formatNumber(intValue bigint? in, format string? in) returns (string?)
		if ( intValue == null || format == null )
			return( null );
		else
			return( StringLib.format( intValue, format ) );
		end
	end
		
	function formatNumber(decValue decimal? in, format string? in) returns (string?)
		if ( decValue == null || format == null )
			return( null );
		else
			return( StringLib.format( decValue, format ) );
		end
	end
		
	function formatNumber(floatValue smallfloat? in, format string? in) returns (string?)
		if ( floatValue == null || format == null )
			return( null );
		else
			return( StringLib.format( floatValue, format ) );
		end
	end
		
	function formatNumber(floatValue float? in, format string? in) returns (string?)
		if ( floatValue == null || format == null )
			return( null );
		else
			return( StringLib.format( floatValue, format ) );
		end
	end
		
	function formatTimeStamp(timestampvalue timestamp("yyyyMMddHHmmssffffff")? in, format string? in) returns (string?)
		if ( timestampvalue == null || format == null )
			return( null );
		else
			return( StringLib.format( timestampvalue, format ) );
		end
	end
	
	function getNextToken(source string in, index int inout, delimiters string in) returns (string?)
		charIndex int = index / 2 + 1;
		token string? = StringLib.getNextToken( source, charIndex, delimiters );
		index = (charIndex - 1) * 2 + 1;
		return( token );
	end
	
	function getTokenCount(source string in, delimiters string in) returns (int)
		return( StringLib.getTokenCount( source, delimiters ) );
	end
	
	function indexOf(source string in, pattern string in) returns (int)
		return( source.indexOf( pattern ) );
	end
	
	function indexOf(source string in, pattern string in, startIndex int in) returns (int)
		return( source.indexOf( pattern, startIndex ) );
	end
	
	function lowerCase(characterItem string? in) returns(string?)
		if ( characterItem == null )
			return( null );
		else
			return( characterItem.toLowerCase() );
		end
	end

	function spaces(characterCount int? in) returns(string?)
		if ( characterCount == null )
			return( null );
		else
			result string;
			fiftyBlanks string = "                                                  ";
			while ( characterCount >= 50 )
				result ::= fiftyBlanks;
				characterCount -= 50;
			end
			if ( characterCount > 0 )
				result ::= fiftyBlanks[1:characterCount];
			end
			return( result );
		end
	end

	function upperCase(characterItem string? in) returns(string?)
		if ( characterItem == null )
			return( null );
		else
			return( characterItem.toUpperCase() );
		end
	end

end
