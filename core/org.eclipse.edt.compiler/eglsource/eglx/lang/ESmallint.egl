/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package eglx.lang;

import egl.lang.reflect.ClassType;
import egl.lang.reflect.mof.Operation;

externalType ESmallint extends ENumber type ClassType
	/**
	 * {@Operation +} A unary plus (has no effect on the numeric value).
	 */
	static function $Plus(value ESmallint in) returns (EInt) {@Operation{"+"}};

	/**
	 * {@Operation +} Adds two numbers.
	 */
	static function $Plus(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"+"}};

	/**
	 * {@Operation -} Negates the value.
	 */
	static function $Minus(value ESmallint in) returns (EInt) {@Operation{"-"}};

	/**
	 * {@Operation -} Subtracts one number from another.
	 */
	static function $Minus(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"-"}};

	/**
	 * {@Operation *} Multiplies two numbers.
	 */
	static function $Multiply(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"*"}};

	/**
	 * {@Operation /} Divides one number by another.
	 */
	static function $Divide(lvalue ESmallint in, rvalue ESmallint in) returns (EDecimal) {@Operation{"/"}};

	/**
	 * {@Operation %} Computes the remainder of dividing one number by another.
	 */
	static function $Modulo(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"%"}};

	/**
	 * {@Operation **} Computes lvalue to the power of rvalue.
	 */
	static function $PowerOf(lvalue ESmallint in, rvalue ESmallint in) returns (EFloat) {@Operation{"**"}};

	/**
	 * {@Operation &} Computes the bitwise AND of two numbers.
	 */
	static function $BitAnd(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"&"}};

	/**
	 * {@Operation |} Computes the bitwise OR of two numbers.
	 */
	static function $BitOr(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"|"}};

	/**
	 * {@Operation xor} Computes the bitwise exclusive OR of two numbers.
	 */
	static function $BitXor(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"xor"}};
	
	/**
	 * {@Operation <<} Computes the bitwise left shift of two numbers.
	 */
	static function $LeftShift(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{"<<"}};
	
	/**
	 * {@Operation <<} Computes the bitwise arithmentic right shift of two numbers.
	 */
	static function $RightShiftArithmetic(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{">>"}};
	
	/**
	 * {@Operation <<} Computes the bitwise logical right shift of two numbers.
	 */
	static function $RightShiftLogical(lvalue ESmallint in, rvalue ESmallint in) returns (EInt) {@Operation{">>>"}};

	/**
	 * {@Operation <} Compares two numbers.
	 */
	static function $LT(lvalue ESmallint in, rvalue ESmallint in) returns (EBoolean) {@Operation{"<"}};

	/**
	 * {@Operation >} Compares two numbers.
	 */
	static function $GT(lvalue ESmallint in, rvalue ESmallint in) returns (EBoolean) {@Operation{">"}};

	/**
	 * {@Operation <=} Compares two numbers.
	 */
	static function $LTE(lvalue ESmallint in, rvalue ESmallint in) returns (EBoolean) {@Operation{"<="}};

	/**
	 * {@Operation >=} Compares two numbers.
	 */
	static function $GTE(lvalue ESmallint in, rvalue ESmallint in) returns (EBoolean) {@Operation{">="}};

	/**
	 * {@Operation ==} Compares two numbers.
	 */
	static function $EQ(lvalue ESmallint in, rvalue ESmallint in) returns(EBoolean) {@Operation{"=="}};

	/**
	 * {@Operation !=} Compares two numbers.
	 */
	static function $NEQ(lvalue ESmallint in, rvalue ESmallint in) returns(EBoolean) {@Operation{"!="}};

	/**
	 * {@Operation widen} Converts a smallint to a number.
	 */
	static function asNumber(value ESmallint in) returns(ENumber) {@Operation{"widen"}};

	/**
	 * {@Operation narrow} Converts a decimal to a smallint.  Digits after the
	 * decimal point are discarded.
	 *
	 * @throws TypeCastException if the decimal is out of range for a smallint.
	 */
	static function asSmallint(value EDecimal in) returns(ESmallint) {@Operation{"narrow"}};

	/**
	 * {@Operation narrow} Converts a float to a smallint.  Digits after the
	 * decimal point are discarded.
	 *
	 * @throws TypeCastException if the float is out of range for a smallint.
	 */
	static function asSmallint(value EFloat in) returns(ESmallint) {@Operation{"narrow"}};

	/**
	 * {@Operation narrow} Converts an int to a smallint.
	 *
	 * @throws TypeCastException if the int is out of range for a smallint.
	 */
	static function asSmallint(value EInt in) returns(ESmallint) {@Operation{"narrow"}};

	/**
	 * {@Operation narrow} Converts a string to a smallint.  The string is parsed
	 * as follows: It may begin with an optional + or - sign.  After the sign there
	 * must be a sequence of one or more digit characters.  Nothing may follow the
	 * digits.  The digits in the string must be within the valid range for a smallint.
	 *
	 * @throws TypeCastException if the string can't be parsed into a smallint.
	 */
	static function asSmallint(value EString in) returns(ESmallint) {@Operation{"narrow"}};

	/**
	 * {@Operation narrow} Converts a smallfloat to a smallint.  Digits after the
	 * decimal point are discarded.
	 *
	 * @throws TypeCastException if the smallfloat is out of range for a smallint.
	 */
	static function asSmallint(value ESmallfloat in) returns(ESmallint) {@Operation{"narrow"}};

	/**
	 * {@Operation narrow} Converts a bigint to a smallint.
	 *
	 * @throws TypeCastException if the bigint is out of range for a smallint.
	 */
	static function asSmallint(value EBigint in) returns(ESmallint) {@Operation{"narrow"}};

	/**
	 * {@Operation narrow} Converts a number to a smallint.  Digits after the
	 * decimal point are discarded.
	 *
	 * @throws TypeCastException if the number is out of range for a smallint.
	 */
	static function asSmallint(value ENumber in) returns(ESmallint) {@Operation{"narrow"}};
end