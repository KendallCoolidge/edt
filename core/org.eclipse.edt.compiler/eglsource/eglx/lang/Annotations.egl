package eglx.lang;

/**
 * Put EGLProperty on a field to indicate that it should always be accessed through
 * getter and/or setter functions in generated code.  If only getMethod is set,
 * the field is read-only.
 *
 * Use the Property annotation, not EGLProperty, on fields of ExternalTypes.
 */
Record EGLProperty type Annotation
{
	targets = [ElementKind.FieldMbr],
	validationProxy = "org.eclipse.edt.compiler.binding.annotationType.EGLPropertyAnnotationTypeBinding"
} 
	getMethod FunctionMemberRef;
	setMethod FunctionMemberRef;
end

/**
 * Put Property on a field of an ExternalType to indicate that it should always 
 * be accessed through getter and/or setter functions in generated code.  If only
 * getMethod is set, the field is read-only. 
 */
Record Property type Annotation
{
	targets = [ElementKind.FieldMbr]
}
	getMethod String;
	setMethod String;
end

/**
 * Use ExternalName on fields and functions of ExternalTypes when their names
 * aren't valid EGL identifiers.
 */
Record ExternalName type Annotation
{
	targets = [
		ElementKind.FieldMbr,
		ElementKind.FunctionMbr
	]
}
	value String;
end

/**
 * The stereotype for all Exceptions.
 */
Record Exception type Annotation
{
	targets = [ElementKind.recordPart],
	@Stereotype { defaultSuperType = AnyException }
}
end

Record EventListener type Annotation
{
	targets = [
		ElementKind.FieldMbr
	]
} 
	addMethod String;
	listenerType String;
	method String;
end


