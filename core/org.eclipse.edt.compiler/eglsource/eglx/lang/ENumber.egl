/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package eglx.lang;

import egl.lang.reflect.ClassType;
import egl.lang.reflect.Operation;

externalType ENumber extends AnyValue type ClassType
	/**
	 * Constructs a number with a default value of 0.
	 */
	constructor();
	
	/**
	 * {@Operation +} A unary plus (has no effect on the numeric value).
	 */
	static function $Plus(value ENumber in) returns (ENumber) {@Operation{"+"}};

	/**
	 * {@Operation +} Adds two numbers.
	 */
	static function $Plus(lvalue ENumber in, rvalue ENumber in) returns (ENumber) {@Operation{"+"}};

	/**
	 * {@Operation -} Negates the value.
	 */
	static function $Minus(value ENumber in) returns (ENumber) {@Operation{"-"}};

	/**
	 * {@Operation -} Subtracts one number from another.
	 */
	static function $Minus(lvalue ENumber in, rvalue ENumber in) returns (ENumber) {@Operation{"-"}};

	/**
	 * {@Operation *} Multiplies two numbers.
	 */
	static function $Multiply(lvalue ENumber in, rvalue ENumber in) returns (ENumber) {@Operation{"*"}};

	/**
	 * {@Operation /} Divides one number by another.
	 */
	static function $Divide(lvalue ENumber in, rvalue ENumber in) returns (ENumber) {@Operation{"/"}};

	/**
	 * {@Operation %} Computes the remainder of dividing one number by another.
	 */
	static function $Modulo(lvalue ENumber in, rvalue ENumber in) returns (ENumber) {@Operation{"%"}};

	/**
	 * {@Operation **} Computes lvalue to the power of rvalue.
	 */
	static function $PowerOf(lvalue ENumber in, rvalue ENumber in) returns (ENumber) {@Operation{"**"}};

	/**
	 * {@Operation <} Compares two numbers.
	 */
	static function $LT(lvalue ENumber in, rvalue ENumber in) returns (EBoolean) {@Operation{"<"}};

	/**
	 * {@Operation >} Compares two numbers.
	 */
	static function $GT(lvalue ENumber in, rvalue ENumber in) returns (EBoolean) {@Operation{">"}};

	/**
	 * {@Operation <=} Compares two numbers.
	 */
	static function $LTE(lvalue ENumber in, rvalue ENumber in) returns (EBoolean) {@Operation{"<="}};

	/**
	 * {@Operation >=} Compares two numbers.
	 */
	static function $GTE(lvalue ENumber in, rvalue ENumber in) returns (EBoolean) {@Operation{">="}};

	/**
	 * {@Operation ==} Compares two numbers.
	 */
	static function $EQ(lvalue ENumber? in, rvalue ENumber? in) returns(EBoolean) {@Operation{"=="}};

	/**
	 * {@Operation !=} Compares two numbers.
	 */
	static function $NEQ(lvalue ENumber? in, rvalue ENumber? in) returns(EBoolean) {@Operation{"!="}};

	/**
	 * {@Operation{"widen"} Converts a bigint to a number.
	 */
	static function asNumber(value EBigint? in) returns(ENumber?) {@Operation{"widen"}};

	/**
	 * {@Operation{"widen"} Converts a decimal to a number.
	 */
	static function asNumber(value EDecimal? in) returns(ENumber?) {@Operation{"widen"}};

	/**
	 * {@Operation{"widen"} Converts a float to a number.
	 */
	static function asNumber(value EFloat? in) returns(ENumber?) {@Operation{"widen"}};

	/**
	 * {@Operation{"widen"} Converts an int to a number.
	 */
	static function asNumber(value EInt? in) returns(ENumber?) {@Operation{"widen"}};

	/**
	 * {@Operation{"widen"} Converts a smallfloat to a number.
	 */
	static function asNumber(value ESmallfloat? in) returns(ENumber?) {@Operation{"widen"}};

	/**
	 * {@Operation{"widen"} Converts a smallint to a number.
	 */
	static function asNumber(value ESmallint? in) returns(ENumber?) {@Operation{"widen"}};

	/**
	 * {@Operation{"narrow"} Converts a string to a number.
	 */
	static function asNumber(value EString? in) returns(ENumber?) {@Operation{"narrow"}};
	
	/**
	 * For floating-point types, this returns the number of digits that can be
	 * stored before rounding/imprecision may occur.  For other numeric types, 
	 * this returns the maximum number of digits that can be stored in this value.
	 *
	 * @return the precision of this value.
	 */
	function precision() returns(EInt);
	
	/**
	 * For floating-point types, this returns the number of digits in the value to
	 * the right of the decimal point.  For other numeric types, this returns the 
	 * maximum number of digits to the right of the decimal point that can be 
	 * stored in this value.
	 *
	 * @return the decimals of this value.
	 */
	function decimals() returns(EInt);
end
