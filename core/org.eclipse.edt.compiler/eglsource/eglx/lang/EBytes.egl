/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package eglx.lang;

import egl.lang.reflect.ParameterizableType;
import egl.lang.reflect.mof.Operation;

import org.eclipse.edt.mof.egl.SequenceType;

externalType EBytes extends AnyText type ParameterizableType {
	parameterizedType = SequenceType
}
	/**
	 * {@Operation +} Concatenates two bytes.
	 */
	static function $Plus(lvalue EBytes? in, rvalue EBytes? in) returns(EBytes) {@Operation{"+"}};

	/**
	 * {@Operation ::} Concatenates two bytes.
	 */
	static function $Concat(value EBytes? in, rvalue EBytes? in) returns (EBytes) {@Operation{"::"}};

	/**
	 * {@Operation ?:} Concatenates two bytes.  If either is null then null is returned.
	 */
	static function $ConcatNull(value EBytes? in, rvalue EBytes? in) returns(EBytes?) {@Operation{"?:"}};

	/**
	 * {@Operation <} Compares two bytes.
	 */
	static function $LT(lvalue EBytes in, rvalue EBytes in) returns (EBoolean) {@Operation{"<"}};

	/**
	 * {@Operation >} Compares two bytes.
	 */
	static function $GT(lvalue EBytes in, rvalue EBytes in) returns (EBoolean) {@Operation{">"}};

	/**
	 * {@Operation <=} Compares two bytes.
	 */
	static function $LTE(lvalue EBytes in, rvalue EBytes in) returns (EBoolean) {@Operation{"<="}};

	/**
	 * {@Operation >=} Compares two bytes.
	 */
	static function $GTE(lvalue EBytes in, rvalue EBytes in) returns (EBoolean) {@Operation{">="}};

	/**
	 * {@Operation ==} Compares two bytes.
	 */
	static function $EQ(lvalue EBytes in, rvalue EBytes in) returns(EBoolean) {@Operation{"=="}};

	/**
	 * {@Operation !=} Compares two bytes.
	 */
	static function $NEQ(lvalue EBytes in, rvalue EBytes in) returns(EBoolean) {@Operation{"!="}};

	/**
	 * {@Operation [:} Returns the substring starting at fromIndex and ending at toIndex.
	 * @throws InvalidIndexException  if either index is out of range, or fromIndex is > toIndex.
	 */
	static function $Substr(value EBytes in, fromIndex EInt in, toIndex EInt in) returns(EBytes) {@Operation{"[:"}};
end
