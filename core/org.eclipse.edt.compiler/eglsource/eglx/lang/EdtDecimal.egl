package eglx.lang;

import egl.lang.EglNumber;
import egl.lang.reflect.ClassType;
import egl.lang.reflect.ParameterizableType;
import egl.lang.reflect.mof.Operation;

import org.eclipse.edt.mof.egl.FixedPrecisionType;

/**
 * EdtDecimal defines the EGL decimal type.
 */
externalType EdtDecimal extends EglNumber type ParameterizableType {
	parameterizedType = FixedPrecisionType
}
	/**
	 * @Operation{"+"} A unary plus (has no effect on the numeric value).
	 */
	static function $Plus(value EdtDecimal in) returns (EdtDecimal) {@Operation{"+"}};

	/**
	 * @Operation{"+"} Adds two numbers.
	 */
	static function $Plus(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtDecimal) {@Operation{"+"}};

	/**
	 * @Operation{"-"} Negates the value.
	 */
	static function $Minus(value EdtDecimal in) returns (EdtDecimal) {@Operation{"-"}};

	/**
	 * @Operation{"-"} Subtracts one number from another.
	 */
	static function $Minus(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtDecimal) {@Operation{"-"}};

	/**
	 * @Operation{"*"} Multiplies two numbers.
	 */
	static function $Multiply(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtDecimal) {@Operation{"*"}};

	/**
	 * @Operation{"/"} Divides one number by another.
	 */
	static function $Divide(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtDecimal) {@Operation{"/"}};

	/**
	 * @Operation{"%"} Computes the remainder of dividing one number by another.
	 */
	static function $Modulus(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtDecimal) {@Operation{"%"}};

	/**
	 * @Operation{"**"} Computes lvalue to the power of rvalue.
	 */
	static function $PowerOf(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtFloat) {@Operation{"**"}};

	/**
	 * @Operation{"<"} Compares two numbers.
	 */
	static function $LT(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtBoolean) {@Operation{"<"}};

	/**
	 * @Operation{">"} Compares two numbers.
	 */
	static function $GT(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtBoolean) {@Operation{">"}};

	/**
	 * @Operation{"<="} Compares two numbers.
	 */
	static function $LTE(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtBoolean) {@Operation{"<="}};

	/**
	 * @Operation{">="} Compares two numbers.
	 */
	static function $GTE(lvalue EdtDecimal in, rvalue EdtDecimal in) returns (EdtBoolean) {@Operation{">="}};

	/**
	 * @Operation{"=="} Compares two numbers.
	 */
	static function $EQ(lvalue EdtDecimal in, rvalue EdtDecimal in) returns(EdtBoolean) {@Operation{"=="}};

	/**
	 * @Operation{"!="} Compares two numbers.
	 */
	static function $NEQ(lvalue EdtDecimal in, rvalue EdtDecimal in) returns(EdtBoolean) {@Operation{"!="}};

	/**
	 * @Operation{"widen"} Converts a bigint to a decimal of arbitrary precision.
	 */
	static function asDecimal(value EdtBigint in) returns(EdtDecimal) {@Operation{"widen"}};

	/**
	 * @Operation{"narrow"} Converts a bigint to a decimal with the specified precision.
	 *
	 * @throws TypeCastException if the value can't be represented with the specified precision.
	 */
	static function asDecimal(value EdtBigint in, length EdtInt in, decimals EdtInt in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"narrow"} Converts any decimal to a decimal with the specified precision.
	 *
	 * @throws TypeCastException if the value can't be represented with the specified precision.
	 */
	static function asDecimal(value EdtDecimal in, length EdtInt in, decimals EdtInt in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"widen"} Converts a smallint to a decimal of arbitrary precision.
	 */
	static function asDecimal(value EdtSmallint in) returns(EdtDecimal) {@Operation{"widen"}};

	/**
	 * @Operation{"narrow"} Converts a smallint to a decimal with the specified precision.
	 *
	 * @throws TypeCastException if the value can't be represented with the specified precision.
	 */
	static function asDecimal(value EdtSmallint in, length EdtInt in, decimals EdtInt in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"narrow"} Converts a smallfloat to a decimal of arbitrary precision.
	 *
	 * @throws TypeCastException if the value is out of range.
	 */
	static function asDecimal(value EdtSmallfloat in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"narrow"} Converts a smallfloat to a decimal with the specified precision.
	 *
	 * @throws TypeCastException if the value can't be represented with the specified precision.
	 */
	static function asDecimal(value EdtSmallfloat in, length EdtInt in, decimals EdtInt in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"widen"} Converts an int to a decimal of arbitrary precision.
	 */
	static function asDecimal(value EdtInt in) returns(EdtDecimal) {@Operation{"widen"}};

	/**
	 * @Operation{"narrow"} Converts an int to a decimal with the specified precision.
	 *
	 * @throws TypeCastException if the value can't be represented with the specified precision.
	 */
	static function asDecimal(value EdtInt in, length EdtInt in, decimals EdtInt in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"narrow"} Converts a float to a decimal of arbitrary precision.
	 *
	 * @throws TypeCastException if the value is out of range.
	 */
	static function asDecimal(value EdtFloat in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"narrow"} Converts a float to a decimal with the specified precision.
	 *
	 * @throws TypeCastException if the value is out of range.
	 */
	static function asDecimal(value EdtFloat in, length EdtInt in, decimals EdtInt in) returns(EdtDecimal) {@Operation{"narrow"}};
	
	//TODO comment me
	static function asDecimal(value EdtString in) returns(EdtDecimal) {@Operation{"narrow"}};
	
	//TODO comment me
	static function asDecimal(value EdtString in, length EdtInt in, decimals EdtInt in) returns(EdtDecimal) {@Operation{"narrow"}};

	/**
	 * @Operation{"widen"} Converts a decimal to a number.
	 */
	static function asNumber(value EdtDecimal in) returns(EglNumber) {@Operation{"widen"}};
end
