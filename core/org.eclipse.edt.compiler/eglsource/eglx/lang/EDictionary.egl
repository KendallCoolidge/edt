/*******************************************************************************
 * Copyright Â© 2012, 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package eglx.lang;

import egl.lang.reflect.ClassType;
import egl.lang.reflect.Dynamic;
import egl.lang.reflect.Operation;

/**
 * An EDictionary, the class for EGL's dictionary type, stores named values.
 * The name of a value -- its key -- is used to access that value.  The keys are
 * strings and the values are of type Any.
 *
 * Two annotations are commonly used on dictionaries.  CaseSensitive tells the
 * dictionary if its keys are case-sensitive.  The default is false.  Ordering
 * determines how the getKeys and getValues functions populate the lists they 
 * return.  Its value comes from the OrderingKind enumeration.  byKey means the 
 * elements of those lists are in alphabetical order of the keys.  byInsertion
 * means the elements of those lists are in the order that keys were added to
 * the dictionary.  And none (the default) means the elements of those lists 
 * may be in any order whatsoever.
 *
 */
externalType EDictionary extends EAny type ClassType {@Dynamic}

	/**
	 * Default constructor
	 */
	constructor();

	/**
	 * Constructor used to set the value of case sensitivity and ordering
	 *
	 * @param caseSensitive  set if the dictionary is case sensitive
	 * @param ordering  set the order maintained in the dictionary.
	 */
	constructor(caseSensitive boolean in, ordering OrderingKind in);

	/**
	 * Tells if there's a value stored with the given key.
	 *
	 * @param key  the key.
	 * @return true if the key is in this dictionary.
	 */
	function containsKey(key EString in) returns(EBoolean);
	
	/**
	 * Returns a list containing all of the keys, in the order specified by
	 * the ordering annotation.
	 *
	 * @return the keys.
	 */
	function getKeys() returns(EString[]);
	
	/**
	 * Returns a list containing all of the values, in the order specified by
	 * the ordering annotation.
	 *
	 * @return the values.
	 */
	function getValues() returns(EAny[]);

	/**
	 * Puts all of the key-value pairs from one dictionary into this dictionary.
	 *
	 * @param other  the source of the new key-value pairs.
	 */
	function insertAll(other EDictionary in);

	/**
	 * Removes all of the key-value pairs from this dictionary.
	 */
	function removeAll();

	/**
	 * Removes the key-value pair which uses the specified key.
	 *
	 * @param key  the key.
	 * @throws DynamicAccessException  if there's no key-value pair with the given key.
	 */
	function removeElement(key EString in);
	
	/**
	 * Returns the number of key-value pairs in this dictionary.
	 *
	 * @return the size.
	 */
	function size() returns( EInt );

	/**
	 * Returns true if the dictionary is case sensitive.
	 *
	 * @return the case sensitivity.
	 */
	function getCaseSensitive() returns( EBoolean );

	/**
	 * Returns the order maintained in the dictionry.
	 *
	 * @return OrderingKind.
	 */
	function getOrdering() returns( OrderingKind );
end


/**
 * OrderingKind provides values for the Ordering annotation.  See the
 * documentation of EDictionary for more information.
 */
enumeration OrderingKind
	byKey = 1,
	byInsertion = 2,
	none = 3
end
