/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package eglx.lang;

import egl.lang.reflect.ClassType;
import egl.lang.reflect.mof.Operation;

externalType ESmallfloat extends ENumber type ClassType
	/**
	 * {@Operation +} A unary plus (has no effect on the numeric value).
	 */
	static function $Plus(value ESmallfloat in) returns (ESmallfloat) {@Operation{"+"}};

	/**
	 * {@Operation +} Adds two numbers.
	 */
	static function $Plus(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (ESmallfloat) {@Operation{"+"}};

	/**
	 * {@Operation -} Negates the value.
	 */
	static function $Minus(value ESmallfloat in) returns (ESmallfloat) {@Operation{"-"}};

	/**
	 * {@Operation -} Subtracts one number from another.
	 */
	static function $Minus(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (ESmallfloat) {@Operation{"-"}};

	/**
	 * {@Operation *} Multiplies two numbers.
	 */
	static function $Multiply(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (ESmallfloat) {@Operation{"*"}};

	/**
	 * {@Operation /} Divides one number by another.
	 */
	static function $Divide(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (ESmallfloat) {@Operation{"/"}};

	/**
	 * {@Operation %} Computes the remainder of dividing one number by another.
	 */
	static function $Modulo(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (ESmallfloat) {@Operation{"%"}};

	/**
	 * {@Operation **} Computes lvalue to the power of rvalue.
	 */
	static function $PowerOf(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (EFloat) {@Operation{"**"}};

	/**
	 * {@Operation <} Compares two numbers.
	 */
	static function $LT(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (EBoolean) {@Operation{"<"}};

	/**
	 * {@Operation >} Compares two numbers.
	 */
	static function $GT(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (EBoolean) {@Operation{">"}};

	/**
	 * {@Operation <=} Compares two numbers.
	 */
	static function $LTE(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (EBoolean) {@Operation{"<="}};

	/**
	 * {@Operation >=} Compares two numbers.
	 */
	static function $GTE(lvalue ESmallfloat in, rvalue ESmallfloat in) returns (EBoolean) {@Operation{">="}};

	/**
	 * {@Operation ==} Compares two numbers.
	 */
	static function $EQ(lvalue ESmallfloat? in, rvalue ESmallfloat? in) returns(EBoolean) {@Operation{"=="}};

	/**
	 * {@Operation !=} Compares two numbers.
	 */
	static function $NEQ(lvalue ESmallfloat? in, rvalue ESmallfloat? in) returns(EBoolean) {@Operation{"!="}};

	static function asNumber(value ESmallfloat in) returns(ENumber) {@Operation{"widen"}};

	static function asSmallfloat(value EDecimal in) returns(ESmallfloat) {@Operation{"widen"}};

	/**
	 * {@Operation narrow} Converts a string to a smallfloat.  The string is parsed
	 * as follows: It may begin with an optional + or - sign.  After the sign there
	 * must be a sequence of one or more digit characters.  They may be followed by
	 * a decimal point (a period) and one or more digit characters.  It may end with
	 * an exponent, which is the letter e or E, followed by an optional negative sign,
	 * followed by one or more digit characters.
	 *
	 * @throws TypeCastException if the string can't be parsed into a smallfloat.
	 */
	static function asSmallfloat(value EString in) returns(ESmallfloat) {@Operation{"narrow"}};
	
	static function asSmallfloat(value ESmallint in) returns(ESmallfloat) {@Operation{"widen"}};
	static function asSmallfloat(value EInt in) returns(ESmallfloat) {@Operation{"narrow"}};
	static function asSmallfloat(value EFloat in) returns(ESmallfloat) {@Operation{"narrow"}};
	static function asSmallfloat(value EBigint in) returns(ESmallfloat) {@Operation{"narrow"}};
	static function asSmallfloat(value ENumber in) returns(ESmallfloat) {@Operation{"narrow"}};
	
	/**
	 * {@Operation narrow} Converts bytes to a smallfloat.
	 *
	 * @throws TypeCastException if the bytes are not valid format for a smallfloat.
	 */
	static function asSmallfloat(value EBytes in) returns(ESmallfloat) {@Operation{"narrow"}};
end