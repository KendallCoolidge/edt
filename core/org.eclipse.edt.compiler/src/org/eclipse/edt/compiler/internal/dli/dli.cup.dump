Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "ERROR" was declared but never used
Warning: Terminal "LBRACKET" was declared but never used
Warning: Terminal "RBRACKET" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]HOSTVAR [3]ERROR [4]FUNCTIONNAME 
[5]ID [6]INTEGERLIT [7]DECIMALLIT [8]FLOATLIT [9]SINGLE_QUOTED_STRINGLIT 
[10]STRINGLIT [11]RELATIONOP [12]BOOLEANOP [13]LPAREN [14]RPAREN 
[15]LBRACKET [16]RBRACKET [17]ASTERISK 

===== Non terminals =====
[0]$START [1]dli [2]statement [3]functionName [4]ssa 
[5]commandCodes_opt [6]conditions_opt [7]conditions [8]condition [9]name 
[10]value [11]statement_star [12]statement_plus [13]ssa_star [14]ssa_plus 


===== Productions =====
[0] dli ::= statement_star 
[1] $START ::= dli EOF 
[2] statement ::= functionName ssa_star 
[3] statement ::= error 
[4] functionName ::= FUNCTIONNAME 
[5] ssa ::= name commandCodes_opt conditions_opt 
[6] commandCodes_opt ::= 
[7] commandCodes_opt ::= ASTERISK ID 
[8] conditions_opt ::= 
[9] conditions_opt ::= LPAREN conditions RPAREN 
[10] conditions_opt ::= LPAREN value RPAREN 
[11] conditions ::= condition 
[12] conditions ::= conditions BOOLEANOP condition 
[13] condition ::= name RELATIONOP value 
[14] name ::= ID 
[15] name ::= SINGLE_QUOTED_STRINGLIT 
[16] value ::= INTEGERLIT 
[17] value ::= DECIMALLIT 
[18] value ::= FLOATLIT 
[19] value ::= STRINGLIT 
[20] value ::= HOSTVAR 
[21] statement_star ::= 
[22] statement_star ::= statement_plus 
[23] statement_plus ::= statement 
[24] statement_plus ::= statement_plus statement 
[25] ssa_star ::= 
[26] ssa_star ::= ssa_plus 
[27] ssa_plus ::= ssa 
[28] ssa_plus ::= ssa_plus ssa 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [statement ::= (*) functionName ssa_star , {EOF error FUNCTIONNAME }]
  [statement_star ::= (*) statement_plus , {EOF }]
  [functionName ::= (*) FUNCTIONNAME , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [$START ::= (*) dli EOF , {EOF }]
  [statement_plus ::= (*) statement_plus statement , {EOF error FUNCTIONNAME }]
  [statement_star ::= (*) , {EOF }]
  [statement ::= (*) error , {EOF error FUNCTIONNAME }]
  [dli ::= (*) statement_star , {EOF }]
  [statement_plus ::= (*) statement , {EOF error FUNCTIONNAME }]
}
transition on functionName to state [7]
transition on dli to state [6]
transition on FUNCTIONNAME to state [5]
transition on statement to state [4]
transition on statement_plus to state [3]
transition on error to state [2]
transition on statement_star to state [1]

-------------------
lalr_state [1]: {
  [dli ::= statement_star (*) , {EOF }]
}

-------------------
lalr_state [2]: {
  [statement ::= error (*) , {EOF error FUNCTIONNAME }]
}

-------------------
lalr_state [3]: {
  [statement_plus ::= statement_plus (*) statement , {EOF error FUNCTIONNAME }]
  [statement ::= (*) functionName ssa_star , {EOF error FUNCTIONNAME }]
  [functionName ::= (*) FUNCTIONNAME , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [statement ::= (*) error , {EOF error FUNCTIONNAME }]
  [statement_star ::= statement_plus (*) , {EOF }]
}
transition on functionName to state [7]
transition on statement to state [36]
transition on FUNCTIONNAME to state [5]
transition on error to state [2]

-------------------
lalr_state [4]: {
  [statement_plus ::= statement (*) , {EOF error FUNCTIONNAME }]
}

-------------------
lalr_state [5]: {
  [functionName ::= FUNCTIONNAME (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}

-------------------
lalr_state [6]: {
  [$START ::= dli (*) EOF , {EOF }]
}
transition on EOF to state [35]

-------------------
lalr_state [7]: {
  [ssa ::= (*) name commandCodes_opt conditions_opt , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [ssa_plus ::= (*) ssa , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [statement ::= functionName (*) ssa_star , {EOF error FUNCTIONNAME }]
  [name ::= (*) SINGLE_QUOTED_STRINGLIT , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN ASTERISK }]
  [ssa_star ::= (*) ssa_plus , {EOF error FUNCTIONNAME }]
  [ssa_plus ::= (*) ssa_plus ssa , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [name ::= (*) ID , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN ASTERISK }]
  [ssa_star ::= (*) , {EOF error FUNCTIONNAME }]
}
transition on ssa_plus to state [13]
transition on SINGLE_QUOTED_STRINGLIT to state [12]
transition on ssa_star to state [11]
transition on name to state [10]
transition on ssa to state [9]
transition on ID to state [8]

-------------------
lalr_state [8]: {
  [name ::= ID (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT RELATIONOP LPAREN ASTERISK }]
}

-------------------
lalr_state [9]: {
  [ssa_plus ::= ssa (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}

-------------------
lalr_state [10]: {
  [ssa ::= name (*) commandCodes_opt conditions_opt , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [commandCodes_opt ::= (*) ASTERISK ID , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN }]
  [commandCodes_opt ::= (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN }]
}
transition on ASTERISK to state [16]
transition on commandCodes_opt to state [15]

-------------------
lalr_state [11]: {
  [statement ::= functionName ssa_star (*) , {EOF error FUNCTIONNAME }]
}

-------------------
lalr_state [12]: {
  [name ::= SINGLE_QUOTED_STRINGLIT (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT RELATIONOP LPAREN ASTERISK }]
}

-------------------
lalr_state [13]: {
  [ssa ::= (*) name commandCodes_opt conditions_opt , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [ssa_star ::= ssa_plus (*) , {EOF error FUNCTIONNAME }]
  [name ::= (*) SINGLE_QUOTED_STRINGLIT , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN ASTERISK }]
  [ssa_plus ::= ssa_plus (*) ssa , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [name ::= (*) ID , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN ASTERISK }]
}
transition on SINGLE_QUOTED_STRINGLIT to state [12]
transition on name to state [10]
transition on ssa to state [14]
transition on ID to state [8]

-------------------
lalr_state [14]: {
  [ssa_plus ::= ssa_plus ssa (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}

-------------------
lalr_state [15]: {
  [conditions_opt ::= (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [conditions_opt ::= (*) LPAREN value RPAREN , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [conditions_opt ::= (*) LPAREN conditions RPAREN , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [ssa ::= name commandCodes_opt (*) conditions_opt , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}
transition on conditions_opt to state [19]
transition on LPAREN to state [18]

-------------------
lalr_state [16]: {
  [commandCodes_opt ::= ASTERISK (*) ID , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN }]
}
transition on ID to state [17]

-------------------
lalr_state [17]: {
  [commandCodes_opt ::= ASTERISK ID (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT LPAREN }]
}

-------------------
lalr_state [18]: {
  [value ::= (*) HOSTVAR , {RPAREN }]
  [value ::= (*) DECIMALLIT , {RPAREN }]
  [name ::= (*) ID , {RELATIONOP }]
  [conditions ::= (*) condition , {BOOLEANOP RPAREN }]
  [value ::= (*) STRINGLIT , {RPAREN }]
  [value ::= (*) INTEGERLIT , {RPAREN }]
  [condition ::= (*) name RELATIONOP value , {BOOLEANOP RPAREN }]
  [conditions_opt ::= LPAREN (*) value RPAREN , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [value ::= (*) FLOATLIT , {RPAREN }]
  [name ::= (*) SINGLE_QUOTED_STRINGLIT , {RELATIONOP }]
  [conditions_opt ::= LPAREN (*) conditions RPAREN , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
  [conditions ::= (*) conditions BOOLEANOP condition , {BOOLEANOP RPAREN }]
}
transition on DECIMALLIT to state [28]
transition on INTEGERLIT to state [27]
transition on STRINGLIT to state [26]
transition on value to state [25]
transition on FLOATLIT to state [24]
transition on conditions to state [23]
transition on ID to state [8]
transition on SINGLE_QUOTED_STRINGLIT to state [12]
transition on HOSTVAR to state [22]
transition on condition to state [21]
transition on name to state [20]

-------------------
lalr_state [19]: {
  [ssa ::= name commandCodes_opt conditions_opt (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}

-------------------
lalr_state [20]: {
  [condition ::= name (*) RELATIONOP value , {BOOLEANOP RPAREN }]
}
transition on RELATIONOP to state [33]

-------------------
lalr_state [21]: {
  [conditions ::= condition (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [22]: {
  [value ::= HOSTVAR (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [23]: {
  [conditions ::= conditions (*) BOOLEANOP condition , {BOOLEANOP RPAREN }]
  [conditions_opt ::= LPAREN conditions (*) RPAREN , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}
transition on BOOLEANOP to state [31]
transition on RPAREN to state [30]

-------------------
lalr_state [24]: {
  [value ::= FLOATLIT (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [25]: {
  [conditions_opt ::= LPAREN value (*) RPAREN , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}
transition on RPAREN to state [29]

-------------------
lalr_state [26]: {
  [value ::= STRINGLIT (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [27]: {
  [value ::= INTEGERLIT (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [28]: {
  [value ::= DECIMALLIT (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [29]: {
  [conditions_opt ::= LPAREN value RPAREN (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}

-------------------
lalr_state [30]: {
  [conditions_opt ::= LPAREN conditions RPAREN (*) , {EOF error FUNCTIONNAME ID SINGLE_QUOTED_STRINGLIT }]
}

-------------------
lalr_state [31]: {
  [condition ::= (*) name RELATIONOP value , {BOOLEANOP RPAREN }]
  [conditions ::= conditions BOOLEANOP (*) condition , {BOOLEANOP RPAREN }]
  [name ::= (*) SINGLE_QUOTED_STRINGLIT , {RELATIONOP }]
  [name ::= (*) ID , {RELATIONOP }]
}
transition on condition to state [32]
transition on SINGLE_QUOTED_STRINGLIT to state [12]
transition on name to state [20]
transition on ID to state [8]

-------------------
lalr_state [32]: {
  [conditions ::= conditions BOOLEANOP condition (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [33]: {
  [value ::= (*) STRINGLIT , {BOOLEANOP RPAREN }]
  [condition ::= name RELATIONOP (*) value , {BOOLEANOP RPAREN }]
  [value ::= (*) INTEGERLIT , {BOOLEANOP RPAREN }]
  [value ::= (*) FLOATLIT , {BOOLEANOP RPAREN }]
  [value ::= (*) HOSTVAR , {BOOLEANOP RPAREN }]
  [value ::= (*) DECIMALLIT , {BOOLEANOP RPAREN }]
}
transition on HOSTVAR to state [22]
transition on STRINGLIT to state [26]
transition on value to state [34]
transition on FLOATLIT to state [24]
transition on INTEGERLIT to state [27]
transition on DECIMALLIT to state [28]

-------------------
lalr_state [34]: {
  [condition ::= name RELATIONOP value (*) , {BOOLEANOP RPAREN }]
}

-------------------
lalr_state [35]: {
  [$START ::= dli EOF (*) , {EOF }]
}

-------------------
lalr_state [36]: {
  [statement_plus ::= statement_plus statement (*) , {EOF error FUNCTIONNAME }]
}

-------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 3 warnings
  18 terminals, 15 non-terminals, and 29 productions declared, 
  producing 37 unique parse states.
  3 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "DLIParser.java", and "DLINodeTypes.java".
---------------------------------------------------- (v0.10k)
