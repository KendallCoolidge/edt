/*******************************************************************************
 * Copyright Â© 2011, 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
/*
 * Updated on Tue May 27 10:54:14 EDT 2008
 */
package org.eclipse.edt.compiler.core.ast;

/**
 * Returns true for non-overriden methods. If false is desired, use DefaultASTVisitor.
 *
 * Generated by tools/org.eclipse.edt.compiler.core.ast.VisitorGenerator
 */
public abstract class AbstractASTVisitor implements IASTVisitor {

	public boolean visit(AddStatement addStatement) {
		return true;
	}
	
	public boolean visit(AnnotationExpression annotationExpression) {
		return true;
	}
	
	public boolean visit(ArrayAccess arrayAccess) {
		return true;
	}
	
	public boolean visit(ArrayLiteral arrayLiteral) {
		return true;
	}
	
	public boolean visit(ArrayType arrayType) {
		return true;
	}
	
	public boolean visit(AsExpression asExpression) {
		return true;
	}
	
	public boolean visit(Assignment assignment) {
		return true;
	}
	
	public boolean visit(AssignmentStatement assignmentStatement) {
		return true;
	}
	
	public boolean visit(BinaryExpression binaryExpression) {
		return true;
	}
	
	public boolean visit(BooleanLiteral booleanLiteral) {
		return true;
	}
	
	public boolean visit(BytesLiteral bytesLiteral) {
		return true;
	}
	
	public boolean visit(CallStatement callStatement) {
		return true;
	}
	
	public boolean visit(CallbackTarget callbackTarget) {
		return true;
	}
	
	public boolean visit(CallReturns callReturns) {
		return true;
	}
	
	public boolean visit(CallSynchronizationValues callSynch) {
		return true;
	}
	
	public boolean visit(CaseStatement caseStatement) {
		return true;
	}
	
	public boolean visit(CharLiteral charLiteral) {
		return true;
	}
	
	public boolean visit(ClassDataDeclaration classDataDeclaration) {
		return true;
	}
	
	public boolean visit(CloseStatement closeStatement) {
		return true;
	}
	
	public boolean visit(ConstantFormField constantFormField) {
		return true;
	}
	
	public boolean visit(Constructor constructor) {
		return true;
	}
	
	public boolean visit(ContinueStatement continueStatement) {
		return true;
	}
	
	public boolean visit(ConverseStatement converseStatement) {
		return true;
	}
	
	public boolean visit(DataItem dataItem) {
		return true;
	}
	
	public boolean visit(DataTable dataTable) {
		return true;
	}
	
	public boolean visit(DBCharLiteral dBCharLiteral) {
		return true;
	}
	
	public boolean visit(DecimalLiteral decimalLiteral) {
		return true;
	}
	
	public boolean visit(Delegate delegate) {
		return true;
	}
	
	public boolean visit(DeleteStatement deleteStatement) {
		return true;
	}
	
	public boolean visit(DisplayStatement displayStatement) {
		return true;
	}
	
	public boolean visit(ElseBlock elseBlock) {
		return true;
	}
	
	public boolean visit(EmptyStatement emptyStatement) {
		return true;
	}
	
	public boolean visit(Enumeration enumeration) {
		return true;
	}
	
	public boolean visit(EnumerationField enumerationField) {
		return true;
	}
	
	public boolean visit(ExecuteStatement executeStatement) {
		return true;
	}
	
	public boolean visit(ExitStatement exitStatement) {
		return true;
	}
	
	public boolean visit(ExternalType externalType) {
		return true;
	}
	
	public boolean visit(FieldAccess fieldAccess) {
		return true;
	}
	
	public boolean visit(File file) {
		return true;
	}
	
	public boolean visit(FloatLiteral floatLiteral) {
		return true;
	}
	
	public boolean visit(ForEachStatement forEachStatement) {
		return true;
	}
	
	public boolean visit(ForExpressionClause forExpressionClause) {
		return true;
	}
	
	public boolean visit(FormGroup formGroup) {
		return true;
	}
	
	public boolean visit(ForStatement forStatement) {
		return true;
	}
	
	public boolean visit(ForUpdateClause forUpdateClause) {
		return true;
	}
	
	public boolean visit(ForwardStatement forwardStatement) {
		return true;
	}
	
	public boolean visit(FreeSQLStatement freeSQLStatement) {
		return true;
	}
	
	public boolean visit(FromExpressionClause fromExpressionClause) {
		return true;
	}
	
	public boolean visit( FromOrToExpressionClause clause) {
		return true;
	}
	
	public boolean visit(FunctionDataDeclaration functionDataDeclaration) {
		return true;
	}
	
	public boolean visit(FunctionInvocation functionInvocation) {
		return true;
	}
	
	public boolean visit(FunctionInvocationStatement functionInvocationStatement) {
		return true;
	}
	
	public boolean visit(FunctionParameter functionParameter) {
		return true;
	}
	
	public boolean visit(GetByKeyStatement getByKeyStatement) {
		return true;
	}
	
	public boolean visit(GetByPositionStatement getByPositionStatement) {
		return true;
	}
	
	public boolean visit(GotoStatement gotoStatement) {
		return true;
	}
	
	public boolean visit(Handler handler) {
		return true;
	}
	
	public boolean visit(HexLiteral hexLiteral) {
		return true;
	}
	
	public boolean visit(ImportDeclaration importDeclaration) {
		return true;
	}
	
	public boolean visit(IfStatement ifStatement) {
		return true;
	}
	
	public boolean visit(InExpression inExpression) {
		return true;
	}
	
	public boolean visit(InlineDLIStatement inlineDLIStatement) {
		return true;
	}
	
	public boolean visit(InlineSQLStatement inlineSQLStatement) {
		return true;
	}
	
	public boolean visit(IntegerLiteral integerLiteral) {
		return true;
	}
	
	public boolean visit(Interface interfaceNode) {
		return true;
	}
	
	public boolean visit(IntoClause intoClause) {
		return true;
	}
	
	public boolean visit(IsAExpression isAExpression) {
		return true;
	}
	
	public boolean visit(IsNotExpression isNotExpression) {
		return true;
	}
	
	public boolean visit(LabelStatement labelStatement) {
		return true;
	}
	
	public boolean visit(Library library) {
		return true;
	}
	
	public boolean visit(LikeMatchesExpression likeMatchesExpression) {
		return true;
	}
	
	public boolean visit(MBCharLiteral mBCharLiteral) {
		return true;
	}
	
	public boolean visit(MoveStatement moveStatement) {
		return true;
	}
	
	public boolean visit(NameType nameType) {
		return true;
	}
	
	public boolean visit(NestedForm nestedForm) {
		return true;
	}
	
	public boolean visit(NestedFunction nestedFunction) {
		return true;
	}
	
	public boolean visit(NewExpression newExpression) {
		return true;
	}
	
	public boolean visit(NullLiteral nullLiteral) {
		return true;
	}
	
	public boolean visit(NullableType nullableType) {
		return true;
	}
	
	public boolean visit(NoCursorClause noCursorClause) {
		return true;
	}
	
	public boolean visit(ObjectExpression objExpr) {
		return true;
	}

	public boolean visit(ObjectExpressionEntry objExprEntry) {
		return true;
	}

	public boolean visit(OnEventBlock onEventBlock) {
		return true;
	}
	
	public boolean visit(OnExceptionBlock onExceptionBlock) {
		return true;
	}
	
	public boolean visit(OpenStatement openStatement) {
		return true;
	}
	
	public boolean visit(OpenUIStatement openUIStatement) {
		return true;
	}
	
	public boolean visit(OtherwiseClause otherwiseClause) {
		return true;
	}
	
	public boolean visit(PackageDeclaration packageDeclaration) {
		return true;
	}
	
	public boolean visit(ParenthesizedExpression parenthesizedExpression) {
		return true;
	}
	
	public boolean visit(PassingClause passingClause) {
		return true;
	}
	
	public boolean visit(PrepareStatement prepareStatement) {
		return true;
	}
	
	public boolean visit(PrimitiveType primitiveType) {
		return true;
	}
	
	public boolean visit(PrintStatement printStatement) {
		return true;
	}
	
	public boolean visit(Program program) {
		return true;
	}
	
	public boolean visit(ProgramParameter programParameter) {
		return true;
	}
	
	public boolean visit(Record record) {
		return true;
	}
	
	public boolean visit(ReplaceStatement replaceStatement) {
		return true;
	}
	
	public boolean visit(ReturnsDeclaration returnsDeclaration) {
		return true;
	}
	
	public boolean visit(ReturningToInvocationTargetClause returningToInvocationTargetClause) {
		return true;
	}
	
	public boolean visit(ReturningToNameClause returningToNameClause) {
		return true;
	}
	
	public boolean visit(ReturnStatement returnStatement) {
		return true;
	}
	
	public boolean visit(Service service) {
		return true;
	}
	
	public boolean visit(ServiceReference serviceReference) {
		return true;
	}
	
	public boolean visit(SetStatement setStatement) {
		return true;
	}
	
	public boolean visit(SetValuesExpression setValuesExpression) {
		return true;
	}
	
	public boolean visit(SetValuesStatement setValuesStatement) {
		return true;
	}
	
	public boolean visit(SettingsBlock settingsBlock) {
		return true;
	}
	
	public boolean visit(ShowStatement showStatement) {
		return true;
	}
	
	public boolean visit(SimpleName simpleName) {
		return true;
	}
	
	public boolean visit(SingleRowClause singleRowClause) {
		return true;
	}
	
	public boolean visit(StringLiteral stringLiteral) {
		return true;
	}
	
	public boolean visit(StructureItem structureItem) {
		return true;
	}
	
	public boolean visit(SQLLiteral sQLLiteral) {
		return true;
	}
	
	public boolean visit(SubstringAccess substringAccess) {
		return true;
	}
	
	public boolean visit(TernaryExpression ternaryExpression) {
		return true;
	}
	
	public boolean visit(ThisExpression thisExpression) {
		return true;
	}
	
	public boolean visit(ThrowStatement throwStatement) {
		return true;
	}
	
	public boolean visit(TopLevelForm topLevelForm) {
		return true;
	}
	
	public boolean visit(TopLevelFunction topLevelFunction) {
		return true;
	}
	
	public boolean visit(TransferStatement transferStatement) {
		return true;
	}
	
	public boolean visit(TryStatement tryStatement) {
		return true;
	}
	
	public boolean visit(TypeLiteralExpression typeLiteralExpression) {
		return true;
	}
	
	public boolean visit(QualifiedName qualifiedName) {
		return true;
	}
	
	public boolean visit(UnaryExpression unaryExpression) {
		return true;
	}
	
	public boolean visit(UsingClause usingClause) {
		return true;
	}
	
	public boolean visit(UsingKeysClause usingKeysClause) {
		return true;
	}
	
	public boolean visit(UseStatement useStatement) {
		return true;
	}
	
	public boolean visit(UsingPCBClause usingPCBClause) {
		return true;
	}
	
	public boolean visit(VariableFormField variableFormField) {
		return true;
	}
	
	public boolean visit(WhenClause whenClause) {
		return true;
	}
	
	public boolean visit(WhileStatement whileStatement) {
		return true;
	}
	
	public boolean visit(WithIDClause withIDClause) {
		return true;
	}

	public boolean visit(WithExpressionClause withExpressionClause) {
		return true;
	}

	public boolean visit(WithInlineDLIClause withInlineDLIClause) {
		return true;
	}
	
	public boolean visit(WithInlineSQLClause withInlineSQLClause) {
		return true;
	}
	
	public void endVisit(AddStatement addStatement) {}
	
	public void endVisit(AnnotationExpression annotationExpression) {}
	
	public void endVisit(ArrayAccess arrayAccess) {}
	
	public void endVisit(ArrayLiteral arrayLiteral) {}
	
	public void endVisit(ArrayType arrayType) {}
	
	public void endVisit(AsExpression asExpression) {}
	
	public void endVisit(Assignment assignment) {}
	
	public void endVisit(AssignmentStatement assignmentStatement) {}
	
	public void endVisit(BinaryExpression binaryExpression) {}
	
	public void endVisit(BooleanLiteral booleanLiteral) {}
	
	public void endVisit(BytesLiteral bytesLiteral) {}
	
	public void endVisit(CallStatement callStatement) {}
	
	public void endVisit(CallbackTarget callbackTarget) {}

	public void endVisit(CallSynchronizationValues callSynch) {}
	
	public void endVisit(CallReturns callReturns) {}
	
	public void endVisit(CaseStatement caseStatement) {}
	
	public void endVisit(CharLiteral charLiteral) {}
	
	public void endVisit(ClassDataDeclaration classDataDeclaration) {}
	
	public void endVisit(CloseStatement closeStatement) {}
	
	public void endVisit(ConstantFormField constantFormField) {}
	
	public void endVisit(Constructor constructor) {}
	
	public void endVisit(ContinueStatement continueStatement) {}
	
	public void endVisit(ConverseStatement converseStatement) {}
	
	public void endVisit(DataItem dataItem) {}
	
	public void endVisit(DataTable dataTable) {}
	
	public void endVisit(DBCharLiteral dBCharLiteral) {}
	
	public void endVisit(DecimalLiteral decimalLiteral) {}
	
	public void endVisit(Delegate delegate) {}
	
	public void endVisit(DeleteStatement deleteStatement) {}
	
	public void endVisit(DisplayStatement displayStatement) {}
	
	public void endVisit(ElseBlock elseBlock) {}
	
	public void endVisit(EmptyStatement emptyStatement) {}
	
	public void endVisit(Enumeration enumeration) {}
	
	public void endVisit(EnumerationField enumerationField) {}
	
	public void endVisit(ExecuteStatement executeStatement) {}
	
	public void endVisit(ExitStatement exitStatement) {}
	
	public void endVisit(ExternalType externalType) {}
	
	public void endVisit(FieldAccess fieldAccess) {}
	
	public void endVisit(File file) {}
	
	public void endVisit(FloatLiteral floatLiteral) {}
	
	public void endVisit(ForEachStatement forEachStatement) {}
	
	public void endVisit(ForExpressionClause forExpressionClause) {}
	
	public void endVisit(FormGroup formGroup) {}
	
	public void endVisit(ForStatement forStatement) {}
	
	public void endVisit(ForUpdateClause forUpdateClause) {}
	
	public void endVisit(ForwardStatement forwardStatement) {}
	
	public void endVisit(FreeSQLStatement freeSQLStatement) {}
	
	public void endVisit(FromExpressionClause fromExpressionClause) {}
	
	public void endVisit( FromOrToExpressionClause clause) {}
	
	public void endVisit(FunctionDataDeclaration functionDataDeclaration) {}
	
	public void endVisit(FunctionInvocation functionInvocation) {}
	
	public void endVisit(FunctionInvocationStatement functionInvocationStatement) {}
	
	public void endVisit(FunctionParameter functionParameter) {}
	
	public void endVisit(GetByKeyStatement getByKeyStatement) {}
	
	public void endVisit(GetByPositionStatement getByPositionStatement) {}
	
	public void endVisit(GotoStatement gotoStatement) {}
	
	public void endVisit(Handler handler) {}
	
	public void endVisit(HexLiteral hexLiteral) {}
	
	public void endVisit(ImportDeclaration importDeclaration) {}
	
	public void endVisit(IfStatement ifStatement) {}
	
	public void endVisit(InExpression inExpression) {}
	
	public void endVisit(InlineDLIStatement inlineDLIStatement) {}
	
	public void endVisit(InlineSQLStatement inlineSQLStatement) {}
	
	public void endVisit(IntegerLiteral integerLiteral) {}
	
	public void endVisit(Interface interfaceNode) {}
	
	public void endVisit(IntoClause intoClause) {}
	
	public void endVisit(IsAExpression isAExpression) {}
	
	public void endVisit(IsNotExpression isNotExpression) {}
	
	public void endVisit(LabelStatement labelStatement) {}
	
	public void endVisit(Library library) {}
	
	public void endVisit(LikeMatchesExpression likeMatchesExpression) {}
	
	public void endVisit(MBCharLiteral mBCharLiteral) {}
	
	public void endVisit(MoveStatement moveStatement) {}
	
	public void endVisit(NameType nameType) {}
	
	public void endVisit(NestedForm nestedForm) {}
	
	public void endVisit(NestedFunction nestedFunction) {}
	
	public void endVisit(NewExpression newExpression) {}
	
	public void endVisit(NullLiteral nullLiteral) {}
	
	public void endVisit(NullableType nullableType) {}
	
	public void endVisit(NoCursorClause noCursorClause) {}
	
	public void endVisit(ObjectExpression objExpr) {}

	public void endVisit(ObjectExpressionEntry objExprEntry) {}

	public void endVisit(OnEventBlock onEventBlock) {}
	
	public void endVisit(OnExceptionBlock onExceptionBlock) {}
	
	public void endVisit(OpenStatement openStatement) {}
	
	public void endVisit(OpenUIStatement openUIStatement) {}
	
	public void endVisit(OtherwiseClause otherwiseClause) {}
	
	public void endVisit(PackageDeclaration packageDeclaration) {}
	
	public void endVisit(ParenthesizedExpression parenthesizedExpression) {}
	
	public void endVisit(PassingClause passingClause) {}
	
	public void endVisit(PrepareStatement prepareStatement) {}
	
	public void endVisit(PrimitiveType primitiveType) {}
	
	public void endVisit(PrintStatement printStatement) {}
	
	public void endVisit(Program program) {}
	
	public void endVisit(ProgramParameter programParameter) {}
	
	public void endVisit(Record record) {}
	
	public void endVisit(ReplaceStatement replaceStatement) {}
	
	public void endVisit(ReturnsDeclaration returnsDeclaration) {}
	
	public void endVisit(ReturningToInvocationTargetClause returningToInvocationTargetClause) {}
	
	public void endVisit(ReturningToNameClause returningToNameClause) {}
	
	public void endVisit(ReturnStatement returnStatement) {}
	
	public void endVisit(Service service) {}
	
	public void endVisit(ServiceReference serviceReference) {}
	
	public void endVisit(SetStatement setStatement) {}
	
	public void endVisit(SetValuesExpression setValuesExpression) {}
	
	public void endVisit(SetValuesStatement setValuesStatement) {}
	
	public void endVisit(SettingsBlock settingsBlock) {}
	
	public void endVisit(ShowStatement showStatement) {}
	
	public void endVisit(SimpleName simpleName) {}
	
	public void endVisit(SingleRowClause singleRowClause) {}
	
	public void endVisit(StringLiteral stringLiteral) {}
	
	public void endVisit(StructureItem structureItem) {}
	
	public void endVisit(SQLLiteral sQLLiteral) {}
	
	public void endVisit(SubstringAccess substringAccess) {}
	
	public void endVisit(TernaryExpression ternaryExpression) {}
	
	public void endVisit(ThisExpression thisExpression) {}
	
	public void endVisit(ThrowStatement throwStatement) {}
	
	public void endVisit(TopLevelForm topLevelForm) {}
	
	public void endVisit(TopLevelFunction topLevelFunction) {}
	
	public void endVisit(TransferStatement transferStatement) {}
	
	public void endVisit(TryStatement tryStatement) {}
	
	public void endVisit(TypeLiteralExpression typeLiteralExpression) {}
	
	public void endVisit(QualifiedName qualifiedName) {}
	
	public void endVisit(UnaryExpression unaryExpression) {}
	
	public void endVisit(UsingClause usingClause) {}
	
	public void endVisit(UsingKeysClause usingKeysClause) {}
	
	public void endVisit(UseStatement useStatement) {}
	
	public void endVisit(UsingPCBClause usingPCBClause) {}
	
	public void endVisit(VariableFormField variableFormField) {}
	
	public void endVisit(WhenClause whenClause) {}
	
	public void endVisit(WhileStatement whileStatement) {}
	
	public void endVisit(WithIDClause withIDClause) {}

	public void endVisit(WithExpressionClause withExprClause) {}
	
	public void endVisit(WithInlineDLIClause withInlineDLIClause) {}
	
	public void endVisit(WithInlineSQLClause withInlineSQLClause) {}
}
