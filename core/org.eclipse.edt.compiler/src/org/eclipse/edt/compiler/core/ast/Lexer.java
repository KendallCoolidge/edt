/*******************************************************************************
 * Copyright Â© 2012 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
/* The following code was generated by JFlex 1.4.3 on 4/16/12 11:29 AM */

package org.eclipse.edt.compiler.core.ast;

import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/16/12 11:29 AM from the specification file
 * <tt>egl.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int DLI = 14;
  public static final int DLI_QUOTED_ID = 16;
  public static final int SQLDELIMITEDID = 10;
  public static final int STRING = 2;
  public static final int DLI_DBL_QUOTED_ID = 18;
  public static final int SQL = 8;
  public static final int YYINITIAL = 0;
  public static final int HEXSTRING = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int SQLSTRING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\1\1\0\1\3\1\2\16\5\4\0\1\3\1\53"+
    "\1\14\1\23\1\4\1\65\1\60\1\101\1\51\1\52\1\22\1\11"+
    "\1\54\1\13\1\7\1\12\1\50\5\6\1\47\3\6\1\56\1\55"+
    "\1\62\1\57\1\63\1\64\1\71\1\34\1\35\1\16\1\17\1\10"+
    "\1\43\1\42\1\44\1\32\1\4\1\46\1\26\1\20\1\31\1\30"+
    "\1\37\1\25\1\40\1\24\1\33\1\21\1\41\1\45\1\15\1\36"+
    "\1\4\1\66\1\73\1\67\1\0\1\4\1\0\1\34\1\74\1\16"+
    "\1\17\1\10\1\75\1\42\1\44\1\32\1\4\1\46\1\26\1\20"+
    "\1\76\1\30\1\37\1\25\1\77\1\24\1\100\1\21\1\41\1\45"+
    "\1\15\1\36\1\4\1\27\1\61\1\70\1\72\41\5\2\0\4\4"+
    "\4\0\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4"+
    "\1\0\37\4\1\0\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4"+
    "\11\0\1\4\21\0\130\5\5\0\23\5\12\0\1\4\13\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4\1\0\46\4"+
    "\1\0\5\4\4\0\202\4\1\0\4\5\3\0\105\4\1\0\46\4"+
    "\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4"+
    "\11\0\21\5\1\0\27\5\1\0\3\5\1\0\1\5\1\0\2\5"+
    "\1\0\1\5\13\0\33\4\5\0\3\4\15\0\4\5\14\0\6\5"+
    "\13\0\32\4\5\0\13\4\16\5\7\0\12\5\4\0\2\4\1\5"+
    "\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5\1\0\4\5"+
    "\2\4\12\5\3\4\2\0\1\4\17\0\1\5\1\4\1\5\36\4"+
    "\33\5\2\0\3\4\60\0\46\4\13\5\1\4\u014f\0\3\5\66\4"+
    "\2\0\1\5\1\4\20\5\2\0\1\4\4\5\3\0\12\4\2\5"+
    "\2\0\12\5\21\0\3\5\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4\7\5"+
    "\2\0\2\5\2\0\3\5\11\0\1\5\4\0\2\4\1\0\3\4"+
    "\2\5\2\0\12\5\4\4\15\0\3\5\1\0\6\4\4\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4"+
    "\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\13\0\4\4"+
    "\1\0\1\4\7\0\14\5\3\4\14\0\3\5\1\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0"+
    "\2\4\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\2\0\1\5\1\4\6\5\3\0\2\5\2\0\3\5\10\0\2\5"+
    "\4\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4\20\0\1\5"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0"+
    "\3\4\4\0\5\5\3\0\3\5\1\0\4\5\11\0\1\5\17\0"+
    "\11\5\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\4\0\7\5\1\0\3\5\1\0"+
    "\4\5\7\0\2\5\11\0\2\4\4\0\12\5\22\0\2\5\1\0"+
    "\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0"+
    "\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0"+
    "\1\4\1\0\2\4\4\0\12\5\22\0\2\5\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\20\4\4\0\6\5\2\0\3\5\1\0"+
    "\4\5\11\0\1\5\10\0\2\4\4\0\12\5\22\0\2\5\1\0"+
    "\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0"+
    "\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0"+
    "\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0"+
    "\5\4\1\0\1\4\1\0\6\5\2\0\12\5\2\0\2\4\42\0"+
    "\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0"+
    "\1\5\4\0\2\5\10\4\1\0\42\4\6\0\24\5\1\0\2\5"+
    "\4\4\4\0\10\5\1\0\44\5\11\0\1\5\71\0\42\4\1\0"+
    "\5\4\1\0\2\4\1\0\7\5\3\0\4\5\6\0\12\5\6\0"+
    "\6\4\4\5\106\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4"+
    "\5\0\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4"+
    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4"+
    "\1\0\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4"+
    "\1\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4"+
    "\1\0\23\4\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4"+
    "\12\0\32\4\5\0\113\4\3\0\3\4\17\0\15\4\1\0\4\4"+
    "\3\5\13\0\22\4\3\5\13\0\22\4\2\5\14\0\15\4\1\0"+
    "\3\4\1\0\2\5\14\0\64\4\40\5\3\0\1\4\3\0\2\4"+
    "\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0\130\4\10\0"+
    "\51\4\1\5\126\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5"+
    "\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0\132\4\6\0"+
    "\26\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0"+
    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\17\0\4\5\32\0"+
    "\5\5\20\0\2\4\23\0\1\4\13\0\4\5\6\0\6\5\1\0"+
    "\1\4\15\0\1\4\40\0\22\4\36\0\15\5\4\0\1\5\3\0"+
    "\6\5\27\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0"+
    "\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0"+
    "\3\4\1\0\7\4\3\0\3\4\5\0\5\4\26\0\44\4\u0e81\0"+
    "\3\4\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4"+
    "\2\0\2\5\2\0\3\4\1\0\137\4\5\0\50\4\4\0\136\4"+
    "\21\0\30\4\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4"+
    "\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4"+
    "\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4"+
    "\2\0\66\4\50\0\15\4\3\0\20\5\20\0\4\5\17\0\2\4"+
    "\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\5"+
    "\4\0\1\4\13\0\12\5\7\0\32\4\4\0\1\4\1\0\32\4"+
    "\12\0\132\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4"+
    "\3\0\2\4\3\0\2\4\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\0\1\1\2\0\1\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\5\1\10\1\11\1\12\1\13"+
    "\5\5\1\14\1\2\2\5\1\15\15\5\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\41\1\42\1\43\2\44\1\40\2\4\4\1"+
    "\1\45\1\46\1\47\1\1\2\50\1\51\1\1\1\52"+
    "\1\53\1\54\1\55\2\56\1\57\1\60\1\0\1\61"+
    "\1\0\5\5\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\5\1\70\6\5\1\71\4\5\1\72\6\5\1\73"+
    "\1\74\2\0\15\5\1\75\1\76\2\5\1\77\1\5"+
    "\1\100\1\101\1\102\1\103\5\5\1\104\5\5\1\105"+
    "\23\5\1\106\1\107\1\110\1\111\1\112\1\113\1\75"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\1"+
    "\1\133\1\134\1\135\1\0\6\5\1\136\1\5\2\63"+
    "\1\137\1\140\7\5\1\141\3\5\1\142\1\5\1\143"+
    "\1\144\2\5\1\145\1\146\2\0\1\147\14\5\1\150"+
    "\4\5\1\151\3\5\1\152\1\5\1\153\2\5\1\154"+
    "\5\5\1\155\2\5\1\156\1\157\1\112\1\160\7\5"+
    "\1\161\11\5\1\162\1\5\1\163\4\5\1\164\13\5"+
    "\1\165\1\166\1\167\1\170\1\171\1\1\1\5\1\172"+
    "\3\5\1\173\1\5\1\174\5\5\1\175\1\176\5\5"+
    "\1\177\1\5\1\200\2\5\2\0\10\5\1\201\1\5"+
    "\1\202\5\5\1\203\1\204\1\5\1\205\6\5\1\206"+
    "\1\5\1\207\1\210\1\5\1\211\3\5\1\212\20\5"+
    "\1\213\4\5\1\214\6\5\1\215\1\216\1\5\1\217"+
    "\1\220\1\221\2\5\1\222\3\5\1\223\3\5\1\224"+
    "\1\225\12\5\1\226\1\5\1\227\2\0\1\230\5\5"+
    "\1\231\4\5\1\232\11\5\1\233\4\5\1\234\4\5"+
    "\1\235\6\5\1\236\6\5\1\237\1\5\1\240\4\5"+
    "\1\241\1\242\1\77\3\5\1\243\1\244\3\5\1\245"+
    "\7\5\1\246\7\5\1\247\1\0\1\5\1\250\4\5"+
    "\1\251\1\252\5\5\1\253\1\254\2\5\1\255\1\256"+
    "\7\5\1\257\1\260\7\5\1\261\1\5\1\262\12\5"+
    "\1\263\1\264\2\5\1\265\3\5\1\266\2\5\1\267"+
    "\1\270\4\5\1\0\1\271\4\5\1\272\2\5\1\273"+
    "\11\5\1\274\1\5\1\275\1\276\1\277\1\5\1\300"+
    "\1\301\1\5\1\302\1\5\1\303\1\304\1\5\1\305"+
    "\2\5\1\306\1\307\1\310\4\5\1\311\1\312\1\5"+
    "\1\313\1\314\1\5\1\315\1\5\1\0\1\316\6\5"+
    "\1\317\2\5\1\320\2\5\1\321\1\322\1\5\1\323"+
    "\1\324\1\5\1\325\6\5\1\326\1\327\1\330\1\0"+
    "\2\5\1\331\2\5\1\332\1\5\1\333\1\334\2\5"+
    "\1\335\1\336\1\337\4\5\1\0\1\340\3\5\1\341"+
    "\1\5\1\342\2\5\1\343\1\344\1\0\1\345\1\5"+
    "\1\346\1\347\1\5\1\350\1\0\2\5\1\0\1\5"+
    "\1\351\1\352\1\353";

  private static int [] zzUnpackAction() {
    int [] result = new int[723];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0294\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u0294\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0294\0\u0294\0\u0ad4\0\u0294"+
    "\0\u0294\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0d26\0\u0294"+
    "\0\u0d68\0\u0294\0\u0daa\0\u0294\0\u0d68\0\u0dec\0\u0294\0\u0e2e"+
    "\0\u0294\0\u0e70\0\u0eb2\0\u0ef4\0\u0294\0\u0294\0\u0294\0\u0f36"+
    "\0\u0294\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u1080\0\u103e\0\u0fba\0\u02d6\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u0294\0\u1290\0\u0294\0\u0294"+
    "\0\u0294\0\u0294\0\u12d2\0\u0294\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u0294\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u0294"+
    "\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u0294"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u035a"+
    "\0\u035a\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u035a"+
    "\0\u035a\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u035a\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u0294\0\u249c\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294"+
    "\0\u24de\0\u0294\0\u2520\0\u2562\0\u0294\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u25a4\0\u0294"+
    "\0\u0294\0\u25e6\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730"+
    "\0\u2772\0\u035a\0\u27b4\0\u0294\0\u27f6\0\u2838\0\u0294\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u0294\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u0294\0\u2b0e\0\u0294\0\u035a\0\u2b50\0\u2b92"+
    "\0\u035a\0\u0294\0\u2bd4\0\u2c16\0\u035a\0\u2c58\0\u2c9a\0\u2cdc"+
    "\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u035a\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u035a\0\u3078"+
    "\0\u30ba\0\u30fc\0\u035a\0\u313e\0\u035a\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u035a\0\u3390\0\u33d2"+
    "\0\u035a\0\u035a\0\u035a\0\u035a\0\u3414\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u035a\0\u35e2\0\u3624\0\u3666\0\u36a8"+
    "\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u035a\0\u3834\0\u035a"+
    "\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44"+
    "\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54"+
    "\0\u0294\0\u0294\0\u0294\0\u3c96\0\u0294\0\u3cd8\0\u3d1a\0\u035a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u035a\0\u3e22\0\u0294\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\u3f2a\0\u3f6c\0\u035a\0\u035a\0\u3fae\0\u3ff0\0\u4032"+
    "\0\u4074\0\u40b6\0\u035a\0\u40f8\0\u035a\0\u413a\0\u417c\0\u41be"+
    "\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce"+
    "\0\u4410\0\u035a\0\u4452\0\u035a\0\u4494\0\u44d6\0\u4518\0\u455a"+
    "\0\u459c\0\u45de\0\u035a\0\u4620\0\u035a\0\u4662\0\u46a4\0\u46e6"+
    "\0\u4728\0\u476a\0\u47ac\0\u035a\0\u47ee\0\u4830\0\u035a\0\u4872"+
    "\0\u035a\0\u48b4\0\u48f6\0\u4938\0\u035a\0\u497a\0\u49bc\0\u49fe"+
    "\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u4bcc\0\u4c0e"+
    "\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u035a\0\u4d9a\0\u4ddc"+
    "\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68\0\u4faa\0\u4fec"+
    "\0\u502e\0\u035a\0\u035a\0\u5070\0\u50b2\0\u035a\0\u035a\0\u50f4"+
    "\0\u5136\0\u0294\0\u5178\0\u51ba\0\u51fc\0\u035a\0\u523e\0\u5280"+
    "\0\u52c2\0\u035a\0\u5304\0\u5346\0\u5388\0\u53ca\0\u540c\0\u544e"+
    "\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da\0\u561c\0\u0294"+
    "\0\u565e\0\u56a0\0\u0294\0\u56e2\0\u5724\0\u5766\0\u57a8\0\u57ea"+
    "\0\u035a\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u035a\0\u5934\0\u5976"+
    "\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u035a"+
    "\0\u5b86\0\u5bc8\0\u5c0a\0\u5c4c\0\u035a\0\u5c8e\0\u5cd0\0\u5d12"+
    "\0\u5d54\0\u035a\0\u5d96\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0"+
    "\0\u035a\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8\0\u602a\0\u606c\0\u035a"+
    "\0\u60ae\0\u035a\0\u60f0\0\u6132\0\u6174\0\u61b6\0\u035a\0\u035a"+
    "\0\u035a\0\u61f8\0\u623a\0\u627c\0\u035a\0\u035a\0\u62be\0\u6300"+
    "\0\u6342\0\u035a\0\u6384\0\u63c6\0\u6408\0\u644a\0\u648c\0\u64ce"+
    "\0\u6510\0\u035a\0\u6552\0\u6594\0\u65d6\0\u6618\0\u665a\0\u669c"+
    "\0\u66de\0\u035a\0\u6720\0\u6762\0\u035a\0\u67a4\0\u67e6\0\u6828"+
    "\0\u686a\0\u035a\0\u035a\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4"+
    "\0\u035a\0\u035a\0\u69f6\0\u6a38\0\u035a\0\u035a\0\u6a7a\0\u6abc"+
    "\0\u6afe\0\u6b40\0\u6b82\0\u6bc4\0\u6c06\0\u035a\0\u035a\0\u6c48"+
    "\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92\0\u6dd4\0\u035a\0\u6e16"+
    "\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60\0\u6fa2\0\u6fe4\0\u7026"+
    "\0\u7068\0\u70aa\0\u70ec\0\u035a\0\u035a\0\u712e\0\u7170\0\u035a"+
    "\0\u71b2\0\u71f4\0\u7236\0\u035a\0\u7278\0\u72ba\0\u035a\0\u035a"+
    "\0\u72fc\0\u733e\0\u7380\0\u73c2\0\u7404\0\u035a\0\u7446\0\u7488"+
    "\0\u74ca\0\u750c\0\u035a\0\u754e\0\u7590\0\u035a\0\u75d2\0\u7614"+
    "\0\u7656\0\u7698\0\u76da\0\u771c\0\u775e\0\u77a0\0\u77e2\0\u035a"+
    "\0\u7824\0\u035a\0\u035a\0\u035a\0\u7866\0\u035a\0\u035a\0\u78a8"+
    "\0\u035a\0\u78ea\0\u035a\0\u035a\0\u792c\0\u035a\0\u796e\0\u79b0"+
    "\0\u035a\0\u035a\0\u035a\0\u79f2\0\u7a34\0\u7a76\0\u7ab8\0\u035a"+
    "\0\u035a\0\u7afa\0\u035a\0\u035a\0\u7b3c\0\u035a\0\u7b7e\0\u7bc0"+
    "\0\u035a\0\u7c02\0\u7c44\0\u7c86\0\u7cc8\0\u7d0a\0\u7d4c\0\u035a"+
    "\0\u7d8e\0\u7dd0\0\u035a\0\u7e12\0\u7e54\0\u035a\0\u035a\0\u7e96"+
    "\0\u035a\0\u035a\0\u7ed8\0\u035a\0\u7f1a\0\u7f5c\0\u7f9e\0\u7fe0"+
    "\0\u8022\0\u8064\0\u035a\0\u035a\0\u035a\0\u80a6\0\u80e8\0\u812a"+
    "\0\u035a\0\u816c\0\u81ae\0\u035a\0\u81f0\0\u035a\0\u035a\0\u8232"+
    "\0\u8274\0\u035a\0\u035a\0\u035a\0\u82b6\0\u82f8\0\u833a\0\u837c"+
    "\0\u83be\0\u035a\0\u8400\0\u8442\0\u8484\0\u035a\0\u84c6\0\u035a"+
    "\0\u8508\0\u854a\0\u035a\0\u035a\0\u858c\0\u035a\0\u85ce\0\u035a"+
    "\0\u035a\0\u8610\0\u035a\0\u8652\0\u8694\0\u86d6\0\u8718\0\u875a"+
    "\0\u035a\0\u0294\0\u035a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[723];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\15\1\16\1\13\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\16\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\16\1\51\1\52\1\53\1\54\1\16\2\17\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\13\1\45\1\52\1\41\1\50\1\43\1\13"+
    "\1\77\1\100\1\101\11\77\1\102\56\77\1\103\6\77"+
    "\2\104\1\105\3\104\1\106\1\104\1\106\3\104\1\102"+
    "\1\104\2\106\14\104\2\106\5\104\1\106\3\104\2\106"+
    "\23\104\2\106\4\104\22\107\1\110\57\107\1\111\3\112"+
    "\1\113\3\111\1\113\2\111\1\114\1\115\5\113\2\111"+
    "\3\113\1\111\17\113\21\111\1\116\3\111\5\113\1\117"+
    "\1\120\1\121\1\122\11\120\1\123\65\120\1\124\1\121"+
    "\1\122\76\124\1\125\1\111\3\112\1\113\3\111\1\113"+
    "\3\111\1\126\5\113\2\111\3\113\1\111\17\113\21\111"+
    "\1\127\3\111\5\113\1\130\1\124\1\131\1\132\76\124"+
    "\1\133\1\120\1\131\1\132\11\120\1\134\65\120\103\0"+
    "\2\14\1\135\101\0\1\15\102\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\7\0\1\17\1\136\1\137\36\0\2\17\37\0\1\136"+
    "\40\0\2\136\35\0\3\16\1\0\1\16\4\0\1\140"+
    "\2\16\1\141\1\16\2\0\1\142\1\16\1\143\1\0"+
    "\1\16\1\144\17\16\23\0\2\16\1\144\2\16\60\0"+
    "\1\145\34\0\1\146\7\0\1\147\34\0\1\150\101\0"+
    "\1\151\26\0\3\16\1\0\1\16\3\0\1\152\5\16"+
    "\2\0\3\16\1\0\1\153\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\3\0\1\154\1\155\3\16\1\156"+
    "\2\0\2\16\1\157\1\0\1\160\3\16\1\161\14\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\162\3\0\1\163"+
    "\1\164\4\16\2\0\2\16\1\165\1\0\2\16\1\166"+
    "\1\16\1\167\14\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\3\0\1\170\1\171\4\16\2\0\3\16\1\0"+
    "\1\172\20\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\1\173\4\16\2\0\1\174\2\16\1\0\7\16"+
    "\1\175\1\176\10\16\23\0\3\16\1\176\1\16\23\0"+
    "\1\177\34\0\1\200\41\0\1\201\4\0\1\202\61\0"+
    "\3\16\1\0\1\203\4\0\1\16\1\204\1\16\1\205"+
    "\1\16\2\0\1\16\1\206\1\16\1\0\2\16\1\207"+
    "\1\210\10\16\1\211\4\16\23\0\4\16\1\210\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\2\16\1\212\1\16\1\213\14\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\4\16\1\214\2\0\3\16"+
    "\1\0\1\16\1\215\1\16\1\216\3\16\1\217\1\220"+
    "\2\16\1\221\5\16\23\0\1\16\1\221\1\215\1\220"+
    "\1\216\5\0\3\16\1\0\1\222\4\0\4\16\1\223"+
    "\2\0\3\16\1\0\1\224\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\3\16\1\225\1\16\2\0"+
    "\1\226\2\16\1\0\1\16\1\227\11\16\1\230\5\16"+
    "\23\0\1\16\1\230\1\227\2\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\1\231\1\16"+
    "\1\232\3\16\1\233\1\16\1\234\3\16\1\235\4\16"+
    "\23\0\3\16\1\234\1\16\5\0\3\16\1\0\1\16"+
    "\4\0\2\16\1\236\2\16\2\0\1\237\1\16\1\240"+
    "\1\0\1\16\1\241\3\16\1\242\13\16\23\0\1\242"+
    "\1\16\1\241\2\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\243\1\16\1\244\3\16"+
    "\1\245\12\16\23\0\5\16\5\0\3\16\1\0\1\246"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\4\16\1\247\3\16\1\250\10\16\23\0\3\16"+
    "\1\250\1\16\5\0\3\16\1\0\1\251\4\0\4\16"+
    "\1\252\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\253\4\0\5\16\2\0\3\16\1\0"+
    "\1\254\7\16\1\255\10\16\23\0\3\16\1\255\1\16"+
    "\5\0\3\16\1\0\1\16\4\0\4\16\1\256\2\0"+
    "\2\16\1\257\1\0\1\260\1\16\1\261\1\16\1\262"+
    "\3\16\1\263\10\16\23\0\3\16\1\263\1\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\1\264\3\16\1\265\14\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\2\16"+
    "\1\266\5\16\1\267\3\16\1\270\4\16\23\0\3\16"+
    "\1\267\1\16\60\0\1\271\100\0\1\272\102\0\1\273"+
    "\101\0\1\274\1\275\100\0\1\276\1\0\1\277\77\0"+
    "\1\300\2\0\1\301\76\0\1\302\3\0\1\303\74\0"+
    "\1\304\7\0\1\305\72\0\1\306\22\0\1\77\2\0"+
    "\11\77\1\0\56\77\1\0\6\77\1\0\1\100\114\0"+
    "\1\307\56\0\1\310\1\311\1\312\1\313\1\314\1\315"+
    "\7\0\1\106\1\0\1\106\5\0\2\106\14\0\2\106"+
    "\5\0\1\106\3\0\2\106\23\0\2\106\16\0\1\316"+
    "\70\0\3\112\102\0\3\113\1\0\1\113\4\0\5\113"+
    "\2\0\3\113\1\0\21\113\23\0\5\113\14\0\1\317"+
    "\66\0\1\120\2\0\11\120\1\0\65\120\1\0\1\121"+
    "\114\0\1\320\65\0\1\124\2\0\76\124\102\0\1\321"+
    "\1\0\1\131\106\0\1\136\1\0\1\137\36\0\2\136"+
    "\37\0\1\322\2\0\1\323\1\0\1\323\33\0\2\322"+
    "\35\0\3\16\1\0\1\324\4\0\5\16\2\0\3\16"+
    "\1\0\2\16\1\325\1\326\15\16\23\0\4\16\1\326"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\5\16\1\327\13\16\23\0\1\327\4\16\5\0"+
    "\3\16\1\0\1\16\4\0\1\16\1\330\3\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\1\331\2\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\2\16"+
    "\1\332\1\16\1\333\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\1\0\1\146\1\334\1\335\77\146\4\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\10\16"+
    "\1\336\10\16\23\0\3\16\1\336\1\16\5\0\3\16"+
    "\1\0\1\16\3\0\1\337\5\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\10\16\1\340\10\16\23\0"+
    "\3\16\1\340\1\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\341\20\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\1\16\1\342\17\16\23\0\2\16\1\342\2\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\1\343"+
    "\1\16\1\344\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\1\16\1\345\3\16\2\0\2\16"+
    "\1\346\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\3\0\1\347\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\2\16\1\350\16\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\1\351"+
    "\2\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\3\16\1\352"+
    "\15\16\23\0\4\16\1\352\5\0\3\16\1\0\1\16"+
    "\3\0\1\353\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\11\16\1\354\7\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\3\0\1\355\5\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\356"+
    "\4\0\5\16\2\0\3\16\1\0\2\16\1\357\16\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\2\16"+
    "\1\360\2\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\2\16"+
    "\1\361\1\0\21\16\23\0\5\16\60\0\1\362\50\0"+
    "\1\363\100\0\1\364\60\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\3\16\1\365\4\16\1\366"+
    "\10\16\23\0\3\16\1\366\1\365\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\10\16\1\367"+
    "\10\16\23\0\3\16\1\367\1\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\4\16\1\370"+
    "\14\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\2\16\1\371\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\1\16\1\372\17\16\23\0\2\16\1\372\2\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\4\16\1\373\3\16\1\374\10\16\23\0\3\16"+
    "\1\374\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\375\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\5\16\1\376\13\16\23\0\1\376\4\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\1\377\2\16\1\0"+
    "\1\16\1\u0100\3\16\1\u0101\13\16\23\0\1\u0101\1\16"+
    "\1\u0100\2\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u0102\15\16\23\0\4\16"+
    "\1\u0102\5\0\3\16\1\0\1\u0103\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\14\16\1\u0104"+
    "\4\16\23\0\5\16\5\0\3\16\1\0\1\u0105\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\1\u0106\4\16\2\0\3\16"+
    "\1\0\15\16\1\u0107\3\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\3\16\1\u0108\1\16\2\0\2\16"+
    "\1\u0109\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\1\16\1\u010a\3\16\2\0\3\16\1\0"+
    "\3\16\1\u010b\15\16\23\0\4\16\1\u010b\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\7\16"+
    "\1\u010c\11\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\4\16\1\u010d\14\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\1\u010e\2\16\1\0\1\u010f\2\16\1\u0110\3\16"+
    "\1\u0111\11\16\23\0\4\16\1\u0110\5\0\3\16\1\0"+
    "\1\16\4\0\3\16\1\u0112\1\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\7\16\1\u0113\11\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\4\16\1\u0114"+
    "\2\0\3\16\1\0\4\16\1\u0115\1\16\1\u0116\12\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\2\16\1\u0117\5\16\1\u0118\10\16"+
    "\23\0\3\16\1\u0118\1\16\5\0\3\16\1\0\1\16"+
    "\4\0\2\16\1\u0119\2\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\2\16\1\u011a\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\2\16\1\u011b\2\16\2\0"+
    "\3\16\1\0\6\16\1\u011c\12\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\1\u011d\2\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\1\u011e\20\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u011f\10\16\1\u0120\6\16\23\0"+
    "\2\16\1\u011f\2\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\16\1\u0121\1\16\1\u0122"+
    "\3\16\1\u0123\11\16\23\0\2\16\1\u0121\1\16\1\u0122"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\1\u0124"+
    "\2\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\1\16\1\u0125\3\16\2\0\1\u0126\2\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\u0127"+
    "\4\0\5\16\2\0\3\16\1\0\1\u0128\1\16\1\u0129"+
    "\16\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\1\16\1\u012a\3\16\2\0\2\16\1\u012b\1\0\3\16"+
    "\1\u012c\3\16\1\u012d\3\16\1\u012e\5\16\23\0\1\16"+
    "\1\u012e\2\16\1\u012c\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\16\1\u012f\17\16\23\0"+
    "\2\16\1\u012f\2\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\3\16\1\u0130\15\16\23\0"+
    "\4\16\1\u0130\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u0131\15\16\23\0\4\16"+
    "\1\u0131\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\u0132\20\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\16"+
    "\1\u0133\17\16\23\0\2\16\1\u0133\2\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\u0134"+
    "\20\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\10\16\1\u0135\10\16\23\0"+
    "\3\16\1\u0135\1\16\5\0\3\16\1\0\1\u0136\4\0"+
    "\5\16\2\0\3\16\1\0\10\16\1\u0137\10\16\23\0"+
    "\3\16\1\u0137\1\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\2\16\1\u0138\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\u0139\4\0\5\16\2\0\3\16"+
    "\1\0\1\u013a\20\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\2\16\1\u013b\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\16\1\u013c\17\16\23\0\2\16"+
    "\1\u013c\2\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u013d\15\16\23\0\4\16"+
    "\1\u013d\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\4\16\1\u013e\14\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\u013f\4\0\5\16\2\0\3\16\1\0"+
    "\2\16\1\u0140\16\16\23\0\5\16\60\0\1\u0141\101\0"+
    "\1\u0142\101\0\1\u0143\3\0\1\u0144\75\0\1\u0145\22\0"+
    "\1\317\1\111\1\u0146\77\317\6\0\1\322\40\0\2\322"+
    "\35\0\3\16\1\0\1\16\4\0\1\16\1\u0147\3\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\3\16"+
    "\1\u0148\15\16\23\0\4\16\1\u0148\5\0\3\16\1\0"+
    "\1\u0149\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u014a\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\4\16\1\u014b"+
    "\14\16\23\0\5\16\5\0\3\16\1\0\1\u014c\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\3\16\1\u014d\1\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\2\0\1\334\104\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\21\16\6\0\1\u014e\14\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\10\16\1\u014f"+
    "\10\16\23\0\3\16\1\u014f\1\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\1\u0150\2\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\1\u0151\2\16\1\0\3\16\1\u0152\5\16\1\u0153"+
    "\7\16\23\0\4\16\1\u0152\5\0\3\16\1\0\1\u0154"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\2\16"+
    "\1\u0155\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\2\16\1\u0156"+
    "\5\16\1\u0157\10\16\23\0\3\16\1\u0157\1\16\5\0"+
    "\3\16\1\0\1\u0158\4\0\5\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\1\16\1\u0159\3\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\7\16\1\u015a\11\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\u015b\4\0\5\16\2\0\3\16\1\0"+
    "\4\16\1\u015c\14\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\u015d\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u015e\17\16\23\0\2\16\1\u015e"+
    "\2\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\4\16\1\u015f\14\16\23\0\5\16\33\0"+
    "\1\u0160\75\0\1\u0161\57\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\11\16\1\u0162\7\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\u0163\20\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\2\16\1\u0164\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\16\1\u0165\17\16\23\0"+
    "\2\16\1\u0165\2\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\12\16\1\u0166\6\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\1\16\1\u0167"+
    "\3\16\2\0\3\16\1\0\3\16\1\u0168\15\16\23\0"+
    "\4\16\1\u0168\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\2\16\1\u0169\16\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\15\16\1\u016a\3\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\10\16"+
    "\1\u016b\10\16\23\0\3\16\1\u016b\1\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\3\16"+
    "\1\u016c\15\16\23\0\4\16\1\u016c\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\12\16\1\u016d"+
    "\6\16\23\0\5\16\5\0\3\16\1\0\1\u016e\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\1\u016f\4\16\2\0\3\16"+
    "\1\0\11\16\1\u0170\7\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u0171\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\16\1\u0172\17\16\23\0\2\16"+
    "\1\u0172\2\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u0173\15\16\23\0\4\16"+
    "\1\u0173\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\5\16\1\u0174\13\16\23\0\1\u0174\4\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\2\16"+
    "\1\u0175\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\4\16\1\u0176\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\2\16\1\u0177\1\0\1\u0178\20\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\u0179\4\0\5\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\4\16\1\u017a\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u017b\4\0\5\16\2\0"+
    "\3\16\1\0\1\u017c\20\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\4\16"+
    "\1\u017d\14\16\23\0\5\16\5\0\3\16\1\0\1\u017e"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\u017f\4\0\5\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\u0124"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\1\16\1\u0180\17\16\23\0\2\16\1\u0180\2\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\1\u0181"+
    "\2\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\1\u0182\20\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\u0183\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\2\16\1\u0184"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\2\16\1\u0185\2\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\2\16\1\u0186\16\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\4\16\1\u0187\14\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u0188\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\u0189\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\16\16\1\u018a\2\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\1\u018b\2\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\7\16\1\u018c\1\16\1\u018d\7\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\12\16\1\u018e\6\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\1\16\1\u018f\7\16\1\u0190\7\16\23\0\2\16"+
    "\1\u018f\2\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\u0191\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\4\16\1\u0192\14\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\4\16\1\u0193\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\2\16\1\u0194\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\4\16\1\u0195\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\1\u0196\20\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\4\16\1\u0197"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\1\16\1\u0198\3\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\4\16\1\u0199\14\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\u019a\4\0\3\16"+
    "\1\u019b\1\u019c\2\0\3\16\1\0\15\16\1\u019d\3\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\2\16\1\u019e\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\1\u019f\2\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\1\u01a0\2\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u01a1\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\3\16\1\u01a2\1\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\2\16\1\u01a3\2\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\2\16\1\u01a4"+
    "\2\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\14\16\1\u01a5\4\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\7\16\1\u01a6"+
    "\11\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\16\1\u01a7\6\16\1\u01a8"+
    "\10\16\23\0\2\16\1\u01a7\1\u01a8\1\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\2\16\1\u01a9\1\0"+
    "\21\16\23\0\5\16\60\0\1\u01aa\23\0\1\111\104\0"+
    "\3\16\1\0\1\16\4\0\4\16\1\u01ab\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\1\16\1\u01ac\6\16"+
    "\1\u01ad\10\16\23\0\2\16\1\u01ac\1\u01ad\1\16\5\0"+
    "\3\16\1\0\1\16\4\0\2\16\1\u01ae\2\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\7\16\1\u01af"+
    "\11\16\23\0\5\16\5\0\3\16\1\0\1\u01b0\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\u01b1\4\0\5\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\u01b2\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\3\16\1\u01b3\15\16\23\0\4\16\1\u01b3\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\2\16"+
    "\1\u01b4\16\16\23\0\5\16\5\0\3\16\1\0\1\u01b5"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\3\16\1\u01b6\1\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u01b7\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u01b8\6\16\1\u01b9\6\16"+
    "\23\0\4\16\1\u01b8\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\4\16\1\u01ba\14\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\2\16\1\u01bb\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\2\16"+
    "\1\u01bc\1\u01bd\15\16\23\0\4\16\1\u01bd\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\12\16"+
    "\1\u01be\6\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\3\16\1\u01bf\15\16"+
    "\23\0\4\16\1\u01bf\2\0\3\u0160\23\0\1\u01c0\53\0"+
    "\3\u01c1\12\0\1\u01c2\10\0\1\u01c3\56\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\2\16\1\u01c4"+
    "\16\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\2\16\1\u01c5\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\2\16"+
    "\1\u01c6\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\4\16\1\u01c7\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\2\16\1\u01c8\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\16\16\1\u01c9\2\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\2\16\1\u01ca"+
    "\16\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\16\1\u01cb\17\16\23\0"+
    "\2\16\1\u01cb\2\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\4\16\1\u01cc\14\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\4\16\1\u01cd"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\2\16\1\u01ce\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\1\16\1\u01cf\3\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u01d0\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\10\16\1\u01d1"+
    "\10\16\23\0\3\16\1\u01d1\1\16\5\0\3\16\1\0"+
    "\1\16\4\0\4\16\1\u01d2\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\u01d3\4\0\5\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\10\16"+
    "\1\u01d4\10\16\23\0\3\16\1\u01d4\1\16\5\0\3\16"+
    "\1\0\1\u01d5\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u01d6\10\16\23\0\3\16"+
    "\1\u01d6\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u01d7\10\16\23\0\3\16"+
    "\1\u01d7\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u01d8\15\16\23\0\4\16"+
    "\1\u01d8\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\10\16\1\u01d9\10\16\23\0\3\16\1\u01d9"+
    "\1\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\10\16\1\u01da\10\16\23\0\3\16\1\u01da"+
    "\1\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\1\u01db\2\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\1\u01dc\2\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\15\16\1\u01dd\3\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\2\16\1\u01de\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u01df\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\16\1\u01e0\17\16\23\0\2\16"+
    "\1\u01e0\2\16\5\0\3\16\1\0\1\16\4\0\3\16"+
    "\1\u01e1\1\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\1\u01e2"+
    "\2\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\1\u01e3\2\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\4\16\1\u01e4\14\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\2\16\1\u01e5\16\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\4\16"+
    "\1\u01e6\14\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\2\16\1\u01e7\16\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u01e8\10\16\23\0\3\16"+
    "\1\u01e8\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u01e9\15\16\23\0\4\16"+
    "\1\u01e9\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\4\16\1\u01ea\14\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\10\16\1\u01eb\10\16\23\0\3\16\1\u01eb\1\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\3\16\1\u01ec\15\16\23\0\4\16\1\u01ec\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\10\16"+
    "\1\u01ed\10\16\23\0\3\16\1\u01ed\1\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\4\16"+
    "\1\u01ee\14\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\1\16\1\u01ef\17\16"+
    "\23\0\2\16\1\u01ef\2\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\7\16\1\u01f0\11\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u01f1\15\16\23\0\4\16"+
    "\1\u01f1\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\3\16\1\u01f2\15\16\23\0\4\16\1\u01f2"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\4\16\1\u01f3\14\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\12\16"+
    "\1\u01f4\6\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\7\16\1\u01f5\11\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\4\16\1\u01f6\14\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\2\16\1\u01f7\2\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\3\16"+
    "\1\u01f8\15\16\23\0\4\16\1\u01f8\5\0\3\16\1\0"+
    "\1\u01f9\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\1\u01fa\2\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\2\16\1\u01fb\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\11\16\1\u01fc\7\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u01fd\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\u01fe\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\3\16\1\u01ff\15\16\23\0\4\16\1\u01ff"+
    "\5\0\3\16\1\0\1\16\4\0\2\16\1\u0200\2\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\16"+
    "\1\u0201\17\16\23\0\2\16\1\u0201\2\16\5\0\3\16"+
    "\1\0\1\u0202\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u0203\10\16\23\0\3\16"+
    "\1\u0203\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\16\1\u0204\17\16\23\0\2\16"+
    "\1\u0204\2\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u0205\10\16\23\0\3\16"+
    "\1\u0205\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\16\1\u0206\17\16\23\0\2\16"+
    "\1\u0206\2\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u0207\10\16\23\0\3\16"+
    "\1\u0207\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\4\16\1\u0208\14\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\3\16\1\u0209\1\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u020a\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\4\16\1\u020b\14\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\2\16"+
    "\1\u020c\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\4\16\1\u020d"+
    "\14\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\3\16\1\u020e\15\16\23\0"+
    "\4\16\1\u020e\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\4\16\1\u020f\14\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\7\16\1\u0210\6\16\1\u0211\2\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\u0212\4\0\5\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\2\0\3\u01c1\23\0\1\u01c3"+
    "\102\0\1\u0213\55\0\3\16\1\0\1\16\4\0\1\16"+
    "\1\u0214\3\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\2\16"+
    "\1\u0215\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\2\16\1\u0216"+
    "\10\16\1\u0217\5\16\23\0\1\16\1\u0217\3\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\2\16\1\u0218"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\u0219"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\1\16\1\u021a\3\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\12\16"+
    "\1\u021b\6\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\10\16\1\u021c\10\16"+
    "\23\0\3\16\1\u021c\1\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\4\16\1\u021d\14\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\u021e\4\0\5\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\16"+
    "\1\u021f\17\16\23\0\2\16\1\u021f\2\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\15\16"+
    "\1\u0220\3\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\2\16\1\u0221\16\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u0222\10\16\23\0\3\16"+
    "\1\u0222\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\1\u0223\2\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\3\16\1\u0224\1\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\3\16\1\u0225"+
    "\15\16\23\0\4\16\1\u0225\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\3\16\1\u0226\15\16"+
    "\23\0\4\16\1\u0226\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\13\16\1\u0227\5\16\23\0"+
    "\1\16\1\u0227\3\16\5\0\3\16\1\0\1\u0228\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\3\16\1\u0229\15\16\23\0\4\16\1\u0229\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\4\16"+
    "\1\u022a\6\16\1\u022b\5\16\23\0\1\16\1\u022b\3\16"+
    "\5\0\3\16\1\0\1\16\4\0\4\16\1\u022c\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\4\16\1\u022d"+
    "\14\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\3\16\1\u022e\15\16\23\0"+
    "\4\16\1\u022e\5\0\3\16\1\0\1\u022f\4\0\5\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\2\16"+
    "\1\u0230\16\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\12\16\1\u0231\6\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\16\1\u0232\17\16\23\0\2\16"+
    "\1\u0232\2\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\10\16\1\u0233\10\16\23\0\3\16"+
    "\1\u0233\1\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\u0234\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\4\16\1\u0235\14\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\3\16\1\u0236"+
    "\15\16\23\0\4\16\1\u0236\5\0\3\16\1\0\1\16"+
    "\4\0\2\16\1\u0237\2\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\2\16\1\u0238\16\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\1\16\1\u0239\17\16\23\0\2\16\1\u0239\2\16"+
    "\5\0\3\16\1\0\1\16\4\0\1\16\1\u023a\3\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\2\16"+
    "\1\u023b\16\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\2\16\1\u023c\16\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\1\16"+
    "\1\u023d\3\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\10\16\1\u023e\10\16\23\0\3\16\1\u023e\1\16"+
    "\5\0\3\16\1\0\1\16\4\0\2\16\1\u023f\2\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\10\16"+
    "\1\u0240\10\16\23\0\3\16\1\u0240\1\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\1\16\1\u0241\1\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\u0242"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\17\16\1\u0243\1\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u0244\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\1\u0245\2\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\4\16\1\u0246\14\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\4\16\1\u0247"+
    "\14\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\3\16\1\u0248\15\16\23\0"+
    "\4\16\1\u0248\5\0\3\16\1\0\1\16\4\0\4\16"+
    "\1\u0249\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\4\16\1\u024a\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\1\u024b\2\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\2\16\1\u024c\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u024d\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u024e\15\16\23\0\4\16"+
    "\1\u024e\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\2\16\1\u024f\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\6\16"+
    "\1\u0250\12\16\23\0\5\16\5\0\3\16\1\0\1\u0251"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\5\16\1\u0252\13\16\23\0\1\u0252\4\16\5\0"+
    "\3\16\1\0\1\16\4\0\1\16\1\u0253\3\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\u0254\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\32\0\1\u0255\44\0\1\u0255\7\0\3\16\1\0"+
    "\1\u0256\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u0257\17\16\23\0\2\16\1\u0257"+
    "\2\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\2\16\1\u0258\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\2\16\1\u0259\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\10\16\1\u025a\10\16\23\0"+
    "\3\16\1\u025a\1\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\6\16\1\u025b\12\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\12\16\1\u025c\6\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\7\16\1\u025d\11\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\3\16\1\u025e"+
    "\15\16\23\0\4\16\1\u025e\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\2\16\1\u025f\16\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\u0260\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\u0261\4\0\5\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\4\16\1\u0262\14\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u0263\17\16\23\0\2\16\1\u0263"+
    "\2\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\4\16\1\u0264\14\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\1\16\1\u0265\3\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\u0266\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\3\16\1\u0267\15\16\23\0\4\16\1\u0267"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\1\16\1\u0268\17\16\23\0\2\16\1\u0268\2\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\3\16\1\u0269\15\16\23\0\4\16\1\u0269\5\0"+
    "\3\16\1\0\1\u026a\4\0\5\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\12\16\1\u026b\6\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u026c\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\4\16\1\u026d\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\3\16"+
    "\1\u026e\1\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\u026f\4\0\5\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\11\16\1\u0270\7\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\1\u0271\2\16\1\0\2\16\1\u0272\16\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u0273\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\3\16\1\u0274"+
    "\15\16\23\0\4\16\1\u0274\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\1\u0275\20\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\14\16\1\u0276\4\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\1\u0277\20\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\4\16\1\u0278\14\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\2\16"+
    "\1\u0279\2\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\2\16"+
    "\1\u027a\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\10\16\1\u027b"+
    "\10\16\23\0\3\16\1\u027b\1\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\20\16\1\u027c"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\2\16\1\u027d\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\3\16\1\u027e\15\16\23\0\4\16\1\u027e\5\0\3\16"+
    "\1\0\1\16\4\0\1\16\1\u027f\3\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\u0280"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\u0281\4\0\5\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\1\16\1\u0282\17\16"+
    "\23\0\2\16\1\u0282\2\16\5\0\3\16\1\0\1\u0283"+
    "\4\0\5\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\3\16\1\u0284\1\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\2\16\1\u0285\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\5\16\1\u0286\13\16\23\0"+
    "\1\u0286\4\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\6\16\1\u0287\12\16\23\0\5\16"+
    "\20\0\1\u0288\66\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u0289\15\16\23\0\4\16"+
    "\1\u0289\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\u028a\20\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\4\16"+
    "\1\u028b\14\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\1\u028c\20\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\u028d\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\3\16\1\u028e"+
    "\15\16\23\0\4\16\1\u028e\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\1\u028f\2\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\10\16\1\u0290\10\16\23\0\3\16\1\u0290"+
    "\1\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u0291\17\16\23\0\2\16\1\u0291"+
    "\2\16\5\0\3\16\1\0\1\16\4\0\1\16\1\u0292"+
    "\3\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\3\16\1\u0293\15\16\23\0\4\16\1\u0293\5\0\3\16"+
    "\1\0\1\16\4\0\3\16\1\u0294\1\16\2\0\3\16"+
    "\1\0\21\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\3\16\1\u0295\15\16"+
    "\23\0\4\16\1\u0295\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\10\16\1\u0296\10\16\23\0"+
    "\3\16\1\u0296\1\16\5\0\3\16\1\0\1\u0297\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\2\16\1\u0298\16\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\1\u0299\2\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\u029a\4\0\5\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\16"+
    "\1\u029b\17\16\23\0\2\16\1\u029b\2\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\16"+
    "\1\u029c\17\16\23\0\2\16\1\u029c\2\16\5\0\3\16"+
    "\1\0\1\16\4\0\4\16\1\u029d\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\3\16\1\u029e\15\16\23\0"+
    "\4\16\1\u029e\5\0\3\16\1\0\1\16\4\0\1\16"+
    "\1\u029f\3\16\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\3\16\1\u02a0\15\16\23\0\4\16\1\u02a0\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\2\16\1\u02a1\16\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\3\16\1\u02a2"+
    "\15\16\23\0\4\16\1\u02a2\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\3\16\1\u02a3\15\16"+
    "\23\0\4\16\1\u02a3\5\0\3\16\1\0\1\u02a4\4\0"+
    "\5\16\2\0\3\16\1\0\21\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\1\u02a5\2\16"+
    "\1\0\21\16\23\0\5\16\33\0\1\u02a6\53\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\4\16"+
    "\1\u02a7\14\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\5\16\1\u02a8\13\16"+
    "\23\0\1\u02a8\4\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\15\16\1\u02a9\3\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\5\16\1\u02aa\13\16\23\0\1\u02aa\4\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\2\16\1\u02ab\16\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\u02ac\4\0\5\16\2\0\3\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u02ad\15\16\23\0\4\16"+
    "\1\u02ad\5\0\3\16\1\0\1\u02ae\4\0\5\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\7\16\1\u02af"+
    "\11\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\2\16\1\u02b0\16\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\u02b1\20\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\12\16"+
    "\1\u02b2\6\16\23\0\5\16\5\0\3\16\1\0\1\16"+
    "\4\0\5\16\2\0\3\16\1\0\7\16\1\u02b3\11\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\u02b4\4\0\5\16"+
    "\2\0\3\16\1\0\21\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\u02b5"+
    "\20\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\6\16\1\u02b6\12\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\u02b7\20\16\23\0\5\16\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\3\16\1\0\1\u02b8"+
    "\20\16\23\0\5\16\34\0\1\u02b9\44\0\1\u02b9\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\3\16\1\u02ba\15\16\23\0\4\16\1\u02ba\5\0\3\16"+
    "\1\0\1\16\4\0\5\16\2\0\2\16\1\u02bb\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\4\16\1\u02bc\2\0\3\16\1\0\21\16\23\0\5\16"+
    "\5\0\3\16\1\0\1\16\4\0\5\16\2\0\3\16"+
    "\1\0\1\u02bd\20\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\1\u02be\2\16\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\1\u02bf\20\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\16\4\0\5\16\2\0\3\16\1\0"+
    "\1\16\1\u02c0\17\16\23\0\2\16\1\u02c0\2\16\5\0"+
    "\3\16\1\0\1\16\4\0\3\16\1\u02c1\1\16\2\0"+
    "\3\16\1\0\21\16\23\0\5\16\5\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\3\16\1\0\7\16\1\u02c2"+
    "\11\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\1\16\1\u02c3\17\16\23\0"+
    "\2\16\1\u02c3\2\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\10\16\1\u02c4\10\16\23\0"+
    "\3\16\1\u02c4\1\16\33\0\1\u02c5\53\0\3\16\1\0"+
    "\1\u02c6\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u02c7\17\16\23\0\2\16\1\u02c7"+
    "\2\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u02c8\17\16\23\0\2\16\1\u02c8"+
    "\2\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\1\16\1\u02c9\17\16\23\0\2\16\1\u02c9"+
    "\2\16\5\0\3\16\1\0\1\16\4\0\5\16\2\0"+
    "\3\16\1\0\7\16\1\u02ca\11\16\23\0\5\16\5\0"+
    "\3\16\1\0\1\u02cb\4\0\5\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\31\0\1\u02cc\55\0\3\16\1\0"+
    "\1\16\4\0\2\16\1\u02cd\2\16\2\0\3\16\1\0"+
    "\21\16\23\0\5\16\5\0\3\16\1\0\1\16\4\0"+
    "\5\16\2\0\3\16\1\0\4\16\1\u02ce\14\16\23\0"+
    "\5\16\32\0\1\u02cf\44\0\1\u02cf\7\0\3\16\1\0"+
    "\1\16\4\0\5\16\2\0\2\16\1\u02d0\1\0\21\16"+
    "\23\0\5\16\5\0\3\16\1\0\1\16\4\0\5\16"+
    "\2\0\3\16\1\0\3\16\1\u02d1\15\16\23\0\4\16"+
    "\1\u02d1\2\0\3\u02cf\23\0\1\u02d2\56\0\3\16\1\0"+
    "\1\u02d3\4\0\5\16\2\0\3\16\1\0\21\16\23\0"+
    "\5\16\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34716];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\2\0\1\1\2\0\1\11\11\1\1\11"+
    "\11\1\1\11\15\1\2\11\1\1\2\11\10\1\5\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\3\11\1\1\1\11\4\1\4\11"+
    "\3\1\1\0\1\1\1\0\5\1\1\11\1\1\4\11"+
    "\1\1\1\11\6\1\1\11\4\1\1\11\7\1\1\11"+
    "\2\0\66\1\1\11\1\1\6\11\1\1\1\11\2\1"+
    "\12\11\1\1\2\11\1\1\1\0\10\1\1\11\2\1"+
    "\1\11\7\1\1\11\3\1\1\11\1\1\1\11\4\1"+
    "\1\11\2\0\114\1\3\11\1\1\1\11\10\1\1\11"+
    "\21\1\2\0\110\1\1\11\25\1\1\11\2\0\1\11"+
    "\117\1\1\0\101\1\1\0\62\1\1\0\35\1\1\0"+
    "\22\1\1\0\13\1\1\0\6\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[723];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol symbol(int type) {
		return new Symbol(type, yychar, yychar + yylength());
	}
	
	private Symbol symbol(int type, int offset, int length) {
		return new Symbol(type, offset, offset + length);
	}	

	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yychar, yychar + yylength(), value);
	}
	
	private Symbol symbol(int type, Object value, int offset, int length) {
		return new Symbol(type, offset, offset + length, value);
	}
	
	private Symbol sqlStatement() {
		rawString.append("}");
		if(openingBraceOffset != "#sql{".length()) {
			lexerErrors.add(new SyntaxError(2206, startOffset + "#sql".length(), startOffset + openingBraceOffset - 1, SyntaxError.WARNING)); 
		}
		return symbol(NodeTypes.SQLSTMTLIT, new InlineSQLStatement(rawString.toString(), openingBraceOffset, startOffset, startOffset+rawString.length()), startOffset, rawString.length());
	}
	
	private Symbol sqlCondition() {
		rawString.append("}");
		if(openingBraceOffset != "#sqlcondition{".length()) {
			lexerErrors.add(new SyntaxError(2207, startOffset + "#sqlcondition".length(), startOffset + openingBraceOffset - 1, SyntaxError.WARNING)); 
		}
		return symbol(NodeTypes.SQLCONDITION, new InlineSQLStatement(rawString.toString(), openingBraceOffset, startOffset, startOffset+rawString.length()), startOffset, rawString.length());
	}
	
	private Symbol dli() {
		rawString.append("}");
		if(openingBraceOffset != "#dli{".length()) {
			lexerErrors.add(new SyntaxError(2208, startOffset + "#dli".length(), startOffset + openingBraceOffset - 1, SyntaxError.WARNING)); 
		}
		return symbol(NodeTypes.INLINE_DLI, new InlineDLIStatement(rawString.toString(), openingBraceOffset, startOffset, startOffset+rawString.length()), startOffset, rawString.length());
	}
	
	private static final int LITERALTYPE_STRING		= 0;
	private static final int LITERALTYPE_HEX		= 1;
	private static final int LITERALTYPE_CHAR		= 2;
	private static final int LITERALTYPE_DBCHAR		= 3;
	private static final int LITERALTYPE_MBCHAR		= 4;
	private static final int LITERALTYPE_CHARHEX	= 5;
	private static final int LITERALTYPE_DBCHARHEX	= 6;
	private static final int LITERALTYPE_MBCHARHEX	= 7;
	private static final int LITERALTYPE_UNICODEHEX	= 8;
	
	private Symbol string() {
		switch(stringLiteralType) {
			case LITERALTYPE_STRING:	return symbol(NodeTypes.STRING, new StringLiteral(rawString.toString(), stringValue.toString(), false, startOffset, startOffset+rawString.length()), startOffset, rawString.length());
			case LITERALTYPE_HEX:		return symbol(NodeTypes.HEXLIT, new HexLiteral(rawString.toString(), stringValue.toString(), startOffset, startOffset+rawString.length()+1), startOffset, rawString.length()+1);
			case LITERALTYPE_CHAR:		return symbol(NodeTypes.CHARLIT, new CharLiteral(rawString.toString(), stringValue.toString(), false, startOffset, startOffset+rawString.length()+1), startOffset, rawString.length()+1);
			case LITERALTYPE_DBCHAR:	return symbol(NodeTypes.DBCHARLIT, new DBCharLiteral(rawString.toString(), stringValue.toString(), false, startOffset, startOffset+rawString.length()+1), startOffset, rawString.length()+1);
			case LITERALTYPE_MBCHAR:	return symbol(NodeTypes.MBCHARLIT, new MBCharLiteral(rawString.toString(), stringValue.toString(), false, startOffset, startOffset+rawString.length()+1), startOffset, rawString.length()+1);
			case LITERALTYPE_CHARHEX:	return symbol(NodeTypes.CHARLIT, new CharLiteral(rawString.toString(), stringValue.toString(), true, startOffset, startOffset+rawString.length()+2), startOffset, rawString.length()+2);
			case LITERALTYPE_DBCHARHEX:	return symbol(NodeTypes.DBCHARLIT, new DBCharLiteral(rawString.toString(), stringValue.toString(), true, startOffset, startOffset+rawString.length()+2), startOffset, rawString.length()+2);
			case LITERALTYPE_MBCHARHEX:	return symbol(NodeTypes.MBCHARLIT, new MBCharLiteral(rawString.toString(), stringValue.toString(), true, startOffset, startOffset+rawString.length()+2), startOffset, rawString.length()+2);
			case LITERALTYPE_UNICODEHEX:	return symbol(NodeTypes.STRING, new StringLiteral(rawString.toString(), stringValue.toString(), true, startOffset, startOffset+rawString.length()+2), startOffset, rawString.length()+2);
			default: throw new RuntimeException("Should not happen.");
		}
	}
	
	public List getLexerErrors() {
		return lexerErrors;
	}
	
	public void reset(Reader reader) {
		lexerErrors = new ArrayList();
		yyreset(reader);
	}
	protected int stringLiteralType;
	protected StringBuffer rawString = new StringBuffer();		// The raw string of delimited tokens (i.e. for string literals, including the ")
	protected StringBuffer stringValue = new StringBuffer();	// The canonical string of delimiated tokens (i.e. for string literals, excluding the ")
	protected int startOffset;									// The start offset of delimited tokens
	protected int openingBraceOffset;							// The offset of the opening brace for inline SQL and inline SQL Condition tokens
	
	protected boolean isSQLCondition;
	
	protected List lexerErrors = new ArrayList();
	
	protected boolean returnLineBreaks;
	protected boolean returnLineComments;
	protected boolean returnBlockComments;
	
	protected List lineBreaks = new ArrayList();
	protected List lineComments = new ArrayList();
	protected List blockComments = new ArrayList();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1814) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 192: 
          { return symbol(NodeTypes.PROGRAM);
          }
        case 236: break;
        case 113: 
          { return symbol(NodeTypes.BOOLEANLIT, org.eclipse.edt.compiler.core.Boolean.YES);
          }
        case 237: break;
        case 1: 
          { rawString.append(yytext());
          }
        case 238: break;
        case 78: 
          { return symbol(NodeTypes.GE);
          }
        case 239: break;
        case 59: 
          { return symbol(NodeTypes.TIMESTIMES);
          }
        case 240: break;
        case 63: 
          { return symbol(NodeTypes.BOOLEANLIT, org.eclipse.edt.compiler.core.Boolean.NO);
          }
        case 241: break;
        case 120: 
          { return symbol(NodeTypes.RIGHTSHIFTLOGICAL);
          }
        case 242: break;
        case 230: 
          { return symbol(NodeTypes.ONEXCEPTION);
          }
        case 243: break;
        case 50: 
          { return symbol(NodeTypes.PLUSEQ);
          }
        case 244: break;
        case 210: 
          { return symbol(NodeTypes.ABSOLUTE);
          }
        case 245: break;
        case 10: 
          { return symbol(NodeTypes.MINUS);
          }
        case 246: break;
        case 118: 
          { return symbol(NodeTypes.LEFTSHIFTEQ);
          }
        case 247: break;
        case 139: 
          { return symbol(NodeTypes.GOTO);
          }
        case 248: break;
        case 197: 
          { return symbol(NodeTypes.FOREACH);
          }
        case 249: break;
        case 183: 
          { return symbol(NodeTypes.DLICALL);
          }
        case 250: break;
        case 122: 
          { return symbol(NodeTypes.EXIT);
          }
        case 251: break;
        case 30: 
          { return symbol(NodeTypes.AT);
          }
        case 252: break;
        case 173: 
          { return symbol(NodeTypes.IMPORT);
          }
        case 253: break;
        case 76: 
          { return symbol(NodeTypes.LE);
          }
        case 254: break;
        case 131: 
          { return symbol(NodeTypes.OPEN);
          }
        case 255: break;
        case 191: 
          { return symbol(NodeTypes.PREPARE);
          }
        case 256: break;
        case 101: 
          { return symbol(NodeTypes.URL);
          }
        case 257: break;
        case 93: 
          { return symbol(NodeTypes.FLOATLIT, yytext());
          }
        case 258: break;
        case 231: 
          { return symbol(NodeTypes.TRANSACTION);
          }
        case 259: break;
        case 218: 
          { return symbol(NodeTypes.OTHERWISE);
          }
        case 260: break;
        case 182: 
          { return symbol(NodeTypes.NUMERICPRIMITIVE, Primitive.DECIMAL);
          }
        case 261: break;
        case 119: 
          { return symbol(NodeTypes.RIGHTSHIFTARITHMETICEQ);
          }
        case 262: break;
        case 61: 
          { return symbol(NodeTypes.OR);
          }
        case 263: break;
        case 162: 
          { return symbol(NodeTypes.FIRST);
          }
        case 264: break;
        case 128: 
          { return symbol(NodeTypes.MOVE);
          }
        case 265: break;
        case 221: 
          { return symbol(NodeTypes.RETURNING);
          }
        case 266: break;
        case 156: 
          { return symbol(NodeTypes.THROW);
          }
        case 267: break;
        case 108: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.INT);
          }
        case 268: break;
        case 86: 
          { rawString.append("\\f");		stringValue.append('\f');
          }
        case 269: break;
        case 164: 
          { return symbol(NodeTypes.WHILE);
          }
        case 270: break;
        case 115: 
          { return symbol(NodeTypes.GET);
          }
        case 271: break;
        case 82: 
          { return symbol(NodeTypes.MODULOEQ);
          }
        case 272: break;
        case 52: 
          { yybegin(BLOCK_COMMENT); startOffset = yychar;
          }
        case 273: break;
        case 7: 
          { return symbol(NodeTypes.DOT);
          }
        case 274: break;
        case 214: 
          { return symbol(NodeTypes.DECREMENT);
          }
        case 275: break;
        case 199: 
          { return symbol(NodeTypes.FREESQL);
          }
        case 276: break;
        case 142: 
          { return symbol(NodeTypes.HOLD);
          }
        case 277: break;
        case 114: 
          { return symbol(NodeTypes.REF);
          }
        case 278: break;
        case 99: 
          { yybegin(HEXSTRING); stringLiteralType = LITERALTYPE_UNICODEHEX; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 279: break;
        case 15: 
          { return symbol(NodeTypes.RPAREN);
          }
        case 280: break;
        case 213: 
          { return symbol(NodeTypes.FUNCTION);
          }
        case 281: break;
        case 62: 
          { return symbol(NodeTypes.OF);
          }
        case 282: break;
        case 51: 
          { Symbol symbol = symbol(NodeTypes.LINE_COMMENT); if(returnLineComments) lineComments.add(symbol); return symbol;
          }
        case 283: break;
        case 184: 
          { return symbol(NodeTypes.DISPLAY);
          }
        case 284: break;
        case 233: 
          { return symbol(NodeTypes.WITHV60COMPAT);
          }
        case 285: break;
        case 201: 
          { return symbol(NodeTypes.CONTINUE);
          }
        case 286: break;
        case 123: 
          { return symbol(NodeTypes.ELSE);
          }
        case 287: break;
        case 3: 
          { Symbol symbol = symbol(NodeTypes.LINEBREAKS); if(returnLineBreaks) lineBreaks.add(symbol); return symbol;
          }
        case 288: break;
        case 208: 
          { return symbol(NodeTypes.INPARENT);
          }
        case 289: break;
        case 46: 
          { yybegin(DLI); rawString.append(yytext());
          }
        case 290: break;
        case 40: 
          { yybegin(SQL); rawString.append(yytext());
          }
        case 291: break;
        case 85: 
          { rawString.append("\\b");		stringValue.append('\b');
          }
        case 292: break;
        case 25: 
          { return symbol(NodeTypes.QUESTION);
          }
        case 293: break;
        case 5: 
          { return symbol(NodeTypes.ID, yytext());
          }
        case 294: break;
        case 90: 
          { yybegin(YYINITIAL); Symbol symbol = symbol(NodeTypes.BLOCK_COMMENT, startOffset, yychar + 2 - startOffset); if(returnBlockComments) blockComments.add(symbol); return symbol;
          }
        case 295: break;
        case 117: 
          { return symbol(NodeTypes.CONCATEQ);
          }
        case 296: break;
        case 107: 
          { return symbol(NodeTypes.ISA);
          }
        case 297: break;
        case 190: 
          { return symbol(NodeTypes.PASSING);
          }
        case 298: break;
        case 21: 
          { return symbol(NodeTypes.BITAND);
          }
        case 299: break;
        case 44: 
          { yybegin(YYINITIAL); return dli();
          }
        case 300: break;
        case 64: 
          { return symbol(NodeTypes.IS);
          }
        case 301: break;
        case 83: 
          { rawString.append("\\\"");		stringValue.append('\"');
          }
        case 302: break;
        case 96: 
          { yybegin(HEXSTRING); stringLiteralType = LITERALTYPE_CHARHEX; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 303: break;
        case 38: 
          { yybegin(YYINITIAL); return isSQLCondition ? sqlCondition() : sqlStatement();
          }
        case 304: break;
        case 28: 
          { return symbol(NodeTypes.RBRACKET);
          }
        case 305: break;
        case 195: 
          { return symbol(NodeTypes.REPLACE);
          }
        case 306: break;
        case 181: 
          { return symbol(NodeTypes.CURRENT);
          }
        case 307: break;
        case 180: 
          { return symbol(NodeTypes.EXTENDS);
          }
        case 308: break;
        case 211: 
          { return symbol(NodeTypes.PREVIOUS);
          }
        case 309: break;
        case 106: 
          { return symbol(NodeTypes.NOT);
          }
        case 310: break;
        case 43: 
          { yybegin(DLI_DBL_QUOTED_ID); rawString.append('\"');
          }
        case 311: break;
        case 169: 
          { return symbol(NodeTypes.STATIC);
          }
        case 312: break;
        case 170: 
          { return symbol(NodeTypes.CHARPRIMITIVE, Primitive.STRING);
          }
        case 313: break;
        case 102: 
          { return symbol(NodeTypes.TIMESTIMESEQ);
          }
        case 314: break;
        case 104: 
          { return symbol(NodeTypes.OUT);
          }
        case 315: break;
        case 127: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.DATE);
          }
        case 316: break;
        case 91: 
          { rawString.append("\"\"");
          }
        case 317: break;
        case 178: 
          { return symbol(NodeTypes.RETURN);
          }
        case 318: break;
        case 24: 
          { return symbol(NodeTypes.GT);
          }
        case 319: break;
        case 140: 
          { return symbol(NodeTypes.FORM);
          }
        case 320: break;
        case 189: 
          { return symbol(NodeTypes.PACKAGE);
          }
        case 321: break;
        case 57: 
          { yybegin(STRING); stringLiteralType = LITERALTYPE_DBCHAR; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 322: break;
        case 48: 
          { yybegin(DLI); rawString.append('\"');
          }
        case 323: break;
        case 219: 
          { return symbol(NodeTypes.INTERFACE);
          }
        case 324: break;
        case 8: 
          { return symbol(NodeTypes.PLUS);
          }
        case 325: break;
        case 14: 
          { return symbol(NodeTypes.LPAREN);
          }
        case 326: break;
        case 71: 
          { return symbol(NodeTypes.CONCAT);
          }
        case 327: break;
        case 235: 
          { return symbol(NodeTypes.LANGUAGEBUNDLE);
          }
        case 328: break;
        case 145: 
          { return symbol(NodeTypes.WHEN);
          }
        case 329: break;
        case 161: 
          { return symbol(NodeTypes.FIELD);
          }
        case 330: break;
        case 148: 
          { return symbol(NodeTypes.CLOSE);
          }
        case 331: break;
        case 172: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.NUMBER);
          }
        case 332: break;
        case 111: 
          { return symbol(NodeTypes.ALL);
          }
        case 333: break;
        case 31: 
          { return symbol(NodeTypes.NEGATE);
          }
        case 334: break;
        case 143: 
          { return symbol(NodeTypes.WITH);
          }
        case 335: break;
        case 32: 
          { rawString.append(yytext());	stringValue.append(yytext());
          }
        case 336: break;
        case 23: 
          { return symbol(NodeTypes.LT);
          }
        case 337: break;
        case 150: 
          { return symbol(NodeTypes.USING);
          }
        case 338: break;
        case 225: 
          { return symbol(NodeTypes.IMPLEMENTS);
          }
        case 339: break;
        case 72: 
          { return symbol(NodeTypes.EQ);
          }
        case 340: break;
        case 186: 
          { return symbol(NodeTypes.LIBRARY);
          }
        case 341: break;
        case 151: 
          { yybegin(DLI); rawString.setLength(0); rawString.append(yytext()); startOffset = yychar; openingBraceOffset = yylength();
          }
        case 342: break;
        case 47: 
          { yybegin(DLI); rawString.append('\'');
          }
        case 343: break;
        case 16: 
          { return symbol(NodeTypes.BANG);
          }
        case 344: break;
        case 41: 
          { yybegin(SQL); rawString.append('\"');
          }
        case 345: break;
        case 58: 
          { yybegin(STRING); stringLiteralType = LITERALTYPE_MBCHAR; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 346: break;
        case 54: 
          { return symbol(NodeTypes.MINUSEQ);
          }
        case 347: break;
        case 232: 
          { return symbol(NodeTypes.EXTERNALTYPE);
          }
        case 348: break;
        case 17: 
          { return symbol(NodeTypes.COMMA);
          }
        case 349: break;
        case 6: 
          { return symbol(NodeTypes.INTEGER, yytext());
          }
        case 350: break;
        case 18: 
          { return symbol(NodeTypes.SEMI);
          }
        case 351: break;
        case 154: 
          { return symbol(NodeTypes.LABEL);
          }
        case 352: break;
        case 171: 
          { return symbol(NodeTypes.OPENUI);
          }
        case 353: break;
        case 70: 
          { return symbol(NodeTypes.NE);
          }
        case 354: break;
        case 224: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.SMALLFLOAT);
          }
        case 355: break;
        case 196: 
          { return symbol(NodeTypes.RUNUNIT);
          }
        case 356: break;
        case 175: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.BIGINT);
          }
        case 357: break;
        case 130: 
          { return symbol(NodeTypes.LAST);
          }
        case 358: break;
        case 187: 
          { return symbol(NodeTypes.ONEVENT);
          }
        case 359: break;
        case 167: 
          { return symbol(NodeTypes.UPDATE);
          }
        case 360: break;
        case 95: 
          { return symbol(NodeTypes.XOR);
          }
        case 361: break;
        case 29: 
          { return symbol(NodeTypes.RCURLY);
          }
        case 362: break;
        case 53: 
          { return symbol(NodeTypes.DIVEQ);
          }
        case 363: break;
        case 205: 
          { return symbol(NodeTypes.USINGPCB);
          }
        case 364: break;
        case 165: 
          { return symbol(NodeTypes.ESCAPE);
          }
        case 365: break;
        case 49: 
          { return symbol(NodeTypes.DECIMALLIT, yytext());
          }
        case 366: break;
        case 42: 
          { yybegin(SQL); rawString.append('\'');
          }
        case 367: break;
        case 75: 
          { return symbol(NodeTypes.BITOREQ);
          }
        case 368: break;
        case 163: 
          { return symbol(NodeTypes.WHERE);
          }
        case 369: break;
        case 11: 
          { yybegin(STRING); stringLiteralType = LITERALTYPE_STRING; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 370: break;
        case 68: 
          { return symbol(NodeTypes.AS);
          }
        case 371: break;
        case 166: 
          { return symbol(NodeTypes.DELETE);
          }
        case 372: break;
        case 200: 
          { return symbol(NodeTypes.HANDLER);
          }
        case 373: break;
        case 202: 
          { return symbol(NodeTypes.CONVERSE);
          }
        case 374: break;
        case 19: 
          { return symbol(NodeTypes.COLON);
          }
        case 375: break;
        case 174: 
          { return symbol(NodeTypes.INSERT);
          }
        case 376: break;
        case 168: 
          { return symbol(NodeTypes.SCROLL);
          }
        case 377: break;
        case 153: 
          { return symbol(NodeTypes.STACK);
          }
        case 378: break;
        case 226: 
          { return symbol(NodeTypes.BYPOSITION);
          }
        case 379: break;
        case 157: 
          { return symbol(NodeTypes.CHARPRIMITIVE, Primitive.BYTES);
          }
        case 380: break;
        case 116: 
          { return symbol(NodeTypes.FOR);
          }
        case 381: break;
        case 176: 
          { return symbol(NodeTypes.BYNAME);
          }
        case 382: break;
        case 37: 
          { yybegin(SQLDELIMITEDID); rawString.append('\"');
          }
        case 383: break;
        case 155: 
          { return symbol(NodeTypes.INOUT);
          }
        case 384: break;
        case 105: 
          { return symbol(NodeTypes.NEW);
          }
        case 385: break;
        case 92: 
          { rawString.append("\'\'");
          }
        case 386: break;
        case 152: 
          { yybegin(SQL); isSQLCondition = false; rawString.setLength(0); rawString.append(yytext()); startOffset = yychar; openingBraceOffset = yylength();
          }
        case 387: break;
        case 223: 
          { return symbol(NodeTypes.FORUPDATE);
          }
        case 388: break;
        case 12: 
          { return symbol(NodeTypes.TIMES);
          }
        case 389: break;
        case 20: 
          { return symbol(NodeTypes.ASSIGN);
          }
        case 390: break;
        case 158: 
          { return symbol(NodeTypes.PRINT);
          }
        case 391: break;
        case 159: 
          { return symbol(NodeTypes.GROUP);
          }
        case 392: break;
        case 26: 
          { return symbol(NodeTypes.MODULO);
          }
        case 393: break;
        case 81: 
          { return symbol(NodeTypes.QUESTIONBRACKET);
          }
        case 394: break;
        case 34: 
          { yybegin(YYINITIAL); rawString.append('\"'); return string();
          }
        case 395: break;
        case 144: 
          { return symbol(NodeTypes.WRAP);
          }
        case 396: break;
        case 60: 
          { return symbol(NodeTypes.TIMESEQ);
          }
        case 397: break;
        case 135: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.TIME);
          }
        case 398: break;
        case 222: 
          { return symbol(NodeTypes.FORMGROUP);
          }
        case 399: break;
        case 67: 
          { return symbol(NodeTypes.TO);
          }
        case 400: break;
        case 212: 
          { return symbol(NodeTypes.RELATIVE);
          }
        case 401: break;
        case 69: 
          { return symbol(NodeTypes.BY);
          }
        case 402: break;
        case 138: 
          { return symbol(NodeTypes.BIND);
          }
        case 403: break;
        case 13: 
          { return symbol(NodeTypes.LCURLY);
          }
        case 404: break;
        case 80: 
          { return symbol(NodeTypes.NULLCONCAT);
          }
        case 405: break;
        case 126: 
          { return symbol(NodeTypes.CALL);
          }
        case 406: break;
        case 177: 
          { return symbol(NodeTypes.RECORD);
          }
        case 407: break;
        case 109: 
          { return symbol(NodeTypes.TRY);
          }
        case 408: break;
        case 179: 
          { return symbol(NodeTypes.EXECUTE);
          }
        case 409: break;
        case 35: 
          { rawString.append("\\");		stringValue.append('\\'); lexerErrors.add(new SyntaxError(2205, yychar, yychar+2));
          }
        case 410: break;
        case 204: 
          { return symbol(NodeTypes.DATAITEM);
          }
        case 411: break;
        case 228: 
          { return symbol(NodeTypes.CONSTRUCTOR);
          }
        case 412: break;
        case 147: 
          { return symbol(NodeTypes.EMBED);
          }
        case 413: break;
        case 103: 
          { return symbol(NodeTypes.SET);
          }
        case 414: break;
        case 84: 
          { rawString.append("\\\\");		stringValue.append('\\');
          }
        case 415: break;
        case 27: 
          { return symbol(NodeTypes.LBRACKET);
          }
        case 416: break;
        case 110: 
          { return symbol(NodeTypes.ADD);
          }
        case 417: break;
        case 2: 
          { return symbol(NodeTypes.error);
          }
        case 418: break;
        case 188: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.BOOLEAN);
          }
        case 419: break;
        case 97: 
          { yybegin(HEXSTRING); stringLiteralType = LITERALTYPE_DBCHARHEX; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 420: break;
        case 124: 
          { return symbol(NodeTypes.XOREQ);
          }
        case 421: break;
        case 203: 
          { return symbol(NodeTypes.DELEGATE);
          }
        case 422: break;
        case 89: 
          { rawString.append("\\t");		stringValue.append('\t');
          }
        case 423: break;
        case 160: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.FLOAT);
          }
        case 424: break;
        case 121: 
          { return symbol(NodeTypes.NULLCONCATEQ);
          }
        case 425: break;
        case 94: 
          { return symbol(NodeTypes.END);
          }
        case 426: break;
        case 136: 
          { return symbol(NodeTypes.TYPE);
          }
        case 427: break;
        case 22: 
          { return symbol(NodeTypes.BITOR);
          }
        case 428: break;
        case 234: 
          { yybegin(SQL); isSQLCondition = true;  rawString.setLength(0); rawString.append(yytext()); startOffset = yychar; openingBraceOffset = yylength();
          }
        case 429: break;
        case 125: 
          { return symbol(NodeTypes.CASE);
          }
        case 430: break;
        case 215: 
          { return symbol(NodeTypes.DATATABLE);
          }
        case 431: break;
        case 112: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.ANY);
          }
        case 432: break;
        case 134: 
          { return symbol(NodeTypes.INTO);
          }
        case 433: break;
        case 9: 
          { return symbol(NodeTypes.DIV);
          }
        case 434: break;
        case 149: 
          { return symbol(NodeTypes.CONST);
          }
        case 435: break;
        case 56: 
          { yybegin(STRING); stringLiteralType = LITERALTYPE_CHAR; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 436: break;
        case 65: 
          { return symbol(NodeTypes.IN);
          }
        case 437: break;
        case 45: 
          { yybegin(DLI_QUOTED_ID); rawString.append('\'');
          }
        case 438: break;
        case 79: 
          { return symbol(NodeTypes.RIGHTSHIFTARITHMETIC);
          }
        case 439: break;
        case 217: 
          { return symbol(NodeTypes.SINGLEROW);
          }
        case 440: break;
        case 100: 
          { return symbol(NodeTypes.USE);
          }
        case 441: break;
        case 141: 
          { return symbol(NodeTypes.FROM);
          }
        case 442: break;
        case 33: 
          { yybegin(YYINITIAL); rawString.append(yytext()); lexerErrors.add(new SyntaxError(2200, startOffset, yychar)); return string();
          }
        case 443: break;
        case 220: 
          { return symbol(NodeTypes.TIMESTAMPINTERVALPRIMITIVE, Primitive.TIMESTAMP);
          }
        case 444: break;
        case 209: 
          { return symbol(NodeTypes.TRANSFER);
          }
        case 445: break;
        case 88: 
          { rawString.append("\\r");		stringValue.append('\r');
          }
        case 446: break;
        case 77: 
          { return symbol(NodeTypes.LEFTSHIFT);
          }
        case 447: break;
        case 206: 
          { return symbol(NodeTypes.PRIMITIVE, Primitive.SMALLINT);
          }
        case 448: break;
        case 36: 
          { lexerErrors.add(new SyntaxError(2209, yychar, yychar+1));
          }
        case 449: break;
        case 66: 
          { return symbol(NodeTypes.IF);
          }
        case 450: break;
        case 185: 
          { return symbol(NodeTypes.SERVICE);
          }
        case 451: break;
        case 74: 
          { return symbol(NodeTypes.AND);
          }
        case 452: break;
        case 98: 
          { yybegin(HEXSTRING); stringLiteralType = LITERALTYPE_MBCHARHEX; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 453: break;
        case 216: 
          { return symbol(NodeTypes.USINGKEYS);
          }
        case 454: break;
        case 193: 
          { return symbol(NodeTypes.PRIVATE);
          }
        case 455: break;
        case 87: 
          { rawString.append("\\n");		stringValue.append('\n');
          }
        case 456: break;
        case 133: 
          { return symbol(NodeTypes.NULL);
          }
        case 457: break;
        case 207: 
          { return symbol(NodeTypes.NOCURSOR);
          }
        case 458: break;
        case 55: 
          { yybegin(HEXSTRING); stringLiteralType = LITERALTYPE_HEX; rawString.setLength(0); rawString.append('\"'); stringValue.setLength(0); startOffset = yychar;
          }
        case 459: break;
        case 137: 
          { return symbol(NodeTypes.THIS);
          }
        case 460: break;
        case 146: 
          { return symbol(NodeTypes.RIGHTSHIFTLOGICALEQ);
          }
        case 461: break;
        case 129: 
          { return symbol(NodeTypes.SHOW);
          }
        case 462: break;
        case 39: 
          { yybegin(SQLSTRING); rawString.append('\'');
          }
        case 463: break;
        case 73: 
          { return symbol(NodeTypes.BITANDEQ);
          }
        case 464: break;
        case 198: 
          { return symbol(NodeTypes.FORWARD);
          }
        case 465: break;
        case 229: 
          { return symbol(NodeTypes.SQLNULLABLE);
          }
        case 466: break;
        case 227: 
          { return symbol(NodeTypes.ENUMERATION);
          }
        case 467: break;
        case 194: 
          { return symbol(NodeTypes.RETURNS);
          }
        case 468: break;
        case 4: 
          { 
          }
        case 469: break;
        case 132: 
          { return symbol(NodeTypes.NEXT);
          }
        case 470: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case DLI: {
              yybegin(YYINITIAL); lexerErrors.add(new SyntaxError(2204, startOffset, startOffset + openingBraceOffset)); return dli();
            }
            case 724: break;
            case DLI_QUOTED_ID: {
              yybegin(DLI);
            }
            case 725: break;
            case SQLDELIMITEDID: {
              yybegin(SQL);
            }
            case 726: break;
            case STRING: {
              yybegin(YYINITIAL); lexerErrors.add(new SyntaxError(2200, startOffset, yychar)); return string();
            }
            case 727: break;
            case DLI_DBL_QUOTED_ID: {
              yybegin(DLI);
            }
            case 728: break;
            case SQL: {
              yybegin(YYINITIAL); lexerErrors.add(new SyntaxError(isSQLCondition ? 2203 : 2202, startOffset, startOffset + openingBraceOffset)); return isSQLCondition ? sqlCondition() : sqlStatement();
            }
            case 729: break;
            case HEXSTRING: {
              yybegin(YYINITIAL); lexerErrors.add(new SyntaxError(2200, startOffset, yychar)); return string();
            }
            case 730: break;
            case BLOCK_COMMENT: {
              yybegin(YYINITIAL); lexerErrors.add(new SyntaxError(2201, startOffset, startOffset + 2)); Symbol symbol = symbol(NodeTypes.BLOCK_COMMENT, startOffset, yychar);  if(returnBlockComments) blockComments.add(symbol); return symbol;
            }
            case 731: break;
            case SQLSTRING: {
              yybegin(SQL);
            }
            case 732: break;
            default:
              { return new java_cup.runtime.Symbol(NodeTypes.EOF, yychar, yychar);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
