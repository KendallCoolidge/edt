package java.nio;

import eglx.java.JavaObject;
import eglx.java.Object;
import eglx.lang.ExternalName;
import java.lang.Comparable;


externalType LongBuffer extends Buffer, Comparable type JavaObject

    private constructor();

    static function allocate(arg0 int in) returns(LongBuffer?);

    function arrayOffset() returns(int);

    function asReadOnlyBuffer() returns(LongBuffer?);

    function compact() returns(LongBuffer?);

    function compareTo(arg0 LongBuffer? in) returns(int);

    function duplicate() returns(LongBuffer?);

    function equals(arg0 Object? in) returns(boolean);

    function _get() returns(bigInt){@externalName{"get"}};

    function _get(arg0 int in) returns(bigInt){@externalName{"get"}};

    function hasArray() returns(boolean);

    function hashCode() returns(int);

    function isDirect() returns(boolean);

    function order() returns(ByteOrder?);

    function put(arg0 bigInt in) returns(LongBuffer?);

    function put(arg0 int in, arg1 bigInt in) returns(LongBuffer?);

    function put(arg0 LongBuffer? in) returns(LongBuffer?);

    function slice() returns(LongBuffer?);

    function toString() returns(string?);
end

