/*******************************************************************************
 * Copyright Â© 2013 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * IBM Corporation - initial API and implementation
 *
 *******************************************************************************/
package java.lang;

import eglx.java.JavaObject;
import eglx.java.Object;
import eglx.lang.ExternalName;
import java.io.Serializable;


externalType StringBuffer extends AbstractStringBuilder, Serializable, CharSequence type JavaObject

    constructor(arg0 CharSequence? in);

    constructor(arg0 string? in);

    constructor(arg0 int in);

    constructor();

    function append(arg0 float in) returns(StringBuffer?);

    function append(arg0 smallFloat in) returns(StringBuffer?);

    function append(arg0 bigInt in) returns(StringBuffer?);

    function append(arg0 int in) returns(StringBuffer?);

    function append(arg0 boolean in) returns(StringBuffer?);

    function append(arg0 CharSequence? in, arg1 int in, arg2 int in) returns(StringBuffer?);

    function append(arg0 CharSequence? in) returns(StringBuffer?);

    function append(arg0 StringBuffer? in) returns(StringBuffer?);

    function append(arg0 string? in) returns(StringBuffer?);

    function append(arg0 Object? in) returns(StringBuffer?);

    function appendCodePoint(arg0 int in) returns(StringBuffer?);

    function capacity() returns(int);

    function codePointAt(arg0 int in) returns(int);

    function codePointBefore(arg0 int in) returns(int);

    function codePointCount(arg0 int in, arg1 int in) returns(int);

    function _delete(arg0 int in, arg1 int in) returns(StringBuffer?){@externalName{"delete"}};

    function deleteCharAt(arg0 int in) returns(StringBuffer?);

    function ensureCapacity(arg0 int in);

    function indexOf(arg0 string? in, arg1 int in) returns(int);

    function indexOf(arg0 string? in) returns(int);

    function _insert(arg0 int in, arg1 float in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 smallFloat in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 bigInt in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 int in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 boolean in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 CharSequence? in, arg2 int in, arg3 int in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 CharSequence? in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 string? in) returns(StringBuffer?){@externalName{"insert"}};

    function _insert(arg0 int in, arg1 Object? in) returns(StringBuffer?){@externalName{"insert"}};

    function lastIndexOf(arg0 string? in) returns(int);

    function lastIndexOf(arg0 string? in, arg1 int in) returns(int);

    function length() returns(int);

    function offsetByCodePoints(arg0 int in, arg1 int in) returns(int);

    function _replace(arg0 int in, arg1 int in, arg2 string? in) returns(StringBuffer?){@externalName{"replace"}};

    function reverse() returns(StringBuffer?);

    function setLength(arg0 int in);

    function subSequence(arg0 int in, arg1 int in) returns(CharSequence?);

    function substring(arg0 int in) returns(string?);

    function substring(arg0 int in, arg1 int in) returns(string?);

    function toString() returns(string?);

    function trimToSize();
end

